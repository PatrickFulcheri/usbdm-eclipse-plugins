<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE devicePage SYSTEM "_menu.dtd" >
<!-- tpm_quad.xml -->

<devicePage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Flex timer">

   <aliasOption key="/SIM/sim_sopt2_pllfllsel" constant="false" optional="true"/> 
   <aliasOption key="/SIM/sim_sopt2_tpmsrc" constant="false" />
   <aliasOption key="/SIM/system_tpm_clock" />

   <intOption name="minimumResolution" description="Minimum resolution for TPM interval"
      toolTip="This value is used as a minimum value for the timer interval in ticks \n
         so that a reasonable resolution is available for PWM duty-cycle"
      value="100" min="0" />
      
   <intOption name="tpmExternalClock" description="TPM External clock "
      toolTip="Clock frequency of external clock supplied to TPM_CLKINx pin"
      value="0" min="0" units="Hz"/>
   <choiceOption name="tpm_sc_cmod" description="Clock Mode Selection"
      toolTip="Selects the clock source for the module">
      <choice value="0" name="Disabled" />
      <choice value="1" name="System TPM Clock" isDefault="true" />
      <choice value="2" name="External clock (synchonized to System TPM Clock)" />
      <choice value="3" name="Reserved" />
   </choiceOption>
   <choiceOption name="tpm_sc_ps" description="Clock prescaler"
      toolTip="Selects the prescaler for the module">
      <choice value="0" name="Divide by 1" isDefault="true" />
      <choice value="1" name="Divide by 2" />
      <choice value="2" name="Divide by 4" />
      <choice value="3" name="Divide by 8" />
      <choice value="4" name="Divide by 16" />
      <choice value="5" name="Divide by 32" />
      <choice value="6" name="Divide by 64" />
      <choice value="7" name="Divide by 128" />
   </choiceOption>
      
   <floatOption name="clockFrequency" 
      constant="true"
      description="Frequency of timer clock"
      toolTip="Determined from timer clock source and prescaler"
      units="Hz"/>
   <floatOption name="clockPeriod" 
      constant="true"
      description="Period of timer clock"
      toolTip="Determined from timer clock source and prescaler"
      units="s"/>
   <floatOption name="maximumPeriod" 
      constant="true"
      description="Maximum period of timer"
      toolTip="Determined from timer clock source and prescaler"
      units="s"/>
   <intOption name="period" description="Period of timer"
      toolTip="Default period of the timer"
      value="10000" min="0" max="65535" />     
   <binaryOption name="tpm_sc_cpwms" 
      description="Center-Aligned PWM Select"
      toolTip="Selects CPWM mode\n
         This mode configures the TPM to operate in Up-Down Counting mode">
      <choice value="0" name="Left-aligned (count up)" />
      <choice value="1" name="Centre-aligned (count up-down)" />
   </binaryOption>
   <binaryOption name="tpm_sc_toie" description="Timer Overflow Interrupt Enable"
      toolTip="Enables TPM overflow interrupts.">
      <choice value="0" name="Disabled" />
      <choice value="1" name="Enabled" />
   </binaryOption>
   <template><![CDATA[
      \t//! Timer external input frequency \n
      \tstatic constexpr uint32_t tpmExternalClock =  $(tpmExternalClock);\n\n
      
      \t//! Default Timer Period\n
      \tstatic constexpr uint32_t period = $(period);\n\n

      \t//! Default value for SC register\n
      \tstatic constexpr uint32_t sc  = 
      \t    TPM_SC_CPWMS($(tpm_sc_cpwms))|  // Centre-Aligned PWM Select
      \t    TPM_SC_CMOD($(tpm_sc_cmod)) |  // Clock Mode Selection
      \t    TPM_SC_TOIE($(tpm_sc_toie))|   // Timer Overflow Interrupt Enable
      \t    TPM_SC_PS($(tpm_sc_ps));     // Prescale Factor Selection \n\n
   ]]></template>

   <binaryOption name="tpm_combine_comswap0" 
   description="Combine Channel 0 and 1 Swap"
      toolTip="When set in combine mode,\n
         the even channel is used for the input capture and 1st compare,\n
         the odd channel is used for the 2nd compare." >
      <choice value="0" name="Even channel is used for input capture and 1st compare" isDefault="true" />
      <choice value="1" name="Odd channel is used for input capture and 1st compare" />
   </binaryOption>
   <binaryOption name="tpm_combine_combine0" 
   description="Combine Channels 0 and 1"
      toolTip="Enables the combine feature for channels 0 and 1.\n
         In input capture mode, the combined channels use the even channel input. \n
         In software compare modes, the even channel match asserts the output trigger and \n
         the odd channel match negates the output trigger.\n
         In PWM modes, the even channel match is used for the 1st compare and odd channel match for the 2nd compare" >
      <choice value="0" name="Channels 0 and 1 are independent" isDefault="true" />
      <choice value="1" name="Channels 0 and 1 are combined" />
   </binaryOption>
   <template><![CDATA[
      \t//! Default value for COMBINE register\n
      \tstatic constexpr uint32_t combine  = 
      \t    TPM_COMBINE_COMSWAP0($(tpm_combine_comswap0)) | // Combine Channel 0 and 1 Swap
      \t    TPM_COMBINE_COMBINE0($(tpm_combine_combine0));  // Combine Channels 0 and 1\n\n
   ]]></template>

   <binaryOption name="tpm_pol_pol0" 
      description="Channel 0 Polarity" >
      <choice value="0" name="The channel polarity is active high" isDefault="true" />
      <choice value="1" name="The channel polarity is active low" />
   </binaryOption>
   <binaryOption name="tpm_pol_pol1" 
      description="Channel 1 Polarity" >
      <choice value="0" name="The channel polarity is active high" isDefault="true" />
      <choice value="1" name="The channel polarity is active low" />
   </binaryOption>
   <template><![CDATA[
      \t//! Default value for POL register\n
      \tstatic constexpr uint32_t polarity  = 
      \t    TPM_POL_POL1($(tpm_pol_pol1)) | // Channel 1 Polarity
      \t    TPM_POL_POL0($(tpm_pol_pol0));  // Channel 0 Polarity\n\n
   ]]></template>

   <intOption name="tpm_filter_ch0val"  description="Channel 0 Filter Value" 
      toolTip="Filter/delay is (4 * CHxFVAL) clock cycles, 0 disables"
      min="0" max="15" value="0" />
   <intOption name="tpm_filter_ch1val"  description="Channel 1 Filter Value" 
      toolTip="Filter/delay is (4 * CHxFVAL) clock cycles, 0 disables"
      min="0" max="15" value="0" />
   <template><![CDATA[
      \t//! Default value for FILTER register\n
      \tstatic constexpr uint32_t filter  = 
      \t    TPM_FILTER_CH1FVAL($(tpm_filter_ch1val)) | // Channel 1 Filter Value
      \t    TPM_FILTER_CH0FVAL($(tpm_filter_ch0val));  // Channel 0 Filter Value\n\n
   ]]></template>

   <category name="Advanced" description="Advanced options">
      <aliasOption key="/SIM/sim_sopt4_tpm$(_instance)clksel" optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_tpm$(_instance)ch0src" optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt9_tpm$(_instance)clksel" optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt9_tpm$(_instance)ch0src" optional="true" constant="false" />
   </category>

   <xi:include href="_irqOption.xml"/>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.TpmValidate">
   </validate>

   <projectActionList id = "tpm_files" >
      <copy source="Project_Headers/tpm.h"         target="Project_Headers/tpm.h"          replace="true" derived="true" />
      <copy source="Snippets/tpm-pwm-example.cpp"  target="Snippets/tpm-pwm-example.cpp"   replace="true" derived="true"/>
   </projectActionList>
         
   <template><![CDATA[
      \tstatic constexpr uint32_t minimumResolution=$(minimumResolution);\n\n
      
      \t/**
      \t * Get input clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getInputClockFrequency() {
      \t
      \t   switch(tpm->SC&TPM_SC_CMOD_MASK) {
      \t   default:
      \t   case TPM_SC_CMOD(0): return 0;
      \t   case TPM_SC_CMOD(1): return SimInfo::getTpmClock();
      \t   case TPM_SC_CMOD(2): return tpmExternalClock;
      \t   case TPM_SC_CMOD(3): return 0;
      \t   }
      \t}\n\n
      
      \t/**
      \t * Get clock frequency
      \t *
      \t * @return Frequency as a float in Hz
      \t */
      \tstatic float getClockFrequencyF() {
      \t
      \t   float freq = getInputClockFrequency();
      \t   return freq/(1<<((tpm->SC&TPM_SC_PS_MASK)>>TPM_SC_PS_SHIFT));
      \t}\n\n
      
      \t/**
      \t * Get clock frequency
      \t *
      \t * @return Frequency as a uint32_t in Hz (may underflow)
      \t */
      \tstatic uint32_t getClockFrequency() {
      \t
      \t   uint32_t freq = getInputClockFrequency();
      \t   return freq/(1<<((tpm->SC&TPM_SC_PS_MASK)>>TPM_SC_PS_SHIFT));
      \t}\n\n
   ]]></template>

   <signals/>
   <signals name="TPM"/>
</devicePage>
