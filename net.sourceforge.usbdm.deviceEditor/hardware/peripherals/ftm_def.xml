<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root SYSTEM "_menu.dtd" >
<!-- ftm_2ch_def.xml -->

<devicePage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Flex timer">

   <intOption name="ftmExternalClock" description="FTM External clock"
      toolTip="Clock frequency of external clock supplied to FTM_CLKIN pin"
      value="0" />
      
   <floatOption name="clockFrequency" 
      constant="true"
      description="Frequency of timer clock"
      toolTip="Determined from timer clock source and prescaler"
      units="Hz"/>
    
   <floatOption name="clockPeriod" 
      constant="true"
      description="Period of timer clock"
      toolTip="Determined from timer clock source and prescaler"
      units="s"/>
    
   <choiceOption name="ftm_sc_clks" description="Clock Source"
      toolTip="Selects the clock source for the module">
      <choice value="0" name="Disabled" />
      <choice value="1" name="System clock" isDefault="true" />
      <choice value="2" name="Fixed frequency clock" />
      <choice value="3" name="External clock" />
   </choiceOption>

   <choiceOption name="ftm_sc_ps" description="Clock prescaler"
      toolTip="Selects the prescaler for the module">
      <choice value="0" name="Divide by 1" />
      <choice value="1" name="Divide by 2" />
      <choice value="2" name="Divide by 4" />
      <choice value="3" name="Divide by 8" />
      <choice value="4" name="Divide by 16" />
      <choice value="5" name="Divide by 32" />
      <choice value="6" name="Divide by 64" />
      <choice value="7" name="Divide by 128" />
   </choiceOption>

   <binaryOption name="ftm_sc_cpwms" description="Center-Aligned PWM Select"
      toolTip="Selects CPWM mode\nThis mode configures the FTM to operate in Up-Down Counting mode.">
      <choice value="0" name="Left-aligned (count up)" />
      <choice value="1" name="Centre-aligned (count up-down)" />
   </binaryOption>

   <binaryOption name="ftm_sc_toie" description="Timer Overflow Interrupt Enable"
      toolTip="Enables FTM overflow interrupts.">
      <choice value="0" name="Disabled" />
      <choice value="1" name="Enabled" />
   </binaryOption>

   <menu name="Advanced" description="Advanced options">
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)clksel"  constant="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt0"    constant="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt1"    constant="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt2"    constant="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt3"    constant="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)trg0src" constant="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)trg1src" constant="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)ch0src" constant="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)ch1src" constant="false" optional="true" />
   
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och7src" constant="false" optional="true"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och6src" constant="false" optional="true"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och5src" constant="false" optional="true"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och4src" constant="false" optional="true"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och3src" constant="false" optional="true"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och2src" constant="false" optional="true"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och1src" constant="false" optional="true"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och0src" constant="false" optional="true"/>
   </menu>
   <intOption name="period" description="Period of timer"
      toolTip="Default period of the timer"
      value="10000" min="0" max="65535" />
      
   <xi:include href="_irqOption.xml"/>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.FtmValidate">
   </validate>

   <projectActionList id = "ftm_2ch_def" >
      <copy source="Project_Headers/ftm.h"         target="Project_Headers/ftm.h"         replace="true" derived="true" />
      <copy source="Snippets/ftm-pwm-example.cpp"  target="Snippets/ftm-pwm-example.cpp"  replace="true" derived="true" />
   </projectActionList>
         
   <template>
      \t//! Default Timer Period\n
      \tstatic constexpr uint32_t ftmExternalClock =  $(ftmExternalClock);\n\n
      
      \t/**
      \t * Gets clock frequency of FTM
      \t *
      \t * @return Frequency as a float in Hz
      \t */
      \tstatic float getClockFrequencyF() {
      \t   /** Pointer to hardware */
      \t   static constexpr volatile FTM_Type *ftm = reinterpret_cast&lt;volatile FTM_Type *&gt;(basePtr);
      \t
      \t   float freq;
      \t   switch(ftm-&gt;SC&amp;FTM_SC_CLKS_MASK) {
      \t   default:
      \t   case FTM_SC_CLKS(0): freq = 0;                break;
      \t   case FTM_SC_CLKS(1): freq = SystemBusClock;   break;
      \t   case FTM_SC_CLKS(2): freq = SystemMcgffClock; break;
      \t   case FTM_SC_CLKS(3): freq = ftmExternalClock; break;
      \t   }
      \t   return freq/(1UL&lt;&lt;(long)((ftm-&gt;SC&amp;FTM_SC_PS_MASK)&gt;&gt;FTM_SC_PS_SHIFT));
      
      \t}\n\n
      
      \t/**
      \t * Gets clock frequency of FTM
      \t *
      \t * @return Frequency as a uint32_t in Hz (may underflow)
      \t */
      \tstatic uint32_t getClockFrequency() {
      \t   /** Pointer to hardware */
      \t   static constexpr volatile FTM_Type *ftm = reinterpret_cast&lt;volatile FTM_Type *&gt;(basePtr);
      \t
      \t   uint32_t freq;
      \t   switch(ftm-&gt;SC&amp;FTM_SC_CLKS_MASK) {
      \t   default:
      \t   case FTM_SC_CLKS(0): freq = 0;    break;
      \t   case FTM_SC_CLKS(1): freq = SystemBusClock;   break;
      \t   case FTM_SC_CLKS(2): freq = SystemMcgffClock; break;
      \t   case FTM_SC_CLKS(3): freq = ftmExternalClock; break;
      \t   }
      \t   return freq/(1UL&lt;&lt;(long)((ftm-&gt;SC&amp;FTM_SC_PS_MASK)&gt;&gt;FTM_SC_PS_SHIFT));
      \t}\n\n

      \t//! Default value for SC register\n
      \tstatic constexpr uint32_t sc  = 
      \t    FTM_SC_CPWMS($(ftm_sc_cpwms))|
      \t    FTM_SC_TOIE($(ftm_sc_toie))|
      \t    FTM_SC_CLKS($(ftm_sc_clks))|
      \t    FTM_SC_PS($(ftm_sc_ps));\n\n
      
      \t//! Default Timer Period\n
      \tstatic constexpr uint32_t period =  $(period);\n\n
   </template>

   <pins/>
</devicePage>
