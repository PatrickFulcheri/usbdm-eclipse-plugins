<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root SYSTEM "_menu.dtd" >
<!-- osc0_div.xml -->
<devicePage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Oscillator">

   <intOption name="osc_input_freq"
      units="Hz"
      description="Frequency of External Crystal or Clock"
      toolTip="Frequency of external crystal or clock on XTAL/EXTAL"
      value="8000000" />

   <binaryOption name="erefs0"
      description="External Reference Select" 
      toolTip="Determines whether a clock or crystal is used for the external reference clock" >
      <choice value="0" name="External clock" />
      <choice value="1" name="Oscillator" isDefault="true" />
   </binaryOption>

   <binaryOption name="osc_cr_erclken"
      description="External Reference Enable"
      toolTip="Enables and makes available the clock as OSCERCLK peripheral clock source\n
      The oscillator will also be enabled if used by MCG">
      <choice value="0" name="Disabled" />
      <choice value="1" name="Enabled" isDefault="true" />
   </binaryOption>
   
   <intOption name="oscclk_clock"
      constant="true"
      units="Hz"
      description="Frequency of OSC Clock or Crystal [OSCCLK]"
      toolTip="Frequency of external crystal or clock on XTAL/EXTAL"
      value="8000000" />

   <choiceOption name="range_out"
      constant="true"
      description="Frequency Range Select"
      toolTip="This range value is determined from the Oscillator frequency.\n
      It some cases it will be unused and a range value suited to the FLL is used instead.">
      <choice value="0" name="Low range" />
      <choice value="1" name="High range" />
      <choice value="2" name="Very High range" />
      <choice value="0" name="Unconstrained by Oscillator" />
   </choiceOption>

   <choiceOption name="range"
      constant="true"
      description="Frequency Range Select"
      toolTip="Selects the frequency range for the crystal oscillator\n
         and/or divider for FLL input clock">
      <choice value="0" name="Low range" />
      <choice value="1" name="High range" />
      <choice value="2" name="Very High range" />
      <choice value="0" name="Unused" />
   </choiceOption>

   <binaryOption name="hgo0"
      description="Oscillator Gain" 
      toolTip="Controls the crystal oscillator mode of operation">
      <choice value="0" name="Low power" isDefault="true"/>
      <choice value="1" name="High gain" />
   </binaryOption>
   
   <choiceOption name="osc_cr_scp"
      description="Oscillator load capacitance"
      toolTip="Configures the oscillator load capacitance" >
      <choice value="0"  name="0 pF" />
      <choice value="8"  name="2 pF" />
      <choice value="4"  name="4 pF" />
      <choice value="12" name="6 pF" />
      <choice value="2"  name="8 pF" isDefault="true" />
      <choice value="10" name="10 pF" />
      <choice value="6"  name="12 pF" />
      <choice value="14" name="14 pF" />
      <choice value="1"  name="16 pF" />
      <choice value="9"  name="18 pF" />
      <choice value="5"  name="20 pF" />
      <choice value="13" name="22 pF" />
      <choice value="3"  name="24 pF" />
      <choice value="11" name="26 pF" />
      <choice value="7"  name="28 pF" />
      <choice value="15" name="30 pF" />
   </choiceOption>

   <binaryOption name="osc_cr_erefsten"
      description="External Reference Stop Enable"
      toolTip="Determines if external reference clock is enabled in Stop mode" >
      <choice value="0" name="Disabled in Stop mode" />
      <choice value="1" name="Enabled in Stop mode" />
   </binaryOption>
   
   <intOption name="system_oscerclk_undiv_clock"  key="/OSC0/system_oscerclk_undiv_clock"
      units="Hz"
      description="Oscillator clock to some peripherals [OSCERCLK_UNDIV]"
      toolTip="Generated from OSCCLK without division"
      value="8000000"  
      constant="true" />

   <choiceOption name="osc_div_erps"   key="/OSC0/osc_div_erps"
      description="ERCLK prescaler"
      toolTip="Divides down the ERCLK output" >
      <choice value="0"  name="Divide by 1" isDefault="true" />
      <choice value="1"  name="Divide by 2" />
      <choice value="2"  name="Divide by 4" />
      <choice value="3"  name="Divide by 8" />
   </choiceOption>
 
   <intOption name="system_oscerclk_clock"
         units="Hz"
         description="Oscillator clock to peripherals [OSCERCLK]"
         toolTip="Generated from OSCCLK"
         value="8000000"  
         constant="true" />

   <intOption name="osc32kclk_clock"
         units="Hz"
         description="Oscillator low range 32K clock [OSC32KCLK]"
         toolTip="Generated from OSCCLK. May be used as ERCLK32K"
         value="8000000"  
         constant="true" />

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.OscValidate">
   </validate>

   <projectActionList id = "osc_files" >
      <copy source="Project_Headers/osc.h"  target="Project_Headers/osc.h"  replace="true"  derived="true" />
   </projectActionList>
         
   <template><![CDATA[
      \t//! Frequency of OSC Clock or Crystal\n
      \tstatic constexpr uint32_t oscclk_clock = $(oscclk_clock)UL;\n\n
      
      \t//! Frequency of 32K OSC Clock or Crystal (if applicable)
      \tstatic constexpr uint32_t osc32kclk_clock = $(osc32kclk_clock)UL;\n\n
      
      \t//! Oscillator control register\n
      \tstatic constexpr uint32_t cr =
      \t   OSC_CR_ERCLKEN($(osc_cr_erclken))  | // External Reference Enable
      \t   OSC_CR_EREFSTEN($(osc_cr_erefsten)) | // External Reference Stop Enable
      \t   OSC_CR_SCP($(osc_cr_scp));       // Oscillator load capacitance\n\n 

      \t//! OSC Clock divider register\n
      \tstatic constexpr uint32_t div =
      \t   OSC_DIV_ERPS($(osc_div_erps));   // ERCLK prescaler\n\n
      
      \t/**
      \t * Get OSC clock (internal, assumed available)
      \t *
      \t * @return Clock frequency as uint32_t in Hz
      \t */
      \tstatic constexpr uint32_t getInternalClock() {
      \t   return oscclk_clock;
      \t}\n\n
      
      \t/**
      \t * Get OSCERCLK clock (external, masked by OSC_CR_ERCLKEN)
      \t *
      \t * @return Clock frequency as uint32_t in Hz
      \t */
      \tstatic uint32_t getOscerClk() {
      \t   return (osc->CR&OSC_CR_ERCLKEN_MASK)?
      \t      (getInternalClock()//(1<<((osc->DIV&OSC_DIV_ERPS_MASK)>>OSC_DIV_ERPS_SHIFT))):
      \t      0;
      \t}\n\n
      
      \t/**
      \t * Get OSC32KCLK clock
      \t *
      \t * @return Clock frequency as uint32_t in Hz
      \t */
      \tstatic uint32_t getOsc32kClock() {
      \t   return osc32kclk_clock;
      \t}\n\n
   ]]></template>

   <pins />
</devicePage>
