/**
 * @file      pin_mapping.h (derived from MK66F18.usbdmHardware)
 * @version   1.2.0
 * @brief     Pin declarations for FRDM_K66F
 *
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#ifndef PROJECT_HEADERS_PIN_MAPPING_H
#define PROJECT_HEADERS_PIN_MAPPING_H

#include <stddef.h>
#include "derivative.h"

#include "pcr.h"

/*
 * Common Mux settings for PCR
 */
#undef FIXED_ADC_FN            
#undef FIXED_GPIO_FN           
#undef FIXED_PORT_CLOCK_REG    
#define FIXED_ADC_FN             0                    // Fixed ADC Multiplexing value
#define FIXED_GPIO_FN            1                    // Fixed GPIO Multiplexing value
#define FIXED_PORT_CLOCK_REG     SCGC5                // Fixed PORT Clock

/*
 * Peripheral clock macros
 */
#define PORT_CLOCK_REG       SCGC5

namespace USBDM {

/** Class to static check signal mapping is valid */
template<class Info, int signalNum> class CheckSignal {
#ifdef DEBUG_BUILD
   static_assert((signalNum<Info::NUM_SIGNALS), "Non-existent signal - Modify Configure.usbdm");
   static_assert((signalNum>=Info::NUM_SIGNALS)||(Info::info[signalNum].gpioBit != UNMAPPED_PCR), "Signal is not mapped to a pin - Modify Configure.usbdm");
   static_assert((signalNum>=Info::NUM_SIGNALS)||(Info::info[signalNum].gpioBit != INVALID_PCR),  "Signal doesn't exist in this device/package");
   static_assert((signalNum>=Info::NUM_SIGNALS)||((Info::info[signalNum].gpioBit == UNMAPPED_PCR)||(Info::info[signalNum].gpioBit == INVALID_PCR)||(Info::info[signalNum].gpioBit >= 0)), "Illegal signal");
#endif
};

/*
 * Peripheral Information Classes
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Pins used for Analogue Input
 * @{
 */
#define USBDM_ADC0_IS_DEFINED 
/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ADC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_ADC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC0_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Indicates interrupt handler has been installed
   static constexpr bool irqHandlerInstalled = false;

   //! Default value for ADCx_CFG1 register
   static constexpr uint32_t CFG1  = 
       (0<<ADC_CFG1_ADICLK_SHIFT)|
       (2<<ADC_CFG1_MODE_SHIFT)|
       (0<<ADC_CFG1_ADLSMP_SHIFT)|
       (0<<ADC_CFG1_ADIV_SHIFT)|
       (0<<ADC_CFG1_ADLPC_SHIFT);

   //! Default value for ADCx_CFG2 register
    static constexpr uint32_t CFG2  = 
        ADC_CFG2_MUXSEL_MASK | // Choose 'b' channels
       (0<<ADC_CFG2_ADLSTS_SHIFT)|
       (0<<ADC_CFG2_ADHSC_SHIFT)|
       (0<<ADC_CFG2_ADACKEN_SHIFT);

   static constexpr uint32_t SC2  =
       (0<<ADC_SC2_REFSEL_SHIFT)|
       (0<<ADC_SC2_DMAEN_SHIFT)|
       (0b000<<ADC_SC2_ACREN_SHIFT)|
       (0<<ADC_SC2_ADTRG_SHIFT);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 24;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   3: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   4: ADC0_SE4b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: ADC0_SE5b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: ADC0_SE6b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: ADC0_SE7b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: ADC0_SE8             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: ADC0_SE9             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: ADC0_SE10            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: ADC0_SE11            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: ADC0_SE12            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: ADC0_SE13            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: ADC0_SE14            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: ADC0_SE15            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: ADC0_SE16            = ADC0_SE16                      */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  17: ADC0_SE17            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  18: ADC0_SE18            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  19: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  20: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  21: ADC0_SE21            = ADC0_SE16                      */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  22: ADC0_SE22            = ADC1_SE16                      */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  23: ADC0_SE23            = DAC0_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoDP {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   1: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   3: ADC0_DP3             = ADC1_DP0                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoDM {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC0_DM0             = ADC0_DM0                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /*   1: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   3: ADC0_DM3             = ADC1_DM0                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_ADC1_IS_DEFINED 
/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ADC1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC3_ADC1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC3);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC0_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Indicates interrupt handler has been installed
   static constexpr bool irqHandlerInstalled = false;

   //! Default value for ADCx_CFG1 register
   static constexpr uint32_t CFG1  = 
       (0<<ADC_CFG1_ADICLK_SHIFT)|
       (2<<ADC_CFG1_MODE_SHIFT)|
       (0<<ADC_CFG1_ADLSMP_SHIFT)|
       (0<<ADC_CFG1_ADIV_SHIFT)|
       (0<<ADC_CFG1_ADLPC_SHIFT);

   //! Default value for ADCx_CFG2 register
    static constexpr uint32_t CFG2  = 
        ADC_CFG2_MUXSEL_MASK | // Choose 'b' channels
       (0<<ADC_CFG2_ADLSTS_SHIFT)|
       (0<<ADC_CFG2_ADHSC_SHIFT)|
       (0<<ADC_CFG2_ADACKEN_SHIFT);

   static constexpr uint32_t SC2  =
       (0<<ADC_SC2_REFSEL_SHIFT)|
       (0<<ADC_SC2_DMAEN_SHIFT)|
       (0b000<<ADC_SC2_ACREN_SHIFT)|
       (0<<ADC_SC2_ADTRG_SHIFT);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 40;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   3: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   4: ADC1_SE4b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: ADC1_SE5b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: ADC1_SE6b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: ADC1_SE7b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: ADC1_SE8             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: ADC1_SE9             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: ADC1_SE10            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: ADC1_SE11            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: ADC1_SE12            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: ADC1_SE13            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: ADC1_SE14            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: ADC1_SE15            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: ADC1_SE16            = ADC1_SE16                      */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  17: ADC1_SE17            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  18: ADC1_SE18            = VREF_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  19: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  20: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  21: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  22: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  23: ADC1_SE23            = DAC1_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  24: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  25: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  26: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  27: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  28: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  29: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  30: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  31: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  32: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  33: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  34: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  35: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  36: ADC1_SE4a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  37: ADC1_SE5a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  38: ADC1_SE6a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  39: ADC1_SE7a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoDP {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 1;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC1_DP0             = ADC1_DP0                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoDM {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC1_DM0             = ADC1_DM0                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /*   1: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   3: ADC1_DM3             = ADC0_DM0                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

/** 
 * End ADC_Group
 * @}
 */
/**
 * @addtogroup CAN_Group CAN, Controller Area Network
 * @brief Pins used for Controller Area Network
 * @{
 */
#define USBDM_CAN0_IS_DEFINED 
/**
 * Peripheral information for CAN, Controller Area Network
 */
class Can0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CAN0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FLEXCAN0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: CAN0_RX              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: CAN0_TX              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_CAN1_IS_DEFINED 
/**
 * Peripheral information for CAN, Controller Area Network
 */
class Can1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CAN1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC3_FLEXCAN1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC3);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: CAN1_RX              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: CAN1_TX              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End CAN_Group
 * @}
 */
/**
 * @addtogroup CMP_Group CMP, Analogue Comparator
 * @brief Pins used for Analogue Comparator
 * @{
 */
#define USBDM_CMP0_IS_DEFINED 
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {CMP0_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: CMP0_IN0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: CMP0_IN1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: CMP0_IN2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: CMP0_IN3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: CMP0_IN4             = DAC1_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   5: CMP0_IN5             = VREF_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   6: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   8: CMP0_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_CMP1_IS_DEFINED 
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: CMP1_IN0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: CMP1_IN1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: CMP1_IN2             = ADC0_SE16                      */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   3: CMP1_IN3             = DAC0_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   4: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   5: CMP1_IN5             = VREF_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   6: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   8: CMP1_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_CMP2_IS_DEFINED 
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: CMP2_IN0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: CMP2_IN1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: CMP2_IN2             = ADC1_SE16                      */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   3: CMP2_IN3             = DAC1_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   4: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   5: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   6: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   8: CMP2_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_CMP3_IS_DEFINED 
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp3Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP3_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: CMP3_IN1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: CMP3_IN2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   4: CMP3_IN4             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: CMP3_IN5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   8: CMP3_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End CMP_Group
 * @}
 */
/**
 * @addtogroup CMT_Group CMT, Carrier Modulator Transmitter
 * @brief Pins used for Carrier Modulator Transmitter
 * @{
 */
#define USBDM_CMT_IS_DEFINED 
/**
 * Peripheral information for CMT, Carrier Modulator Transmitter
 */
class CmtInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMT_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMT_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: CMT_IRO              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End CMT_Group
 * @}
 */
/**
 * @addtogroup Control_Group CONTROL, Control
 * @brief Pins used for Control
 * @{
 */
#define USBDM_CONTROL_IS_DEFINED 
/**
 * Peripheral information for CONTROL, Control
 */
class ControlInfo {
public:
   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 16;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: RESET_b              = RESET_b                        */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   1: JTAG_TCLK            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SWD_CLK              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: JTAG_TDI             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: JTAG_TDO             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: TRACE_SWO            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: JTAG_TMS             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: SWD_DIO              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: NMI_b                = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: JTAG_TRST_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: CLKOUT               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: TRACE_CLKOUT         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: TRACE_D3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: TRACE_D2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: TRACE_D1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: TRACE_D0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End Control_Group
 * @}
 */
/**
 * @addtogroup CRC_TODO_Group CRC, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_CRC_IS_DEFINED 
/**
 * Peripheral information for CRC, (Incomplete)
 */
class CrcInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CRC_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_CRC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

};

/** 
 * End CRC_TODO_Group
 * @}
 */
/**
 * @addtogroup DAC_Group DAC, Digital-to-Analogue Converter
 * @brief Pins used for Digital-to-Analogue Converter
 * @{
 */
#define USBDM_DAC0_IS_DEFINED 
/**
 * Peripheral information for DAC, Digital-to-Analogue Converter
 */
class Dac0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DAC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DAC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {DAC0_IRQn, DAC0_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: DAC0_OUT             = DAC0_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_DAC1_IS_DEFINED 
/**
 * Peripheral information for DAC, Digital-to-Analogue Converter
 */
class Dac1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DAC1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC2_DAC1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC2);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {DAC1_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: DAC1_OUT             = DAC1_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End DAC_Group
 * @}
 */
/**
 * @addtogroup DMA_TODO_Group DMA, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_DMA0_IS_DEFINED 
/**
 * Peripheral information for DMA, (Incomplete)
 */
class Dma0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMA0_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_DMA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

};

/** 
 * End DMA_TODO_Group
 * @}
 */
/**
 * @addtogroup DMAMUX_Group DMAMUX, Direct Memory Access (DMA)
 * @brief Pins used for Direct Memory Access (DMA)
 * @{
 */
#define USBDM_DMAMUX0_IS_DEFINED 
/**
 * Peripheral information for DMAMUX, Direct Memory Access (DMA)
 */
class Dmamux0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMAMUX0_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DMAMUX0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   /* DMA channel numbers */
   enum DmaChannels {
      DMA0_SLOT_Disabled                            = 0,
      DMA0_SLOT_TSI0                                = 1,
      DMA0_SLOT_UART0_Receive                       = 2,
      DMA0_SLOT_UART0_Transmit                      = 3,
      DMA0_SLOT_UART1_Receive                       = 4,
      DMA0_SLOT_UART1_Transmit                      = 5,
      DMA0_SLOT_UART2_Receive                       = 6,
      DMA0_SLOT_UART2_Transmit                      = 7,
      DMA0_SLOT_UART3_Receive                       = 8,
      DMA0_SLOT_UART3_Transmit                      = 9,
      DMA0_SLOT_UART4_TransmitReceive               = 10,
      DMA0_SLOT_I2S0_Receive                        = 12,
      DMA0_SLOT_I2S0_Transmit                       = 13,
      DMA0_SLOT_SPI0_Receive                        = 14,
      DMA0_SLOT_SPI0_Transmit                       = 15,
      DMA0_SLOT_SPI1_TransmitReceive                = 16,
      DMA0_SLOT_SPI2_TransmitReceive                = 17,
      DMA0_SLOT_I2C0_I2C3                           = 18,
      DMA0_SLOT_I2C1_I2C2                           = 19,
      DMA0_SLOT_FTM0_Ch_0                           = 20,
      DMA0_SLOT_FTM0_Ch_1                           = 21,
      DMA0_SLOT_FTM0_Ch_2                           = 22,
      DMA0_SLOT_FTM0_Ch_3                           = 23,
      DMA0_SLOT_FTM0_Ch_4                           = 24,
      DMA0_SLOT_FTM0_Ch_5                           = 25,
      DMA0_SLOT_FTM0_Ch_6                           = 26,
      DMA0_SLOT_FTM0_Ch_7                           = 27,
      DMA0_SLOT_FTM1_Ch_0                           = 28,
      DMA0_SLOT_TPM1_Ch_0                           = 28,
      DMA0_SLOT_FTM1_Ch_1                           = 29,
      DMA0_SLOT_TPM1_Ch_1                           = 29,
      DMA0_SLOT_FTM2_Ch_0                           = 30,
      DMA0_SLOT_TPM2_Ch_0                           = 30,
      DMA0_SLOT_FTM2_Ch_1                           = 31,
      DMA0_SLOT_TPM2_Ch_1                           = 31,
      DMA0_SLOT_FTM3_Ch_0                           = 32,
      DMA0_SLOT_FTM3_Ch_1                           = 33,
      DMA0_SLOT_FTM3_Ch_2                           = 34,
      DMA0_SLOT_FTM3_Ch_3                           = 35,
      DMA0_SLOT_FTM3_Ch_4                           = 36,
      DMA0_SLOT_FTM3_Ch_5                           = 37,
      DMA0_SLOT_FTM3_Ch_6                           = 38,
      DMA0_SLOT_SPI2_Rx                             = 38,
      DMA0_SLOT_FTM3_Ch_7                           = 39,
      DMA0_SLOT_SPI2_Tx                             = 39,
      DMA0_SLOT_ADC0                                = 40,
      DMA0_SLOT_ADC1                                = 41,
      DMA0_SLOT_CMP0                                = 42,
      DMA0_SLOT_CMP1                                = 43,
      DMA0_SLOT_CMP2                                = 44,
      DMA0_SLOT_CMP3                                = 44,
      DMA0_SLOT_DAC0                                = 45,
      DMA0_SLOT_DAC1                                = 46,
      DMA0_SLOT_CMT                                 = 47,
      DMA0_SLOT_PDB                                 = 48,
      DMA0_SLOT_PortA                               = 49,
      DMA0_SLOT_PortB                               = 50,
      DMA0_SLOT_PortC                               = 51,
      DMA0_SLOT_PortD                               = 52,
      DMA0_SLOT_PortE                               = 53,
      DMA0_SLOT_IEEE1588_Timer0                     = 54,
      DMA0_SLOT_IEEE1588_Timer1                     = 55,
      DMA0_SLOT_IEEE1588_Timer2                     = 56,
      DMA0_SLOT_IEEE1588_Timer3                     = 57,
      DMA0_SLOT_LPUART0_Rx                          = 58,
      DMA0_SLOT_LPUART0_Tx                          = 59,
      DMA0_SLOT_AlwaysEnabled2                      = 60,
      DMA0_SLOT_AlwaysEnabled3                      = 61,
      DMA0_SLOT_AlwaysEnabled4                      = 62,
      DMA0_SLOT_AlwaysEnabled5                      = 63,
   };
};

/** 
 * End DMAMUX_Group
 * @}
 */
/**
 * @addtogroup ENET_Group ENET, 10/100-Mbps Ethernet MAC
 * @brief Pins used for 10/100-Mbps Ethernet MAC
 * @{
 */
#define USBDM_ENET_IS_DEFINED 
/**
 * Peripheral information for ENET, 10/100-Mbps Ethernet MAC
 */
class EnetInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ENET_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC2_ENET_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC2);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 4;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ENET_Transmit_IRQn, ENET_Receive_IRQn, ENET_Error_IRQn, ENET_1588Timeout_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 36;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: MII0_RXD0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: MII0_RXD1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: MII0_RXD2            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: MII0_RXD3            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: MII0_TXD0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: MII0_TXD1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: MII0_TXD2            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: MII0_TXD3            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: RMII0_RXD0           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: RMII0_RXD1           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  11: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  12: RMII0_TXD0           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: RMII0_TXD1           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  15: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  16: ENET0_1588_TMR0      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  17: ENET0_1588_TMR1      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  18: ENET0_1588_TMR2      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  19: ENET0_1588_TMR3      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  20: ENET_1588_CLKIN      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  21: MII0_COL             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  22: MII0_CRS             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  23: MII0_MDC             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  24: MII0_MDIO            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  25: MII0_RXCLK           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  26: MII0_RXDV            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  27: MII0_RXER            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  28: MII0_TXCLK           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  29: MII0_TXEN            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  30: MII0_TXER            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  31: RMII0_CRS_DV         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  32: RMII0_MDC            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  33: RMII0_MDIO           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  34: RMII0_RXER           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  35: RMII0_TXEN           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End ENET_Group
 * @}
 */
/**
 * @addtogroup EWM_Group EWM, External Watchdog Monitor
 * @brief Pins used for External Watchdog Monitor
 * @{
 */
#define USBDM_EWM_IS_DEFINED 
/**
 * Peripheral information for EWM, External Watchdog Monitor
 */
class EwmInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = EWM_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_EWM_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: EWM_IN               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: EWM_OUT_b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End EWM_Group
 * @}
 */
/**
 * @addtogroup FB_Group FB, Flexbus
 * @brief Pins used for Flexbus
 * @{
 */
#define USBDM_FB_IS_DEFINED  
/**
 * Peripheral information for FB, Flexbus
 */
class FbInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FB_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_FB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 82;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FB_CS0_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FB_CS1_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: FB_CS2_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: FB_CS3_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: FB_CS4_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: FB_CS5_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: FB_AD0               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: FB_AD1               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: FB_AD2               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: FB_AD3               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: FB_AD4               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: FB_AD5               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: FB_AD6               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: FB_AD7               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: FB_AD8               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: FB_AD9               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: FB_AD10              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  17: FB_AD11              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  18: FB_AD12              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  19: FB_AD13              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  20: FB_AD14              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  21: FB_AD15              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  22: FB_AD16              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  23: FB_AD17              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  24: FB_AD18              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  25: FB_AD19              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  26: FB_AD20              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  27: FB_AD21              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  28: FB_AD22              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  29: FB_AD23              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  30: FB_AD24              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  31: FB_AD25              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  32: FB_AD26              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  33: FB_AD27              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  34: FB_AD28              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  35: FB_AD29              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  36: FB_AD30              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  37: FB_AD31              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  38: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  39: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  40: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  41: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  42: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  43: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  44: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  45: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  46: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  47: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  48: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  49: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  50: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  51: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  52: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  53: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  54: FB_A16               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  55: FB_A17               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  56: FB_A18               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  57: FB_A19               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  58: FB_A20               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  59: FB_A21               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  60: FB_A22               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  61: FB_A23               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  62: FB_A24               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  63: FB_A25               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  64: FB_A26               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  65: FB_A27               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  66: FB_A28               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  67: FB_A29               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  68: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  69: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  70: FB_TSIZ0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  71: FB_TSIZ1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  72: FB_ALE               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  73: FB_OE_b              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  74: FB_RW_b              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  75: FB_TA_b              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  76: FB_TBST_b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  77: FB_TS_b              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  78: FB_BE7_0_BLS31_24_b  = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  79: FB_BE15_8_BLS23_16_b = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  80: FB_BE23_16_BLS15_8_b = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  81: FB_BE31_24_BLS7_0_b  = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End FB_Group
 * @}
 */
/**
 * @addtogroup FTFE_TODO_Group FTFE, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_FTFE_IS_DEFINED 
/**
 * Peripheral information for FTFE, (Incomplete)
 */
class FtfeInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTFE_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTF_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

};

/** 
 * End FTFE_TODO_Group
 * @}
 */
/**
 * @addtogroup FTM_Misc_Group FTM, Shared
 * @brief Pins used for Shared
 * @{
 */
#define USBDM_FTM_IS_DEFINED 
/**
 * Peripheral information for FTM, Shared
 */
class FtmInfo {
public:
   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM_CLKIN0           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM_CLKIN1           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End FTM_Misc_Group
 * @}
 */
/**
 * @addtogroup FTM_Group FTM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */
#define USBDM_FTM0_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM0_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default value for SC register
   static constexpr uint32_t SC  = 
       (0<<FTM_SC_CPWMS_SHIFT)|
       ((0|0)<<FTM_SC_TOIE_SHIFT)|
       FTM_SC_CLKS(1)|
       FTM_SC_PS(0);

   //! Default Timer Period
   static constexpr uint32_t PERIOD =  10000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 8;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM0_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM0_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: FTM0_CH2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: FTM0_CH3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: FTM0_CH4             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: FTM0_CH5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: FTM0_CH6             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: FTM0_CH7             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM0_FLT0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: FTM0_FLT1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   2: FTM0_FLT2            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   3: FTM0_FLT3            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_FTM1_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM1_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default value for SC register
   static constexpr uint32_t SC  = 
       (0<<FTM_SC_CPWMS_SHIFT)|
       ((0|0)<<FTM_SC_TOIE_SHIFT)|
       FTM_SC_CLKS(1)|
       FTM_SC_PS(0);

   //! Default Timer Period
   static constexpr uint32_t PERIOD =  10000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM1_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM1_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 1;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM1_FLT0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoQUAD {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 2;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM1_QD_PHA          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: FTM1_QD_PHB          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_FTM2_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM3_IRQn, FTM2_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default value for SC register
   static constexpr uint32_t SC  = 
       (0<<FTM_SC_CPWMS_SHIFT)|
       ((0|0)<<FTM_SC_TOIE_SHIFT)|
       FTM_SC_CLKS(1)|
       FTM_SC_PS(0);

   //! Default Timer Period
   static constexpr uint32_t PERIOD =  10000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM2_CH0             = PTA10 (SW3)                    */  { PORTA_CLOCK_MASK, PORTA_BasePtr,  GPIOA_BasePtr,  10,  PORT_PCR_MUX(3)|pcrValue  },
         /*   1: FTM2_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
      PcrTable_T<Ftm2Info,  0>::setPCR(); // FTM2_CH0        = PTA10 (SW3)                   
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
      PcrTable_T<Ftm2Info,  0>::setPCR(0); // FTM2_CH0        = PTA10 (SW3)                   
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 1;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM2_FLT0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoQUAD {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 2;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM2_QD_PHA          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: FTM2_QD_PHB          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_FTM3_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm3Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM3_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC3_FTM3_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC3);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM3_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default value for SC register
   static constexpr uint32_t SC  = 
       (0<<FTM_SC_CPWMS_SHIFT)|
       ((0|0)<<FTM_SC_TOIE_SHIFT)|
       FTM_SC_CLKS(1)|
       FTM_SC_PS(0);

   //! Default Timer Period
   static constexpr uint32_t PERIOD =  10000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 8;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM3_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM3_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: FTM3_CH2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: FTM3_CH3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: FTM3_CH4             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: FTM3_CH5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: FTM3_CH6             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: FTM3_CH7             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 1;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM3_FLT0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

/** 
 * End FTM_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
#define USBDM_GPIOA_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioAInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTA_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOA_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTA_IRQn};

};

#define USBDM_GPIOB_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioBInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTB_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOB_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTB_IRQn};

};

#define USBDM_GPIOC_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioCInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTC_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOC_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTC_IRQn};

};

#define USBDM_GPIOD_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioDInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTD_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOD_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTD_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTD_IRQn};

};

#define USBDM_GPIOE_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioEInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTE_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOE_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTE_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTE_IRQn};

};

/** 
 * End GPIO_Group
 * @}
 */
/**
 * @addtogroup I2C_Group I2C, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
#define USBDM_I2C0_IS_DEFINED 
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C0_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2C0_SCL             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: I2C0_SDA             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_I2C1_IS_DEFINED 
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C1_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2C1_SCL             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: I2C1_SDA             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_I2C2_IS_DEFINED 
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC1_I2C2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC1);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C2_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2C2_SCL             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: I2C2_SDA             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_I2C3_IS_DEFINED 
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c3Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C3_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC1_I2C3_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC1);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C3_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2C3_SCL             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: I2C3_SDA             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End I2C_Group
 * @}
 */
/**
 * @addtogroup I2S_Group I2S, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
#define USBDM_I2S0_IS_DEFINED 
/**
 * Peripheral information for I2S, Inter-Integrated-Circuit Interface
 */
class I2s0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2S0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_I2S_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2S0_Tx_IRQn, I2S0_Rx_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2S0_MCLK            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: I2S0_RX_BCLK         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: I2S0_RX_FS           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: I2S0_TX_BCLK         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: I2S0_TX_FS           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: I2S0_TXD0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: I2S0_TXD1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: I2S0_RXD0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: I2S0_RXD1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End I2S_Group
 * @}
 */
/**
 * @addtogroup LLWU_Group LLWU, Low-leakage Wake-up Unit
 * @brief Pins used for Low-leakage Wake-up Unit
 * @{
 */
#define USBDM_LLWU_IS_DEFINED 
/**
 * Peripheral information for LLWU, Low-leakage Wake-up Unit
 */
class LlwuInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LLWU_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 26;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: LLWU_P0              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: LLWU_P1              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: LLWU_P2              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: LLWU_P3              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: LLWU_P4              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: LLWU_P5              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: LLWU_P6              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: LLWU_P7              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: LLWU_P8              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: LLWU_P9              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: LLWU_P10             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: LLWU_P11             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: LLWU_P12             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: LLWU_P13             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: LLWU_P14             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: LLWU_P15             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: LLWU_P16             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  17: LLWU_P17             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  18: LLWU_P18             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  19: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  20: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  21: LLWU_P21             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  22: LLWU_P22             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  23: LLWU_P23             = PTA11 (LED_BLUE)               */  { PORTA_CLOCK_MASK, PORTA_BasePtr,  GPIOA_BasePtr,  11,  PORT_PCR_MUX(1)|pcrValue  },
         /*  24: LLWU_P24             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  25: LLWU_P25             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
      PcrTable_T<LlwuInfo, 23>::setPCR(); // LLWU_P23        = PTA11 (LED_BLUE)              
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
      PcrTable_T<LlwuInfo, 23>::setPCR(0); // LLWU_P23        = PTA11 (LED_BLUE)              
   }

};

/** 
 * End LLWU_Group
 * @}
 */
/**
 * @addtogroup LPTMR_Group LPTMR, Low Power Timer
 * @brief Pins used for Low Power Timer
 * @{
 */
#define USBDM_LPTMR0_IS_DEFINED 
/**
 * Peripheral information for LPTMR, Low Power Timer
 */
class Lptmr0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LPTMR0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_LPTMR_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LPTMR0_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default PSR value
   static constexpr uint32_t PSR = 
      LPTMR_PSR_PRESCALE(0)|
      LPTMR_PSR_PCS(0)|
      (0<<LPTMR_PSR_PBYP_SHIFT)|
      (0<<LPTMR_PSR_PCS_SHIFT);

   //! Default CSR value
   static constexpr uint32_t CSR = 
      (0<<LPTMR_CSR_TIE_SHIFT)|
      (0<<LPTMR_CSR_TMS_SHIFT)|
      (0<<LPTMR_CSR_TFC_SHIFT)|
      (0<<LPTMR_CSR_TPP_SHIFT)|
      LPTMR_CSR_TPS(0);

   //! Default Timer period
   static constexpr uint32_t PERIOD = 10000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 3;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: LPTMR0_ALT1          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: LPTMR0_ALT2          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End LPTMR_Group
 * @}
 */
/**
 * @addtogroup LPUART_Group LPUART, Low Power Universal Asynchronous Receiver/Transmitter
 * @brief Pins used for Universal Asynchronous Receiver/Transmitter
 * @{
 */
#define USBDM_LPUART0_IS_DEFINED 
/**
 * Peripheral information for LPUART, Low Power Universal Asynchronous Receiver/Transmitter
 */
class Lpuart0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LPUART0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC2_LPUART0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC2);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LPUART0_RX_TX_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: LPUART0_TX           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: LPUART0_RX           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: LPUART0_RTS_b        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: LPUART0_CTS_b        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End LPUART_Group
 * @}
 */
/**
 * @addtogroup MCG_Group MCG, Multipurpose Clock Generator
 * @brief Pins used for Multipurpose Clock Generator
 * @{
 */
#define USBDM_MCG_IS_DEFINED 
/**
 * Peripheral information for MCG, Multipurpose Clock Generator
 */
class McgInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = MCG_BasePtr;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock Mode
   static constexpr uint32_t CLOCK_MODE = 0;

};

/** 
 * End MCG_Group
 * @}
 */
/**
 * @addtogroup MPU_TODO_Group MPU, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_MPU_IS_DEFINED 
/**
 * Peripheral information for MPU, (Incomplete)
 */
class MpuInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = MPU_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_MPU_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

};

/** 
 * End MPU_TODO_Group
 * @}
 */
/**
 * @addtogroup OSC_Group OSC, Crystal Oscillator
 * @brief Pins used for Crystal Oscillator
 * @{
 */
#define USBDM_OSC0_IS_DEFINED 
/**
 * Peripheral information for OSC, Crystal Oscillator
 */
class Osc0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = OSC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! External Reference Enable
   static constexpr uint32_t CR_ERCLKEN_M  = (0<<OSC_CR_ERCLKEN_SHIFT);

   //! External Reference Stop Enable
   static constexpr uint32_t CR_EREFSTEN_M = (0<<OSC_CR_EREFSTEN_SHIFT);

   //! Oscillator load capacitance
   static constexpr uint32_t CR_SCP_M      = (2<<OSC_CR_SC16P_SHIFT);

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: XTAL0                = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: EXTAL0               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End OSC_Group
 * @}
 */
/**
 * @addtogroup PDB_Group PDB, Programmable Dely Block
 * @brief Pins used for Programmable Dely Block
 * @{
 */
#define USBDM_PDB0_IS_DEFINED 
/**
 * Peripheral information for PDB, Programmable Dely Block
 */
class Pdb0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = PDB0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PDB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PDB0_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: PDB0_EXTRG           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End PDB_Group
 * @}
 */
/**
 * @addtogroup PIT_Group PIT, Programmable Interrupt Timer
 * @brief Pins used for Programmable Interrupt Timer
 * @{
 */
#define USBDM_PIT_IS_DEFINED 
/**
 * Peripheral information for PIT, Programmable Interrupt Timer
 */
class PitInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = PIT_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PIT_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 4;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PIT0_IRQn, PIT1_IRQn, PIT2_IRQn, PIT3_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default value for PIT->SC register
   static constexpr uint32_t loadValue  = 10000;

   //! PIT operation in debug mode
   static constexpr uint32_t mcrValue = (0<<PIT_MCR_FRZ_SHIFT);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

};

/** 
 * End PIT_Group
 * @}
 */
/**
 * @addtogroup Power_Group POWER, Power
 * @brief Pins used for Power
 * @{
 */
#define USBDM_POWER_IS_DEFINED 
/**
 * Peripheral information for POWER, Power
 */
class PowerInfo {
public:
   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 27;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: VBAT                 = VBAT                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   1: VDD1                 = VDD1                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   2: VDD2                 = VDD2                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   3: VDD3                 = VDD3                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   4: VDD4                 = VDD4                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   5: VDD5                 = VDD5                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   6: VDD6                 = VDD6                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   7: VDD7                 = VDD7                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   8: VDD8                 = VDD8                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   9: VDD9                 = VDD9                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  10: VDDA                 = VDDA                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  11: VREFH                = VREFH                          */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  12: VREFL                = VREFL                          */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  13: VREG_IN0             = VREG_IN0                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  14: VREG_IN1             = VREG_IN1                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  15: VREG_OUT             = VREG_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  16: VSS1                 = VSS1                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  17: VSS2a                = VSS2a                          */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  18: VSS2b                = VSS2b                          */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  19: VSS3                 = VSS3                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  20: VSS4                 = VSS4                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  21: VSS5                 = VSS5                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  22: VSS6                 = VSS6                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  23: VSS7                 = VSS7                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  24: VSS8                 = VSS8                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  25: VSS9                 = VSS9                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*  26: VSSA                 = VSSA                           */  { 0, 0, 0, FIXED_NO_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End Power_Group
 * @}
 */
/**
 * @addtogroup RNG_TODO_Group RNG, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_RNG_IS_DEFINED 
/**
 * Peripheral information for RNG, (Incomplete)
 */
class RngInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = RNG_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_RNG_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

};

/** 
 * End RNG_TODO_Group
 * @}
 */
/**
 * @addtogroup RTC_Group RTC, Real Time Clock
 * @brief Pins used for Real Time Clock
 * @{
 */
#define USBDM_RTC_IS_DEFINED 
/**
 * Peripheral information for RTC, Real Time Clock
 */
class RtcInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = RTC_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_RTC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {RTC_Alarm_IRQn, RTC_Seconds_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! RTC Oscillator Enable
   static constexpr uint32_t CR_OSCE_M  = (0<<RTC_CR_OSCE_SHIFT);

   //!  RTC 32kHz Clock Output
   static constexpr uint32_t CR_CLKO_M  = (0<<RTC_CR_CLKO_SHIFT);

   //! Update Mode
   static constexpr uint32_t CR_UM_M    = (0<<RTC_CR_UM_SHIFT);

   //! Supervisor Access
   static constexpr uint32_t CR_SUP_M   = (0<<RTC_CR_SUP_SHIFT);

   //! Wakeup Pin Enable
   static constexpr uint32_t CR_WPE_M   = (0<<RTC_CR_WPE_SHIFT);

   //! Oscillator load capacitance
   static constexpr uint32_t CR_SCP_M   = (2<<RTC_CR_SC16P_SHIFT);

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 5;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: XTAL32               = XTAL32                         */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   1: EXTAL32              = EXTAL32                        */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   2: RTC_CLKOUT           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   4: RTC_WAKEUP_b         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End RTC_Group
 * @}
 */
/**
 * @addtogroup SDHC_Group SDHC, Real Time Clock
 * @brief Pins used for Real Time Clock
 * @{
 */
#define USBDM_SDHC0_IS_DEFINED 
/**
 * Peripheral information for SDHC, Real Time Clock
 */
class Sdhc0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SDHC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC3_SDHC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC3);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SDHC_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 11;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: SDHC0_D0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: SDHC0_D1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SDHC0_D2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: SDHC0_D3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: SDHC0_D4             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: SDHC0_D5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: SDHC0_D6             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: SDHC0_D7             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: SDHC0_CLKIN          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: SDHC0_CMD            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: SDHC0_DCLK           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End SDHC_Group
 * @}
 */
/**
 * @addtogroup SDRAMC_Group SDRAMC, Synchronous DRAM Controller
 * @brief Pins used for Synchronous DRAM Controller
 * @{
 */
#define USBDM_SDRAMC_IS_DEFINED 
/**
 * Peripheral information for SDRAMC, Synchronous DRAM Controller
 */
class SdramcInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SDRAMC_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_SDRAMC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 74;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   3: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   4: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   5: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   6: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   8: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   9: SDRAM_A9             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: SDRAM_A10            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: SDRAM_A11            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: SDRAM_A12            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: SDRAM_A13            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: SDRAM_A14            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: SDRAM_A15            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: SDRAM_A16            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  17: SDRAM_A17            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  18: SDRAM_A18            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  19: SDRAM_A19            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  20: SDRAM_A20            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  21: SDRAM_A21            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  22: SDRAM_A22            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  23: SDRAM_A23            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  24: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  25: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  26: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  27: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  28: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  29: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  30: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  31: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  32: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  33: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  34: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  35: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  36: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  37: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  38: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  39: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  40: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  41: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  42: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  43: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  44: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  45: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  46: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  47: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  48: SDRAM_D16            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  49: SDRAM_D17            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  50: SDRAM_D18            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  51: SDRAM_D19            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  52: SDRAM_D20            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  53: SDRAM_D21            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  54: SDRAM_D22            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  55: SDRAM_D23            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  56: SDRAM_D24            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  57: SDRAM_D25            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  58: SDRAM_D26            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  59: SDRAM_D27            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  60: SDRAM_D28            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  61: SDRAM_D29            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  62: SDRAM_D30            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  63: SDRAM_D31            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  64: SDRAM_DQM0           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  65: SDRAM_DQM1           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  66: SDRAM_DQM2           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  67: SDRAM_DQM3           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  68: SDRAM_RAS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  69: SDRAM_CAS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  70: SDRAM_WE             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  71: SDRAM_CKE            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  72: SDRAM_CS0_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  73: SDRAM_CS1_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End SDRAMC_Group
 * @}
 */
/**
 * @addtogroup SPI_Group SPI, Serial Peripheral Interface
 * @brief Pins used for Serial Peripheral Interface
 * @{
 */
#define USBDM_SPI0_IS_DEFINED 
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_SPI0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI0_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

#ifdef SPI_CTAR_LSBFE_SHIFT
   //! Default communication mode: order, clock phase and clock polarity
   static constexpr uint32_t modeValue = (0<<SPI_CTAR_LSBFE_SHIFT)|(0<<SPI_CTAR_CPHA_SHIFT);

#endif
   //! Default speed (Hz)
   static constexpr uint32_t speed = 100000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: SPI0_SCK             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: SPI0_SIN             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SPI0_SOUT            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: SPI0_PCS0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: SPI0_PCS1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: SPI0_PCS2            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: SPI0_PCS3            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: SPI0_PCS4            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: SPI0_PCS5            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_SPI1_IS_DEFINED 
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_SPI1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI1_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

#ifdef SPI_CTAR_LSBFE_SHIFT
   //! Default communication mode: order, clock phase and clock polarity
   static constexpr uint32_t modeValue = (0<<SPI_CTAR_LSBFE_SHIFT)|(0<<SPI_CTAR_CPHA_SHIFT);

#endif
   //! Default speed (Hz)
   static constexpr uint32_t speed = 100000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 7;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: SPI1_SCK             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: SPI1_SIN             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SPI1_SOUT            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: SPI1_PCS0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: SPI1_PCS1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: SPI1_PCS2            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: SPI1_PCS3            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_SPI2_IS_DEFINED 
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC3_SPI2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC3);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI2_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

#ifdef SPI_CTAR_LSBFE_SHIFT
   //! Default communication mode: order, clock phase and clock polarity
   static constexpr uint32_t modeValue = (0<<SPI_CTAR_LSBFE_SHIFT)|(0<<SPI_CTAR_CPHA_SHIFT);

#endif
   //! Default speed (Hz)
   static constexpr uint32_t speed = 100000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 5;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: SPI2_SCK             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: SPI2_SIN             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SPI2_SOUT            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: SPI2_PCS0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: SPI2_PCS1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End SPI_Group
 * @}
 */
/**
 * @addtogroup TPM_Misc_Group TPM, Shared
 * @brief Pins used for Shared
 * @{
 */
#define USBDM_TPM_IS_DEFINED 
/**
 * Peripheral information for TPM, Shared
 */
class TpmInfo {
public:
   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: TPM_CLKIN0           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: TPM_CLKIN1           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End TPM_Misc_Group
 * @}
 */
/**
 * @addtogroup TPM_Group TPM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */
#define USBDM_TPM1_IS_DEFINED 
/**
 * Peripheral information for TPM, PWM, Input capture and Output compare
 */
class Tpm1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = TPM1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC2_TPM1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC2);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {TPM1_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default value for SC register
   static constexpr uint32_t SC  = 
       (0<<TPM_SC_TOIE_SHIFT)|
       TPM_SC_CMOD(1)|
       TPM_SC_PS(0);

   //! Default Timer Period
   static constexpr uint32_t PERIOD =  10000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: TPM1_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: TPM1_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_TPM2_IS_DEFINED 
/**
 * Peripheral information for TPM, PWM, Input capture and Output compare
 */
class Tpm2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = TPM2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC2_TPM2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC2);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {TPM2_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Default value for SC register
   static constexpr uint32_t SC  = 
       (0<<TPM_SC_TOIE_SHIFT)|
       TPM_SC_CMOD(1)|
       TPM_SC_PS(0);

   //! Default Timer Period
   static constexpr uint32_t PERIOD =  10000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: TPM2_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: TPM2_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End TPM_Group
 * @}
 */
/**
 * @addtogroup TSI_Group TSI, Low-leakage Wake-up Unit
 * @brief Pins used for Low-leakage Wake-up Unit
 * @{
 */
#define USBDM_TSI0_IS_DEFINED 
/**
 * Peripheral information for TSI, Low-leakage Wake-up Unit
 */
class Tsi0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = TSI0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_TSI0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {TSI_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 16;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: TSI0_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: TSI0_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: TSI0_CH2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: TSI0_CH3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: TSI0_CH4             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: TSI0_CH5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: TSI0_CH6             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: TSI0_CH7             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: TSI0_CH8             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: TSI0_CH9             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: TSI0_CH10            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: TSI0_CH11            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: TSI0_CH12            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: TSI0_CH13            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: TSI0_CH14            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: TSI0_CH15            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End TSI_Group
 * @}
 */
/**
 * @addtogroup UART_Group UART, Universal Asynchronous Receiver/Transmitter
 * @brief Pins used for Universal Asynchronous Receiver/Transmitter
 * @{
 */
#define USBDM_UART0_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART0_RX_TX_IRQn, UART0_ERR_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 5;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART0_TX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART0_RX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: UART0_RTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: UART0_CTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: UART0_COL_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART1_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART1_RX_TX_IRQn, UART1_ERR_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART1_TX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART1_RX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: UART1_RTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: UART1_CTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART2_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART2_RX_TX_IRQn, UART2_ERR_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemBusClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART2_TX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART2_RX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: UART2_RTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: UART2_CTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART3_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart3Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART3_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART3_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART3_RX_TX_IRQn, UART3_ERR_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemBusClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART3_TX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART3_RX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: UART3_RTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: UART3_CTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART4_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart4Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART4_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC1_UART4_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC1);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART4_RX_TX_IRQn, UART4_ERR_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemBusClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART4_TX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART4_RX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: UART4_RTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: UART4_CTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End UART_Group
 * @}
 */
/**
 * @addtogroup USB_Group USB, USB OTG Controller
 * @brief Pins used for USB OTG Controller
 * @{
 */
#define USBDM_USB0_IS_DEFINED 
/**
 * Peripheral information for USB, USB OTG Controller
 */
class Usb0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = USB0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_USB0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {USB0_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: USB0_DM              = USB0_DM                        */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   1: USB0_DP              = USB0_DP                        */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   2: USB0_CLKIN           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: USB0_SOF_OUT         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End USB_Group
 * @}
 */
/**
 * @addtogroup USBDCD_Group USBDCD, USB Device Charger Detection
 * @brief Pins used for USB Device Charger Detection
 * @{
 */
#define USBDM_USBDCD_IS_DEFINED 
/**
 * Peripheral information for USBDCD, USB Device Charger Detection
 */
class UsbdcdInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = USBDCD_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_USBDCD_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {USBDCD_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

};

/** 
 * End USBDCD_Group
 * @}
 */
/**
 * @addtogroup USBHS_Group USBHS, USB High Speed OTG Controller
 * @brief Pins used for USB High Speed OTG Controller
 * @{
 */
#define USBDM_USBHS_IS_DEFINED 
/**
 * Peripheral information for USBHS, USB High Speed OTG Controller
 */
class UsbhsInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = USBHS_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC3_USBHS_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC3);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {USBHS_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 5;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: USB1_DM              = USB1_DM                        */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   1: USB1_DP              = USB1_DP                        */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   2: USB1_VBUS            = USB1_VBUS                      */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   3: USB1_VSS             = USB1_VSS                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /*   4: USB1_ID              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End USBHS_Group
 * @}
 */
/**
 * @addtogroup USBHSPHY_TODO_Group USBHSPHY, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_USBHSPHY_IS_DEFINED 
/**
 * Peripheral information for USBHSPHY, (Incomplete)
 */
class UsbhsphyInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = USBHSPHY_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC3_USBHSPHY_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC3);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

};

/** 
 * End USBHSPHY_TODO_Group
 * @}
 */
/**
 * @addtogroup VREF_Group VREF, Voltage Reference
 * @brief Pins used for Voltage Reference
 * @{
 */
#define USBDM_VREF_IS_DEFINED 
/**
 * Peripheral information for VREF, Voltage Reference
 */
class VrefInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = VREF_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_VREF_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: VREF_OUT             = VREF_OUT                       */  { 0, 0, 0, FIXED_NO_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End VREF_Group
 * @}
 */

} // End namespace USBDM

#include "adc.h"
#include "ftm.h"
#include "tpm.h"
#include "gpio.h"

namespace USBDM {

/**
 * @addtogroup FTM_Group FTM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */
using ftm_SW3              = const USBDM::Ftm2Channel<0>;
/** 
 * End FTM_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
using gpio_LED_BLUE        = const USBDM::GpioA<11>;
using gpio_D7              = const USBDM::GpioA<25>;
/** 
 * End GPIO_Group
 * @}
 */
/**
 * Used to configure pin-mapping before 1st use of peripherals
 */
extern void mapAllPins();

} // End namespace USBDM
/**
 *
 * @mainpage Summary
 *
 * @section PinsByPinName Pins by Pin Name
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  ADC0_DM0                 | ADC0_DM0/ADC1_DM3                           |                           | -       
 *  ADC0_SE16                | ADC0_SE16/CMP1_IN2/ADC0_SE21                |                           | -       
 *  ADC1_DM0                 | ADC1_DM0/ADC0_DM3                           |                           | -       
 *  ADC1_DP0                 | ADC1_DP0/ADC0_DP3                           |                           | -       
 *  ADC1_SE16                | ADC1_SE16/CMP2_IN2/ADC0_SE22                |                           | -       
 *  DAC0_OUT                 | DAC0_OUT/CMP1_IN3/ADC0_SE23                 |                           | -       
 *  DAC1_OUT                 | DAC1_OUT/CMP0_IN4/CMP2_IN3/ADC1_SE23        |                           | -       
 *  EXTAL32                  | EXTAL32                                     |                           | -       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           |                           | -       
 *  PTA1                     | JTAG_TDI                                    |                           | -       
 *  PTA2                     | JTAG_TDO/TRACE_SWO                          |                           | -       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            |                           | -       
 *  PTA4                     | NMI_b                                       |                           | -       
 *  PTA5                     | Disabled                                    |                           | -       
 *  PTA6                     | Disabled                                    |                           | -       
 *  PTA7                     | ADC0_SE10                                   |                           | -       
 *  PTA8                     | ADC0_SE11                                   |                           | -       
 *  PTA9                     | Disabled                                    |                           | -       
 *  PTA10                    | FTM2_CH0                                    | SW3                       | Switch       
 *  PTA11                    | GPIOA_11/LLWU_P23                           | LED_BLUE                  | Blue LED       
 *  PTA12                    | CMP2_IN0                                    |                           | -       
 *  PTA13                    | CMP2_IN1                                    |                           | -       
 *  PTA14                    | Disabled                                    |                           | -       
 *  PTA15                    | CMP3_IN1                                    |                           | -       
 *  PTA16                    | CMP3_IN2                                    |                           | -       
 *  PTA17                    | ADC1_SE17                                   |                           | -       
 *  PTA18                    | EXTAL0                                      |                           | -       
 *  PTA19                    | XTAL0                                       |                           | -       
 *  PTA24                    | CMP3_IN4                                    |                           | -       
 *  PTA25                    | GPIOA_25                                    | D7                        | D7       
 *  PTA26                    | Disabled                                    |                           | -       
 *  PTA27                    | Disabled                                    |                           | -       
 *  PTA28                    | Disabled                                    |                           | -       
 *  PTA29                    | Disabled                                    |                           | -       
 *  PTB0                     | ADC0_SE8/ADC1_SE8/TSI0_CH0                  |                           | -       
 *  PTB1                     | ADC0_SE9/ADC1_SE9/TSI0_CH6                  |                           | -       
 *  PTB2                     | ADC0_SE12/TSI0_CH7                          | A5                        | -       
 *  PTB3                     | ADC0_SE13/TSI0_CH8                          | A4                        | -       
 *  PTB4                     | ADC1_SE10                                   | A3                        | -       
 *  PTB5                     | ADC1_SE11                                   | A2                        | -       
 *  PTB6                     | ADC1_SE12                                   | A1                        | -       
 *  PTB7                     | ADC1_SE13                                   | A0                        | -       
 *  PTB8                     | Disabled                                    |                           | -       
 *  PTB9                     | Disabled                                    |                           | -       
 *  PTB10                    | ADC1_SE14                                   | D27                       | -       
 *  PTB11                    | ADC1_SE15                                   | D28                       | -       
 *  PTB16                    | TSI0_CH9                                    | ConRx                     | -       
 *  PTB17                    | TSI0_CH10                                   | ConTx                     | -       
 *  PTB18                    | TSI0_CH11                                   | D8                        | -       
 *  PTB19                    | TSI0_CH12                                   | D9                        | -       
 *  PTB20                    | Disabled                                    | nRF_ce_n                  | -       
 *  PTB21                    | Disabled                                    |                           | -       
 *  PTB22                    | Disabled                                    |                           | -       
 *  PTB23                    | Disabled                                    | A10                       | -       
 *  PTC0                     | ADC0_SE14/TSI0_CH13                         | D29                       | -       
 *  PTC1                     | ADC0_SE15/TSI0_CH14                         | D18                       | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0/TSI0_CH15                | D6                        | -       
 *  PTC3                     | CMP1_IN1                                    | D0                        | -       
 *  PTC4                     | Disabled                                    | D1                        | -       
 *  PTC5                     | Disabled                                    | D5                        | -       
 *  PTC6                     | CMP0_IN0                                    | D19                       | -       
 *  PTC7                     | CMP0_IN1                                    | D21                       | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | D3                        | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | LED_RED                   | -       
 *  PTC10                    | ADC1_SE6b                                   | D15                       | -       
 *  PTC11                    | ADC1_SE7b                                   | D14                       | -       
 *  PTC12                    | Disabled                                    | D4                        | -       
 *  PTC13                    | Disabled                                    |                           | -       
 *  PTC14                    | Disabled                                    | BLUETOOTH_Rx              | -       
 *  PTC15                    | Disabled                                    | BLUETOOTH_Tx              | -       
 *  PTC16                    | Disabled                                    | D2                        | -       
 *  PTC17                    | Disabled                                    |                           | -       
 *  PTC18                    | Disabled                                    | nRF_irq                   | -       
 *  PTC19                    | Disabled                                    |                           | -       
 *  PTD0                     | Disabled                                    | D10                       | -       
 *  PTD1                     | ADC0_SE5b                                   | D13                       | -       
 *  PTD2                     | Disabled                                    | D11                       | -       
 *  PTD3                     | Disabled                                    | D12                       | -       
 *  PTD4                     | Disabled                                    | nRF_cs_n                  | -       
 *  PTD5                     | ADC0_SE6b                                   | nRF_sck                   | -       
 *  PTD6                     | ADC0_SE7b                                   | nRF_mosi                  | -       
 *  PTD7                     | Disabled                                    | nRF_miso                  | -       
 *  PTD8                     | Disabled                                    | ONBOARD_SCL               | -       
 *  PTD9                     | Disabled                                    | ONBOARD_SDA               | -       
 *  PTD10                    | Disabled                                    |                           | -       
 *  PTD11                    | Disabled                                    | SW2                       | -       
 *  PTD12                    | Disabled                                    | D33                       | -       
 *  PTD13                    | Disabled                                    | D32                       | -       
 *  PTD14                    | Disabled                                    |                           | -       
 *  PTD15                    | Disabled                                    |                           | -       
 *  PTE0                     | ADC1_SE4a                                   |                           | -       
 *  PTE1                     | ADC1_SE5a                                   |                           | -       
 *  PTE2                     | ADC1_SE6a                                   |                           | -       
 *  PTE3                     | ADC1_SE7a                                   |                           | -       
 *  PTE4                     | Disabled                                    |                           | -       
 *  PTE5                     | Disabled                                    |                           | -       
 *  PTE6                     | Disabled                                    | LED_GREEN                 | -       
 *  PTE7                     | Disabled                                    | D23                       | -       
 *  PTE8                     | Disabled                                    | D22                       | -       
 *  PTE9                     | Disabled                                    | D20                       | -       
 *  PTE10                    | Disabled                                    |                           | -       
 *  PTE11                    | Disabled                                    | D17                       | -       
 *  PTE12                    | Disabled                                    | D16                       | -       
 *  PTE24                    | ADC0_SE17                                   | D30                       | -       
 *  PTE25                    | ADC0_SE18                                   | D31                       | -       
 *  PTE26                    | Disabled                                    |                           | -       
 *  PTE27                    | Disabled                                    |                           | -       
 *  PTE28                    | Disabled                                    |                           | -       
 *  RESET_b                  | RESET_b                                     |                           | -       
 *  USB0_DM                  | USB0_DM                                     |                           | -       
 *  USB0_DP                  | USB0_DP                                     |                           | -       
 *  USB1_DM                  | USB1_DM                                     |                           | -       
 *  USB1_DP                  | USB1_DP                                     |                           | -       
 *  USB1_VBUS                | USB1_VBUS                                   |                           | -       
 *  USB1_VSS                 | USB1_VSS                                    |                           | -       
 *  VBAT                     | VBAT                                        |                           | -       
 *  VDD1                     | VDD1                                        |                           | -       
 *  VDD2                     | VDD2                                        |                           | -       
 *  VDD3                     | VDD3                                        |                           | -       
 *  VDD4                     | VDD4                                        |                           | -       
 *  VDD5                     | VDD5                                        |                           | -       
 *  VDD6                     | VDD6                                        |                           | -       
 *  VDD7                     | VDD7                                        |                           | -       
 *  VDD8                     | VDD8                                        |                           | -       
 *  VDD9                     | VDD9                                        |                           | -       
 *  VDDA                     | VDDA                                        |                           | -       
 *  VREFH                    | VREFH                                       |                           | -       
 *  VREFL                    | VREFL                                       |                           | -       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5/ADC1_SE18        |                           | -       
 *  VREG_IN0                 | VREG_IN0                                    |                           | -       
 *  VREG_IN1                 | VREG_IN1                                    |                           | -       
 *  VREG_OUT                 | VREG_OUT                                    |                           | -       
 *  VSS1                     | VSS1                                        |                           | -       
 *  VSS2a                    | VSS2a                                       |                           | -       
 *  VSS2b                    | VSS2b                                       |                           | -       
 *  VSS3                     | VSS3                                        |                           | -       
 *  VSS4                     | VSS4                                        |                           | -       
 *  VSS5                     | VSS5                                        |                           | -       
 *  VSS6                     | VSS6                                        |                           | -       
 *  VSS7                     | VSS7                                        |                           | -       
 *  VSS8                     | VSS8                                        |                           | -       
 *  VSS9                     | VSS9                                        |                           | -       
 *  VSSA                     | VSSA                                        |                           | -       
 *  XTAL32                   | XTAL32                                      |                           | -       
 *
 *
 * @section PinsByLocation Pins by Location
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  PTB7                     | ADC1_SE13                                   | A0                        | -       
 *  PTB6                     | ADC1_SE12                                   | A1                        | -       
 *  PTB5                     | ADC1_SE11                                   | A2                        | -       
 *  PTB4                     | ADC1_SE10                                   | A3                        | -       
 *  PTB3                     | ADC0_SE13/TSI0_CH8                          | A4                        | -       
 *  PTB2                     | ADC0_SE12/TSI0_CH7                          | A5                        | -       
 *  PTB23                    | Disabled                                    | A10                       | -       
 *  PTC14                    | Disabled                                    | BLUETOOTH_Rx              | -       
 *  PTC15                    | Disabled                                    | BLUETOOTH_Tx              | -       
 *  PTB16                    | TSI0_CH9                                    | ConRx                     | -       
 *  PTB17                    | TSI0_CH10                                   | ConTx                     | -       
 *  PTC3                     | CMP1_IN1                                    | D0                        | -       
 *  PTC4                     | Disabled                                    | D1                        | -       
 *  PTC16                    | Disabled                                    | D2                        | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | D3                        | -       
 *  PTC12                    | Disabled                                    | D4                        | -       
 *  PTC5                     | Disabled                                    | D5                        | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0/TSI0_CH15                | D6                        | -       
 *  PTA25                    | GPIOA_25                                    | D7                        | D7       
 *  PTB18                    | TSI0_CH11                                   | D8                        | -       
 *  PTB19                    | TSI0_CH12                                   | D9                        | -       
 *  PTD0                     | Disabled                                    | D10                       | -       
 *  PTD2                     | Disabled                                    | D11                       | -       
 *  PTD3                     | Disabled                                    | D12                       | -       
 *  PTD1                     | ADC0_SE5b                                   | D13                       | -       
 *  PTC11                    | ADC1_SE7b                                   | D14                       | -       
 *  PTC10                    | ADC1_SE6b                                   | D15                       | -       
 *  PTE12                    | Disabled                                    | D16                       | -       
 *  PTE11                    | Disabled                                    | D17                       | -       
 *  PTC1                     | ADC0_SE15/TSI0_CH14                         | D18                       | -       
 *  PTC6                     | CMP0_IN0                                    | D19                       | -       
 *  PTE9                     | Disabled                                    | D20                       | -       
 *  PTC7                     | CMP0_IN1                                    | D21                       | -       
 *  PTE8                     | Disabled                                    | D22                       | -       
 *  PTE7                     | Disabled                                    | D23                       | -       
 *  PTB10                    | ADC1_SE14                                   | D27                       | -       
 *  PTB11                    | ADC1_SE15                                   | D28                       | -       
 *  PTC0                     | ADC0_SE14/TSI0_CH13                         | D29                       | -       
 *  PTE24                    | ADC0_SE17                                   | D30                       | -       
 *  PTE25                    | ADC0_SE18                                   | D31                       | -       
 *  PTD13                    | Disabled                                    | D32                       | -       
 *  PTD12                    | Disabled                                    | D33                       | -       
 *  PTA11                    | GPIOA_11/LLWU_P23                           | LED_BLUE                  | Blue LED       
 *  PTE6                     | Disabled                                    | LED_GREEN                 | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | LED_RED                   | -       
 *  PTD8                     | Disabled                                    | ONBOARD_SCL               | -       
 *  PTD9                     | Disabled                                    | ONBOARD_SDA               | -       
 *  PTD11                    | Disabled                                    | SW2                       | -       
 *  PTA10                    | FTM2_CH0                                    | SW3                       | Switch       
 *  PTB20                    | Disabled                                    | nRF_ce_n                  | -       
 *  PTD4                     | Disabled                                    | nRF_cs_n                  | -       
 *  PTC18                    | Disabled                                    | nRF_irq                   | -       
 *  PTD7                     | Disabled                                    | nRF_miso                  | -       
 *  PTD6                     | ADC0_SE7b                                   | nRF_mosi                  | -       
 *  PTD5                     | ADC0_SE6b                                   | nRF_sck                   | -       
 *
 *
 * @section PinsByFunction Pins by Function
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  ADC0_DM0                 | ADC0_DM0/ADC1_DM3                           |                           | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0/TSI0_CH15                | D6                        | -       
 *  PTD1                     | ADC0_SE5b                                   | D13                       | -       
 *  PTD5                     | ADC0_SE6b                                   | nRF_sck                   | -       
 *  PTD6                     | ADC0_SE7b                                   | nRF_mosi                  | -       
 *  PTB0                     | ADC0_SE8/ADC1_SE8/TSI0_CH0                  |                           | -       
 *  PTB1                     | ADC0_SE9/ADC1_SE9/TSI0_CH6                  |                           | -       
 *  PTA7                     | ADC0_SE10                                   |                           | -       
 *  PTA8                     | ADC0_SE11                                   |                           | -       
 *  PTB2                     | ADC0_SE12/TSI0_CH7                          | A5                        | -       
 *  PTB3                     | ADC0_SE13/TSI0_CH8                          | A4                        | -       
 *  PTC0                     | ADC0_SE14/TSI0_CH13                         | D29                       | -       
 *  PTC1                     | ADC0_SE15/TSI0_CH14                         | D18                       | -       
 *  ADC0_SE16                | ADC0_SE16/CMP1_IN2/ADC0_SE21                |                           | -       
 *  PTE24                    | ADC0_SE17                                   | D30                       | -       
 *  PTE25                    | ADC0_SE18                                   | D31                       | -       
 *  ADC1_DM0                 | ADC1_DM0/ADC0_DM3                           |                           | -       
 *  ADC1_DP0                 | ADC1_DP0/ADC0_DP3                           |                           | -       
 *  PTE0                     | ADC1_SE4a                                   |                           | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | D3                        | -       
 *  PTE1                     | ADC1_SE5a                                   |                           | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | LED_RED                   | -       
 *  PTE2                     | ADC1_SE6a                                   |                           | -       
 *  PTC10                    | ADC1_SE6b                                   | D15                       | -       
 *  PTE3                     | ADC1_SE7a                                   |                           | -       
 *  PTC11                    | ADC1_SE7b                                   | D14                       | -       
 *  PTB4                     | ADC1_SE10                                   | A3                        | -       
 *  PTB5                     | ADC1_SE11                                   | A2                        | -       
 *  PTB6                     | ADC1_SE12                                   | A1                        | -       
 *  PTB7                     | ADC1_SE13                                   | A0                        | -       
 *  PTB10                    | ADC1_SE14                                   | D27                       | -       
 *  PTB11                    | ADC1_SE15                                   | D28                       | -       
 *  ADC1_SE16                | ADC1_SE16/CMP2_IN2/ADC0_SE22                |                           | -       
 *  PTA17                    | ADC1_SE17                                   |                           | -       
 *  PTC6                     | CMP0_IN0                                    | D19                       | -       
 *  PTC7                     | CMP0_IN1                                    | D21                       | -       
 *  PTC3                     | CMP1_IN1                                    | D0                        | -       
 *  PTA12                    | CMP2_IN0                                    |                           | -       
 *  PTA13                    | CMP2_IN1                                    |                           | -       
 *  PTA15                    | CMP3_IN1                                    |                           | -       
 *  PTA16                    | CMP3_IN2                                    |                           | -       
 *  PTA24                    | CMP3_IN4                                    |                           | -       
 *  DAC0_OUT                 | DAC0_OUT/CMP1_IN3/ADC0_SE23                 |                           | -       
 *  DAC1_OUT                 | DAC1_OUT/CMP0_IN4/CMP2_IN3/ADC1_SE23        |                           | -       
 *  PTE28                    | Disabled                                    |                           | -       
 *  PTA18                    | EXTAL0                                      |                           | -       
 *  EXTAL32                  | EXTAL32                                     |                           | -       
 *  PTA10                    | FTM2_CH0                                    | SW3                       | Switch       
 *  PTA11                    | GPIOA_11/LLWU_P23                           | LED_BLUE                  | Blue LED       
 *  PTA25                    | GPIOA_25                                    | D7                        | D7       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           |                           | -       
 *  PTA1                     | JTAG_TDI                                    |                           | -       
 *  PTA2                     | JTAG_TDO/TRACE_SWO                          |                           | -       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            |                           | -       
 *  PTA4                     | NMI_b                                       |                           | -       
 *  RESET_b                  | RESET_b                                     |                           | -       
 *  PTB16                    | TSI0_CH9                                    | ConRx                     | -       
 *  PTB17                    | TSI0_CH10                                   | ConTx                     | -       
 *  PTB18                    | TSI0_CH11                                   | D8                        | -       
 *  PTB19                    | TSI0_CH12                                   | D9                        | -       
 *  USB0_DM                  | USB0_DM                                     |                           | -       
 *  USB0_DP                  | USB0_DP                                     |                           | -       
 *  USB1_DM                  | USB1_DM                                     |                           | -       
 *  USB1_DP                  | USB1_DP                                     |                           | -       
 *  USB1_VBUS                | USB1_VBUS                                   |                           | -       
 *  USB1_VSS                 | USB1_VSS                                    |                           | -       
 *  VBAT                     | VBAT                                        |                           | -       
 *  VDD1                     | VDD1                                        |                           | -       
 *  VDD2                     | VDD2                                        |                           | -       
 *  VDD3                     | VDD3                                        |                           | -       
 *  VDD4                     | VDD4                                        |                           | -       
 *  VDD5                     | VDD5                                        |                           | -       
 *  VDD6                     | VDD6                                        |                           | -       
 *  VDD7                     | VDD7                                        |                           | -       
 *  VDD8                     | VDD8                                        |                           | -       
 *  VDD9                     | VDD9                                        |                           | -       
 *  VDDA                     | VDDA                                        |                           | -       
 *  VREFH                    | VREFH                                       |                           | -       
 *  VREFL                    | VREFL                                       |                           | -       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5/ADC1_SE18        |                           | -       
 *  VREG_IN0                 | VREG_IN0                                    |                           | -       
 *  VREG_IN1                 | VREG_IN1                                    |                           | -       
 *  VREG_OUT                 | VREG_OUT                                    |                           | -       
 *  VSS1                     | VSS1                                        |                           | -       
 *  VSS2a                    | VSS2a                                       |                           | -       
 *  VSS2b                    | VSS2b                                       |                           | -       
 *  VSS3                     | VSS3                                        |                           | -       
 *  VSS4                     | VSS4                                        |                           | -       
 *  VSS5                     | VSS5                                        |                           | -       
 *  VSS6                     | VSS6                                        |                           | -       
 *  VSS7                     | VSS7                                        |                           | -       
 *  VSS8                     | VSS8                                        |                           | -       
 *  VSS9                     | VSS9                                        |                           | -       
 *  VSSA                     | VSSA                                        |                           | -       
 *  PTA19                    | XTAL0                                       |                           | -       
 *  XTAL32                   | XTAL32                                      |                           | -       
 *
 */

#endif /* PROJECT_HEADERS_PIN_MAPPING_H */
