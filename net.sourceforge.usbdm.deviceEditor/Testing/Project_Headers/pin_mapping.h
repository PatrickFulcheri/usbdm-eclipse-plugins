/**
 * @file      pin_mapping.h (derived from MKL25Z4.usbdmHardware)
 * @version   1.2.0
 * @brief     Pin declarations for FRDM_KL25Z
 *
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#ifndef PROJECT_HEADERS_PIN_MAPPING_H
#define PROJECT_HEADERS_PIN_MAPPING_H

#include <stddef.h>
#include "derivative.h"

#include "gpio.h"

/*
 * Common Mux settings for PCR
 */
#undef FIXED_ADC_FN            
#undef FIXED_GPIO_FN           
#undef FIXED_PORT_CLOCK_REG    
#define FIXED_ADC_FN             0                    // Fixed ADC Multiplexing value
#define FIXED_GPIO_FN            1                    // Fixed GPIO Multiplexing value
#define FIXED_PORT_CLOCK_REG     SCGC5                // Fixed PORT Clock

/*
 * Peripheral clock macros
 */
#define PORT_CLOCK_REG       SCGC5

namespace USBDM {

/*
 * Peripheral Information Classes
 */
/**
 * @addtogroup 0_Group 0, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End 0_Group
 * @}
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Pins used for Analogue Input
 * @{
 */
#define USBDM_ADC0_IS_DEFINED 
/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ADC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_ADC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC0_IRQn};

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 40;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: ADC0_SE0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   2: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   3: ADC0_SE3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: ADC0_SE4b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: ADC0_SE5b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: ADC0_SE6b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: ADC0_SE7b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: ADC0_SE8        = PTB0 (A0)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  0,   PORT_PCR_MUX(0)|pcrValue  },
         /*   9: ADC0_SE9        = PTB1 (A1)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  1,   PORT_PCR_MUX(0)|pcrValue  },
         /*  10: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  11: ADC0_SE11       = PTC2 (A4)                      */  { PORTC_CLOCK_MASK, PORTC_BasePtr,  GPIOC_BasePtr,  2,   PORT_PCR_MUX(0)|pcrValue  },
         /*  12: ADC0_SE12       = PTB2 (A2)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  2,   PORT_PCR_MUX(0)|pcrValue  },
         /*  13: ADC0_SE13       = PTB3 (A3)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  3,   PORT_PCR_MUX(0)|pcrValue  },
         /*  14: ADC0_SE14       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: ADC0_SE15       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  17: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  18: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  19: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  20: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  21: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  22: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  23: ADC0_SE23       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  24: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  25: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  26: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  27: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  28: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  29: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  30: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  31: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  32: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  33: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  34: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  35: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  36: ADC0_SE4a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  37: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  38: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  39: ADC0_SE7a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
      PcrTable_T<Adc0Info,  8>::setPCR(); // ADC0_SE8        = PTB0 (A0)                     
      PcrTable_T<Adc0Info,  9>::setPCR(); // ADC0_SE9        = PTB1 (A1)                     
      PcrTable_T<Adc0Info, 11>::setPCR(); // ADC0_SE11       = PTC2 (A4)                     
      PcrTable_T<Adc0Info, 12>::setPCR(); // ADC0_SE12       = PTB2 (A2)                     
      PcrTable_T<Adc0Info, 13>::setPCR(); // ADC0_SE13       = PTB3 (A3)                     
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
      PcrTable_T<Adc0Info,  8>::setPCR(0); // ADC0_SE8        = PTB0 (A0)                     
      PcrTable_T<Adc0Info,  9>::setPCR(0); // ADC0_SE9        = PTB1 (A1)                     
      PcrTable_T<Adc0Info, 11>::setPCR(0); // ADC0_SE11       = PTC2 (A4)                     
      PcrTable_T<Adc0Info, 12>::setPCR(0); // ADC0_SE12       = PTB2 (A2)                     
      PcrTable_T<Adc0Info, 13>::setPCR(0); // ADC0_SE13       = PTB3 (A3)                     
   }

   class InfoDP {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC0_DP0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   2: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   3: ADC0_DP3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoDM {
   public:
      //! Number of signals available in info table
      static constexpr int NUM_SIGNALS  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC0_DM0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   2: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   3: ADC0_DM3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs() {
      }

      /**
       * Initialise pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

/** 
 * End ADC_Group
 * @}
 */
/**
 * @addtogroup CLKOUT_Group CLKOUT, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End CLKOUT_Group
 * @}
 */
/**
 * @addtogroup CMP_Group CMP, Misc
 * @brief Pins used for Misc
 * @{
 */
#define USBDM_CMP0_IS_DEFINED 
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: CMP0_IN0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: CMP0_IN1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: CMP0_IN2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: CMP0_IN3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: CMP0_IN4        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: CMP0_IN5        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   7: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   8: CMP0_OUT        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End CMP_Group
 * @}
 */
/**
 * @addtogroup DAC_Misc_Group DAC, DAC0 (Miscellaneous)
 * @brief Pins used for DAC0 (Miscellaneous)
 * @{
 */
#define USBDM_DAC0_IS_DEFINED 
/**
 * Peripheral information for DAC, DAC0 (Miscellaneous)
 */
class Dac0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DAC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DAC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {DAC0_IRQn};

};

/** 
 * End DAC_Misc_Group
 * @}
 */
/**
 * @addtogroup DMA_Misc_Group DMA, DMA0 (Miscellaneous)
 * @brief Pins used for DMA0 (Miscellaneous)
 * @{
 */
#define USBDM_DMA0_IS_DEFINED 
/**
 * Peripheral information for DMA, DMA0 (Miscellaneous)
 */
class Dma0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMA0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_DMA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End DMA_Misc_Group
 * @}
 */
/**
 * @addtogroup DMAMUX_Group DMAMUX, Direct Memory Access (DMA)
 * @brief Pins used for Direct Memory Access (DMA)
 * @{
 */
#define USBDM_DMAMUX0_IS_DEFINED 
/**
 * Peripheral information for DMAMUX, Direct Memory Access (DMA)
 */
class Dmamux0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMAMUX0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DMAMUX0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End DMAMUX_Group
 * @}
 */
/**
 * @addtogroup EXTRG_Group EXTRG, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End EXTRG_Group
 * @}
 */
/**
 * @addtogroup FTFA_Misc_Group FTFA, FTFA (Miscellaneous)
 * @brief Pins used for FTFA (Miscellaneous)
 * @{
 */
#define USBDM_FTFA_IS_DEFINED 
/**
 * Peripheral information for FTFA, FTFA (Miscellaneous)
 */
class FtfaInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTFA_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTF_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End FTFA_Misc_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
#define USBDM_GPIOA_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioAInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTA_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOA_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTA_IRQn};

};

#define USBDM_GPIOB_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioBInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTB_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOB_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

};

#define USBDM_GPIOC_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioCInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTC_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOC_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

};

#define USBDM_GPIOD_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioDInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTD_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOD_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTD_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTD_IRQn};

};

#define USBDM_GPIOE_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioEInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTE_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOE_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTE_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

};

/** 
 * End GPIO_Group
 * @}
 */
/**
 * @addtogroup I2C_Group I2C, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
#define USBDM_I2C0_IS_DEFINED 
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C0_IRQn};

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2C0_SCL        = PTE24 (ACCEL_SCL)              */  { PORTE_CLOCK_MASK, PORTE_BasePtr,  GPIOE_BasePtr,  24,  PORT_PCR_MUX(5)|pcrValue  },
         /*   1: I2C0_SDA        = PTE25 (ACCEL_SDA)              */  { PORTE_CLOCK_MASK, PORTE_BasePtr,  GPIOE_BasePtr,  25,  PORT_PCR_MUX(5)|pcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
      PcrTable_T<I2c0Info,  0>::setPCR(); // I2C0_SCL        = PTE24 (ACCEL_SCL)             
      PcrTable_T<I2c0Info,  1>::setPCR(); // I2C0_SDA        = PTE25 (ACCEL_SDA)             
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
      PcrTable_T<I2c0Info,  0>::setPCR(0); // I2C0_SCL        = PTE24 (ACCEL_SCL)             
      PcrTable_T<I2c0Info,  1>::setPCR(0); // I2C0_SDA        = PTE25 (ACCEL_SDA)             
   }

};

#define USBDM_I2C1_IS_DEFINED 
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C1_IRQn};

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2C1_SCL        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: I2C1_SDA        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End I2C_Group
 * @}
 */
/**
 * @addtogroup LLWU_Group LLWU, Low-leakage Wake-up Unit
 * @brief Pins used for Low-leakage Wake-up Unit
 * @{
 */
#define USBDM_LLWU_IS_DEFINED 
/**
 * Peripheral information for LLWU, Low-leakage Wake-up Unit
 */
class LlwuInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LLWU_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 16;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   2: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   3: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   4: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   5: LLWU_P5         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: LLWU_P6         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: LLWU_P7         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: LLWU_P8         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: LLWU_P9         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: LLWU_P10        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  12: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  13: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  14: LLWU_P14        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: LLWU_P15        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End LLWU_Group
 * @}
 */
/**
 * @addtogroup LPTMR_Group LPTMR, Low Power Timer
 * @brief Pins used for Low Power Timer
 * @{
 */
#define USBDM_LPTMR0_IS_DEFINED 
/**
 * Peripheral information for LPTMR, Low Power Timer
 */
class Lptmr0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LPTMR0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_LPTMR_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LPTMR0_IRQn};

   //! Default PSR value
   static constexpr uint32_t psrValue = LPTMR_PSR_PRESCALE(0)|LPTMR_PSR_PCS(0)|(0<<LPTMR_PSR_PBYP_SHIFT)|(0<<LPTMR_PSR_PCS_SHIFT);

   //! Default CSR value
   static constexpr uint32_t csrValue =  (0<<LPTMR_CSR_TMS_SHIFT)|(0<<LPTMR_CSR_TFC_SHIFT)|(0<<LPTMR_CSR_TPP_SHIFT)|LPTMR_CSR_TPS(1);

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 3;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: LPTMR0_ALT1     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: LPTMR0_ALT2     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End LPTMR_Group
 * @}
 */
/**
 * @addtogroup NMI_B_Group NMI_b, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End NMI_B_Group
 * @}
 */
/**
 * @addtogroup OSC0_Group OSC0, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End OSC0_Group
 * @}
 */
/**
 * @addtogroup PIT_Group PIT, Programmable Interrupt Timer
 * @brief Pins used for Programmable Interrupt Timer
 * @{
 */
#define USBDM_PIT_IS_DEFINED 
/**
 * Peripheral information for PIT, Programmable Interrupt Timer
 */
class PitInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = PIT_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PIT_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PIT_IRQn};

   //! Default value for PIT->SC register
   static constexpr uint32_t loadValue  = 2000;

   //! PIT operation in debug mode
   static constexpr uint32_t mcrValue = (0<<PIT_MCR_FRZ_SHIFT);

   //! PIT IRQ Level in NVIC
   static constexpr uint32_t irqLevel = 0;

};

/** 
 * End PIT_Group
 * @}
 */
/**
 * @addtogroup RESET_B_Group RESET_b, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End RESET_B_Group
 * @}
 */
/**
 * @addtogroup RTC_Group RTC, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End RTC_Group
 * @}
 */
/**
 * @addtogroup SPI_Group SPI, Serial Peripheral Interface
 * @brief Pins used for Serial Peripheral Interface
 * @{
 */
#define USBDM_SPI0_IS_DEFINED 
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_SPI0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI0_IRQn};

#ifdef SPI_CTAR_LSBFE_SHIFT
   //! Default communication mode: order, clock phase and clock polarity
   static constexpr uint32_t modeValue = (0<<SPI_CTAR_LSBFE_SHIFT)|(0<<SPI_CTAR_CPHA_SHIFT);

#endif
   //! Default speed (Hz)
   static constexpr uint32_t speed = 10000000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: SPI0_SCK        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: SPI0_MISO       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SPI0_MOSI       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: SPI0_PCS0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_SPI1_IS_DEFINED 
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_SPI1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI1_IRQn};

#ifdef SPI_CTAR_LSBFE_SHIFT
   //! Default communication mode: order, clock phase and clock polarity
   static constexpr uint32_t modeValue = (0<<SPI_CTAR_LSBFE_SHIFT)|(0<<SPI_CTAR_CPHA_SHIFT);

#endif
   //! Default speed (Hz)
   static constexpr uint32_t speed = 10000000;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: SPI1_SCK        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: SPI1_MISO       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SPI1_MOSI       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: SPI1_PCS0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End SPI_Group
 * @}
 */
/**
 * @addtogroup SWD_Group SWD, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End SWD_Group
 * @}
 */
/**
 * @addtogroup TPM_Group TPM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */
#define USBDM_TPM0_IS_DEFINED 
/**
 * Peripheral information for TPM, PWM, Input capture and Output compare
 */
class Tpm0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = TPM0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_TPM0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {TPM0_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = TPM_SC_CMOD(1)|TPM_SC_PS(0);

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 6;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: TPM0_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: TPM0_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: TPM0_CH2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: TPM0_CH3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: TPM0_CH4        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: TPM0_CH5        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_TPM1_IS_DEFINED 
/**
 * Peripheral information for TPM, PWM, Input capture and Output compare
 */
class Tpm1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = TPM1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_TPM1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {TPM1_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = TPM_SC_CMOD(1)|TPM_SC_PS(0);

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: TPM1_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: TPM1_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_TPM2_IS_DEFINED 
/**
 * Peripheral information for TPM, PWM, Input capture and Output compare
 */
class Tpm2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = TPM2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_TPM2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {TPM2_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = TPM_SC_CMOD(1)|TPM_SC_PS(0);

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: TPM2_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: TPM2_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End TPM_Group
 * @}
 */
/**
 * @addtogroup TPM_CLKIN0_Group TPM_CLKIN0, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End TPM_CLKIN0_Group
 * @}
 */
/**
 * @addtogroup TPM_CLKIN1_Group TPM_CLKIN1, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End TPM_CLKIN1_Group
 * @}
 */
/**
 * @addtogroup TSI_Group TSI, Low-leakage Wake-up Unit
 * @brief Pins used for Low-leakage Wake-up Unit
 * @{
 */
#define USBDM_TSI0_IS_DEFINED 
/**
 * Peripheral information for TSI, Low-leakage Wake-up Unit
 */
class Tsi0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = TSI0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_TSI0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {TSI0_IRQn};

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 16;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: TSI0_CH0        = PTB0 (A0)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  0,   PORT_PCR_MUX(0)|pcrValue  },
         /*   1: TSI0_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: TSI0_CH2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: TSI0_CH3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: TSI0_CH4        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: TSI0_CH5        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: TSI0_CH6        = PTB1 (A1)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  1,   PORT_PCR_MUX(0)|pcrValue  },
         /*   7: TSI0_CH7        = PTB2 (A2)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  2,   PORT_PCR_MUX(0)|pcrValue  },
         /*   8: TSI0_CH8        = PTB3 (A3)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  3,   PORT_PCR_MUX(0)|pcrValue  },
         /*   9: TSI0_CH9        = PTB16                          */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  16,  PORT_PCR_MUX(0)|pcrValue  },
         /*  10: TSI0_CH10       = PTB17                          */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  17,  PORT_PCR_MUX(0)|pcrValue  },
         /*  11: TSI0_CH11       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: TSI0_CH12       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: TSI0_CH13       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: TSI0_CH14       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: TSI0_CH15       = PTC2 (A4)                      */  { PORTC_CLOCK_MASK, PORTC_BasePtr,  GPIOC_BasePtr,  2,   PORT_PCR_MUX(0)|pcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
      PcrTable_T<Tsi0Info,  0>::setPCR(); // TSI0_CH0        = PTB0 (A0)                     
      PcrTable_T<Tsi0Info,  6>::setPCR(); // TSI0_CH6        = PTB1 (A1)                     
      PcrTable_T<Tsi0Info,  7>::setPCR(); // TSI0_CH7        = PTB2 (A2)                     
      PcrTable_T<Tsi0Info,  8>::setPCR(); // TSI0_CH8        = PTB3 (A3)                     
      PcrTable_T<Tsi0Info,  9>::setPCR(); // TSI0_CH9        = PTB16                         
      PcrTable_T<Tsi0Info, 10>::setPCR(); // TSI0_CH10       = PTB17                         
      PcrTable_T<Tsi0Info, 15>::setPCR(); // TSI0_CH15       = PTC2 (A4)                     
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
      PcrTable_T<Tsi0Info,  0>::setPCR(0); // TSI0_CH0        = PTB0 (A0)                     
      PcrTable_T<Tsi0Info,  6>::setPCR(0); // TSI0_CH6        = PTB1 (A1)                     
      PcrTable_T<Tsi0Info,  7>::setPCR(0); // TSI0_CH7        = PTB2 (A2)                     
      PcrTable_T<Tsi0Info,  8>::setPCR(0); // TSI0_CH8        = PTB3 (A3)                     
      PcrTable_T<Tsi0Info,  9>::setPCR(0); // TSI0_CH9        = PTB16                         
      PcrTable_T<Tsi0Info, 10>::setPCR(0); // TSI0_CH10       = PTB17                         
      PcrTable_T<Tsi0Info, 15>::setPCR(0); // TSI0_CH15       = PTC2 (A4)                     
   }

};

/** 
 * End TSI_Group
 * @}
 */
/**
 * @addtogroup UART_Group UART, Universal Asynchronous Receiver/Transmitter
 * @brief Pins used for Universal Asynchronous Receiver/Transmitter
 * @{
 */
#define USBDM_UART0_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART0_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART0_TX        = PTA2 (D1/ConTx)                */  { PORTA_CLOCK_MASK, PORTA_BasePtr,  GPIOA_BasePtr,  2,   PORT_PCR_MUX(2)|pcrValue  },
         /*   1: UART0_RX        = PTA1 (D0/ConRx)                */  { PORTA_CLOCK_MASK, PORTA_BasePtr,  GPIOA_BasePtr,  1,   PORT_PCR_MUX(2)|pcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
      PcrTable_T<Uart0Info,  0>::setPCR(); // UART0_TX        = PTA2 (D1/ConTx)               
      PcrTable_T<Uart0Info,  1>::setPCR(); // UART0_RX        = PTA1 (D0/ConRx)               
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
      PcrTable_T<Uart0Info,  0>::setPCR(0); // UART0_TX        = PTA2 (D1/ConTx)               
      PcrTable_T<Uart0Info,  1>::setPCR(0); // UART0_RX        = PTA1 (D0/ConRx)               
   }

};

#define USBDM_UART1_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART1_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemCoreClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART1_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART1_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART2_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART2_IRQn};

   //! Clock source for peripheral
   static constexpr uint32_t &clockSource = SystemBusClock;

   //! Number of signals available in info table
   static constexpr int NUM_SIGNALS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART2_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART2_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs() {
   }

   /**
    * Initialise pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End UART_Group
 * @}
 */
/**
 * @addtogroup USB_Misc_Group USB, USB0 (Miscellaneous)
 * @brief Pins used for USB0 (Miscellaneous)
 * @{
 */
#define USBDM_USB0_IS_DEFINED 
/**
 * Peripheral information for USB, USB0 (Miscellaneous)
 */
class Usb0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = USB0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_USBOTG_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {USB0_IRQn};

};

/** 
 * End USB_Misc_Group
 * @}
 */
/**
 * @addtogroup VDD_Misc_Group VDD, VDD (Miscellaneous)
 * @brief Pins used for VDD (Miscellaneous)
 * @{
 */
/** 
 * End VDD_Misc_Group
 * @}
 */
/**
 * @addtogroup VDDA_Group VDDA, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VDDA_Group
 * @}
 */
/**
 * @addtogroup VOUT33_Group VOUT33, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VOUT33_Group
 * @}
 */
/**
 * @addtogroup VREFH_Group VREFH, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREFH_Group
 * @}
 */
/**
 * @addtogroup VREFL_Group VREFL, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREFL_Group
 * @}
 */
/**
 * @addtogroup VREGIN_Group VREGIN, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREGIN_Group
 * @}
 */
/**
 * @addtogroup VSS_Misc_Group VSS, VSS (Miscellaneous)
 * @brief Pins used for VSS (Miscellaneous)
 * @{
 */
/** 
 * End VSS_Misc_Group
 * @}
 */
/**
 * @addtogroup VSSA_Group VSSA, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VSSA_Group
 * @}
 */

} // End namespace USBDM

#include "adc.h"
#include "tpm.h"

namespace USBDM {

/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Pins used for Analogue Input
 * @{
 */
/**
 * Convenience templated class representing an ADC
 *
 * Example
 * @code
 *  // Instantiate ADC0 single-ended channel #8
 *  const adc0<8> adc0_se8;
 *
 *  // Initialise ADC
 *  adc0_se8.initialiseADC(USBDM::resolution_12bit_se);
 *
 *  // Set as analogue input
 *  adc0_se8.setAnalogueInput();
 *
 *  // Read input
 *  uint16_t value = adc0_se8.readAnalogue();
 *  @endcode
 *
 * @tparam adcChannel    ADC channel
 */
template<uint8_t channel> using Adc0 = Adc_T<Adc0Info, channel>;

using adc_A0               = const USBDM::Adc0<8>;
using adc_A1               = const USBDM::Adc0<9>;
using adc_A2               = const USBDM::Adc0<12>;
using adc_A3               = const USBDM::Adc0<13>;
using adc_A4               = const USBDM::Adc0<11>;
/** 
 * End ADC_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
/**
 * @brief Convenience template for GpioA. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioA
 * GpioA<3> GpioA3
 *
 * // Set as digital output
 * GpioA3.setOutput();
 *
 * // Set pin high
 * GpioA3.set();
 *
 * // Set pin low
 * GpioA3.clear();
 *
 * // Toggle pin
 * GpioA3.toggle();
 *
 * // Set pin to boolean value
 * GpioA3.write(true);
 *
 * // Set pin to boolean value
 * GpioA3.write(false);
 *
 * // Set as digital input
 * GpioA3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioA3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioA = Gpio_T<GpioAInfo, bitNum>;

/**
 * @brief Convenience template for GpioA fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioA
 * GpioAField<6,3> GpioA6_3
 *
 * // Set as digital output
 * GpioA6_3.setOutput();
 *
 * // Write value to field
 * GpioA6_3.write(0x53);
 *
 * // Clear all of field
 * GpioA6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioA6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioA6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioA6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioA6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioAField = Field_T<GpioAInfo, left, right>;

using gpio_D4              = const USBDM::GpioA<4>;
using gpio_D5              = const USBDM::GpioA<5>;
using gpio_D3              = const USBDM::GpioA<12>;
using gpio_D8              = const USBDM::GpioA<13>;
using gpio_D28             = const USBDM::GpioA<16>;
using gpio_D29             = const USBDM::GpioA<17>;
/**
 * @brief Convenience template for GpioB. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioB
 * GpioB<3> GpioB3
 *
 * // Set as digital output
 * GpioB3.setOutput();
 *
 * // Set pin high
 * GpioB3.set();
 *
 * // Set pin low
 * GpioB3.clear();
 *
 * // Toggle pin
 * GpioB3.toggle();
 *
 * // Set pin to boolean value
 * GpioB3.write(true);
 *
 * // Set pin to boolean value
 * GpioB3.write(false);
 *
 * // Set as digital input
 * GpioB3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioB3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioB = Gpio_T<GpioBInfo, bitNum>;

/**
 * @brief Convenience template for GpioB fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioB
 * GpioBField<6,3> GpioB6_3
 *
 * // Set as digital output
 * GpioB6_3.setOutput();
 *
 * // Write value to field
 * GpioB6_3.write(0x53);
 *
 * // Clear all of field
 * GpioB6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioB6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioB6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioB6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioB6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioBField = Field_T<GpioBInfo, left, right>;

using gpio_LED_RED         = const USBDM::GpioB<18>;
using gpio_LED_GREEN       = const USBDM::GpioB<19>;
/**
 * @brief Convenience template for GpioC. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioC
 * GpioC<3> GpioC3
 *
 * // Set as digital output
 * GpioC3.setOutput();
 *
 * // Set pin high
 * GpioC3.set();
 *
 * // Set pin low
 * GpioC3.clear();
 *
 * // Toggle pin
 * GpioC3.toggle();
 *
 * // Set pin to boolean value
 * GpioC3.write(true);
 *
 * // Set pin to boolean value
 * GpioC3.write(false);
 *
 * // Set as digital input
 * GpioC3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioC3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioC = Gpio_T<GpioCInfo, bitNum>;

/**
 * @brief Convenience template for GpioC fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioC
 * GpioCField<6,3> GpioC6_3
 *
 * // Set as digital output
 * GpioC6_3.setOutput();
 *
 * // Write value to field
 * GpioC6_3.write(0x53);
 *
 * // Clear all of field
 * GpioC6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioC6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioC6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioC6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioC6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioCField = Field_T<GpioCInfo, left, right>;

/**
 * @brief Convenience template for GpioD. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioD
 * GpioD<3> GpioD3
 *
 * // Set as digital output
 * GpioD3.setOutput();
 *
 * // Set pin high
 * GpioD3.set();
 *
 * // Set pin low
 * GpioD3.clear();
 *
 * // Toggle pin
 * GpioD3.toggle();
 *
 * // Set pin to boolean value
 * GpioD3.write(true);
 *
 * // Set pin to boolean value
 * GpioD3.write(false);
 *
 * // Set as digital input
 * GpioD3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioD3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioD = Gpio_T<GpioDInfo, bitNum>;

/**
 * @brief Convenience template for GpioD fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioD
 * GpioDField<6,3> GpioD6_3
 *
 * // Set as digital output
 * GpioD6_3.setOutput();
 *
 * // Write value to field
 * GpioD6_3.write(0x53);
 *
 * // Clear all of field
 * GpioD6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioD6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioD6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioD6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioD6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioDField = Field_T<GpioDInfo, left, right>;

using gpio_D13             = const USBDM::GpioD<1>;
using gpio_LED_BLUE        = const USBDM::GpioD<1>;
using gpio_D12             = const USBDM::GpioD<3>;
/**
 * @brief Convenience template for GpioE. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioE
 * GpioE<3> GpioE3
 *
 * // Set as digital output
 * GpioE3.setOutput();
 *
 * // Set pin high
 * GpioE3.set();
 *
 * // Set pin low
 * GpioE3.clear();
 *
 * // Toggle pin
 * GpioE3.toggle();
 *
 * // Set pin to boolean value
 * GpioE3.write(true);
 *
 * // Set pin to boolean value
 * GpioE3.write(false);
 *
 * // Set as digital input
 * GpioE3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioE3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioE = Gpio_T<GpioEInfo, bitNum>;

/**
 * @brief Convenience template for GpioE fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioE
 * GpioEField<6,3> GpioE6_3
 *
 * // Set as digital output
 * GpioE6_3.setOutput();
 *
 * // Write value to field
 * GpioE6_3.write(0x53);
 *
 * // Clear all of field
 * GpioE6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioE6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioE6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioE6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioE6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioEField = Field_T<GpioEInfo, left, right>;

/** 
 * End GPIO_Group
 * @}
 */
/**
 * Used to configure pin-mapping before 1st use of peripherals
 */
extern void usbdm_PinMapping();

} // End namespace USBDM
/**
 *
 * @mainpage Summary
 *
 * @section PinsByPinName Pins by Pin Name
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  PTA0                     | SWD_CLK                                     |                           | Reserved(SWD)       
 *  PTA1                     | UART0_RX                                    | D0/ConRx                  | USB_serial       
 *  PTA2                     | UART0_TX                                    | D1/ConTx                  | USB_serial       
 *  PTA3                     | SWD_DIO                                     |                           | Reserved(SWD)       
 *  PTA4                     | GPIOA_4                                     | D4                        | -       
 *  PTA5                     | GPIOA_5                                     | D5                        | -       
 *  PTA12                    | GPIOA_12                                    | D3                        | -       
 *  PTA13                    | GPIOA_13                                    | D8                        | -       
 *  PTA14                    | Disabled                                    |                           | -       
 *  PTA15                    | Disabled                                    |                           | -       
 *  PTA16                    | GPIOA_16                                    | D28                       | -       
 *  PTA17                    | GPIOA_17                                    | D29                       | -       
 *  PTA18                    | EXTAL0                                      |                           | Reserved       
 *  PTA19                    | XTAL0                                       |                           | Reserved       
 *  PTB0                     | ADC0_SE8/TSI0_CH0                           | A0                        | -       
 *  PTB1                     | ADC0_SE9/TSI0_CH6                           | A1                        | -       
 *  PTB2                     | ADC0_SE12/TSI0_CH7                          | A2                        | -       
 *  PTB3                     | ADC0_SE13/TSI0_CH8                          | A3                        | -       
 *  PTB8                     | Disabled                                    | A20                       | -       
 *  PTB9                     | Disabled                                    | A19                       | -       
 *  PTB10                    | Disabled                                    | A18                       | -       
 *  PTB11                    | Disabled                                    | A17                       | -       
 *  PTB16                    | TSI0_CH9                                    |                           | Touch       
 *  PTB17                    | TSI0_CH10                                   |                           | Touch       
 *  PTB18                    | GPIOB_18                                    | LED_RED                   | Red LED       
 *  PTB19                    | GPIOB_19                                    | LED_GREEN                 | Green LED       
 *  PTC0                     | ADC0_SE14/TSI0_CH13                         | D17                       | -       
 *  PTC1                     | ADC0_SE15/TSI0_CH14                         | A5                        | -       
 *  PTC2                     | ADC0_SE11/TSI0_CH15                         | A4                        | -       
 *  PTC3                     | Disabled                                    | D18                       | -       
 *  PTC4                     | Disabled                                    | D19                       | -       
 *  PTC5                     | Disabled                                    | D20                       | -       
 *  PTC6                     | CMP0_IN0                                    | D21                       | -       
 *  PTC7                     | CMP0_IN1                                    | D16                       | -       
 *  PTC8                     | CMP0_IN2                                    | D6                        | -       
 *  PTC9                     | CMP0_IN3                                    | D7                        | -       
 *  PTC10                    | Disabled                                    | D22                       | -       
 *  PTC11                    | Disabled                                    | D23                       | -       
 *  PTC12                    | Disabled                                    | D24                       | -       
 *  PTC13                    | Disabled                                    | D25                       | -       
 *  PTC16                    | Disabled                                    | D26                       | -       
 *  PTC17                    | Disabled                                    | D27                       | -       
 *  PTD0                     | Disabled                                    | D10                       | -       
 *  PTD1                     | GPIOD_1                                     | D13/LED_BLUE              | Blue LED       
 *  PTD2                     | Disabled                                    | D11                       | -       
 *  PTD3                     | GPIOD_3                                     | D12                       | -       
 *  PTD4                     | Disabled                                    | D2                        | -       
 *  PTD5                     | ADC0_SE6b                                   | D9                        | -       
 *  PTD6                     | ADC0_SE7b                                   | D32                       | -       
 *  PTD7                     | Disabled                                    | D33                       | -       
 *  PTE0                     | Disabled                                    | D15                       | -       
 *  PTE1                     | Disabled                                    | D14                       | -       
 *  PTE2                     | Disabled                                    | A16                       | -       
 *  PTE3                     | Disabled                                    | A15                       | -       
 *  PTE4                     | Disabled                                    | A14                       | -       
 *  PTE5                     | Disabled                                    | A13                       | -       
 *  PTE20                    | ADC0_DP0/ADC0_SE0                           | A11                       | -       
 *  PTE21                    | ADC0_DM0/ADC0_SE4a                          | A10                       | -       
 *  PTE22                    | ADC0_DP3/ADC0_SE3                           | A9                        | -       
 *  PTE23                    | ADC0_DM3/ADC0_SE7a                          | A8                        | -       
 *  PTE24                    | I2C0_SCL                                    | ACCEL_SCL                 | Accelerometer - SCL       
 *  PTE25                    | I2C0_SDA                                    | ACCEL_SDA                 | Accelerometer - SDA       
 *  PTE29                    | CMP0_IN5/ADC0_SE4b                          | A7                        | -       
 *  PTE30                    | DAC0_OUT/ADC0_SE23/CMP0_IN4                 | A6                        | -       
 *  PTE31                    | Disabled                                    | D30                       | -       
 *  RESET_b                  | RESET_b                                     |                           | -       
 *  USB0_DM                  | USB0_DM                                     |                           | -       
 *  USB0_DP                  | USB0_DP                                     |                           | -       
 *  VDD1                     | VDD1                                        |                           | -       
 *  VDD2                     | VDD2                                        |                           | -       
 *  VDD3                     | VDD3                                        |                           | -       
 *  VDDA                     | VDDA                                        |                           | -       
 *  VOUT33                   | VOUT33                                      |                           | -       
 *  VREFH                    | VREFH                                       |                           | -       
 *  VREFL                    | VREFL                                       |                           | -       
 *  VREGIN                   | VREGIN                                      |                           | -       
 *  VSS1                     | VSS1                                        |                           | -       
 *  VSS2                     | VSS2                                        |                           | -       
 *  VSS3                     | VSS3                                        |                           | -       
 *  VSSA                     | VSSA                                        |                           | -       
 *
 *
 * @section PinsByLocation Pins by Location
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  PTB0                     | ADC0_SE8/TSI0_CH0                           | A0                        | -       
 *  PTB1                     | ADC0_SE9/TSI0_CH6                           | A1                        | -       
 *  PTB2                     | ADC0_SE12/TSI0_CH7                          | A2                        | -       
 *  PTB3                     | ADC0_SE13/TSI0_CH8                          | A3                        | -       
 *  PTC2                     | ADC0_SE11/TSI0_CH15                         | A4                        | -       
 *  PTC1                     | ADC0_SE15/TSI0_CH14                         | A5                        | -       
 *  PTE30                    | DAC0_OUT/ADC0_SE23/CMP0_IN4                 | A6                        | -       
 *  PTE29                    | CMP0_IN5/ADC0_SE4b                          | A7                        | -       
 *  PTE23                    | ADC0_DM3/ADC0_SE7a                          | A8                        | -       
 *  PTE22                    | ADC0_DP3/ADC0_SE3                           | A9                        | -       
 *  PTE21                    | ADC0_DM0/ADC0_SE4a                          | A10                       | -       
 *  PTE20                    | ADC0_DP0/ADC0_SE0                           | A11                       | -       
 *  PTE5                     | Disabled                                    | A13                       | -       
 *  PTE4                     | Disabled                                    | A14                       | -       
 *  PTE3                     | Disabled                                    | A15                       | -       
 *  PTE2                     | Disabled                                    | A16                       | -       
 *  PTB11                    | Disabled                                    | A17                       | -       
 *  PTB10                    | Disabled                                    | A18                       | -       
 *  PTB9                     | Disabled                                    | A19                       | -       
 *  PTB8                     | Disabled                                    | A20                       | -       
 *  PTE24                    | I2C0_SCL                                    | ACCEL_SCL                 | Accelerometer - SCL       
 *  PTE25                    | I2C0_SDA                                    | ACCEL_SDA                 | Accelerometer - SDA       
 *  PTA1                     | UART0_RX                                    | D0/ConRx                  | USB_serial       
 *  PTA2                     | UART0_TX                                    | D1/ConTx                  | USB_serial       
 *  PTD4                     | Disabled                                    | D2                        | -       
 *  PTA12                    | GPIOA_12                                    | D3                        | -       
 *  PTA4                     | GPIOA_4                                     | D4                        | -       
 *  PTA5                     | GPIOA_5                                     | D5                        | -       
 *  PTC8                     | CMP0_IN2                                    | D6                        | -       
 *  PTC9                     | CMP0_IN3                                    | D7                        | -       
 *  PTA13                    | GPIOA_13                                    | D8                        | -       
 *  PTD5                     | ADC0_SE6b                                   | D9                        | -       
 *  PTD0                     | Disabled                                    | D10                       | -       
 *  PTD2                     | Disabled                                    | D11                       | -       
 *  PTD3                     | GPIOD_3                                     | D12                       | -       
 *  PTD1                     | GPIOD_1                                     | D13/LED_BLUE              | Blue LED       
 *  PTE1                     | Disabled                                    | D14                       | -       
 *  PTE0                     | Disabled                                    | D15                       | -       
 *  PTC7                     | CMP0_IN1                                    | D16                       | -       
 *  PTC0                     | ADC0_SE14/TSI0_CH13                         | D17                       | -       
 *  PTC3                     | Disabled                                    | D18                       | -       
 *  PTC4                     | Disabled                                    | D19                       | -       
 *  PTC5                     | Disabled                                    | D20                       | -       
 *  PTC6                     | CMP0_IN0                                    | D21                       | -       
 *  PTC10                    | Disabled                                    | D22                       | -       
 *  PTC11                    | Disabled                                    | D23                       | -       
 *  PTC12                    | Disabled                                    | D24                       | -       
 *  PTC13                    | Disabled                                    | D25                       | -       
 *  PTC16                    | Disabled                                    | D26                       | -       
 *  PTC17                    | Disabled                                    | D27                       | -       
 *  PTA16                    | GPIOA_16                                    | D28                       | -       
 *  PTA17                    | GPIOA_17                                    | D29                       | -       
 *  PTE31                    | Disabled                                    | D30                       | -       
 *  PTD6                     | ADC0_SE7b                                   | D32                       | -       
 *  PTD7                     | Disabled                                    | D33                       | -       
 *  PTB19                    | GPIOB_19                                    | LED_GREEN                 | Green LED       
 *  PTB18                    | GPIOB_18                                    | LED_RED                   | Red LED       
 *
 *
 * @section PinsByFunction Pins by Function
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  PTE21                    | ADC0_DM0/ADC0_SE4a                          | A10                       | -       
 *  PTE23                    | ADC0_DM3/ADC0_SE7a                          | A8                        | -       
 *  PTE20                    | ADC0_DP0/ADC0_SE0                           | A11                       | -       
 *  PTE22                    | ADC0_DP3/ADC0_SE3                           | A9                        | -       
 *  PTD5                     | ADC0_SE6b                                   | D9                        | -       
 *  PTD6                     | ADC0_SE7b                                   | D32                       | -       
 *  PTB0                     | ADC0_SE8/TSI0_CH0                           | A0                        | -       
 *  PTB1                     | ADC0_SE9/TSI0_CH6                           | A1                        | -       
 *  PTC2                     | ADC0_SE11/TSI0_CH15                         | A4                        | -       
 *  PTB2                     | ADC0_SE12/TSI0_CH7                          | A2                        | -       
 *  PTB3                     | ADC0_SE13/TSI0_CH8                          | A3                        | -       
 *  PTC0                     | ADC0_SE14/TSI0_CH13                         | D17                       | -       
 *  PTC1                     | ADC0_SE15/TSI0_CH14                         | A5                        | -       
 *  PTC6                     | CMP0_IN0                                    | D21                       | -       
 *  PTC7                     | CMP0_IN1                                    | D16                       | -       
 *  PTC8                     | CMP0_IN2                                    | D6                        | -       
 *  PTC9                     | CMP0_IN3                                    | D7                        | -       
 *  PTE29                    | CMP0_IN5/ADC0_SE4b                          | A7                        | -       
 *  PTE30                    | DAC0_OUT/ADC0_SE23/CMP0_IN4                 | A6                        | -       
 *  PTE31                    | Disabled                                    | D30                       | -       
 *  PTA18                    | EXTAL0                                      |                           | Reserved       
 *  PTA4                     | GPIOA_4                                     | D4                        | -       
 *  PTA5                     | GPIOA_5                                     | D5                        | -       
 *  PTA12                    | GPIOA_12                                    | D3                        | -       
 *  PTA13                    | GPIOA_13                                    | D8                        | -       
 *  PTA16                    | GPIOA_16                                    | D28                       | -       
 *  PTA17                    | GPIOA_17                                    | D29                       | -       
 *  PTB18                    | GPIOB_18                                    | LED_RED                   | Red LED       
 *  PTB19                    | GPIOB_19                                    | LED_GREEN                 | Green LED       
 *  PTD1                     | GPIOD_1                                     | D13/LED_BLUE              | Blue LED       
 *  PTD3                     | GPIOD_3                                     | D12                       | -       
 *  PTE24                    | I2C0_SCL                                    | ACCEL_SCL                 | Accelerometer - SCL       
 *  PTE25                    | I2C0_SDA                                    | ACCEL_SDA                 | Accelerometer - SDA       
 *  RESET_b                  | RESET_b                                     |                           | -       
 *  PTA0                     | SWD_CLK                                     |                           | Reserved(SWD)       
 *  PTA3                     | SWD_DIO                                     |                           | Reserved(SWD)       
 *  PTB16                    | TSI0_CH9                                    |                           | Touch       
 *  PTB17                    | TSI0_CH10                                   |                           | Touch       
 *  PTA1                     | UART0_RX                                    | D0/ConRx                  | USB_serial       
 *  PTA2                     | UART0_TX                                    | D1/ConTx                  | USB_serial       
 *  USB0_DM                  | USB0_DM                                     |                           | -       
 *  USB0_DP                  | USB0_DP                                     |                           | -       
 *  VDD1                     | VDD1                                        |                           | -       
 *  VDD2                     | VDD2                                        |                           | -       
 *  VDD3                     | VDD3                                        |                           | -       
 *  VDDA                     | VDDA                                        |                           | -       
 *  VOUT33                   | VOUT33                                      |                           | -       
 *  VREFH                    | VREFH                                       |                           | -       
 *  VREFL                    | VREFL                                       |                           | -       
 *  VREGIN                   | VREGIN                                      |                           | -       
 *  VSS1                     | VSS1                                        |                           | -       
 *  VSS2                     | VSS2                                        |                           | -       
 *  VSS3                     | VSS3                                        |                           | -       
 *  VSSA                     | VSSA                                        |                           | -       
 *  PTA19                    | XTAL0                                       |                           | Reserved       
 *
 */

#endif /* PROJECT_HEADERS_PIN_MAPPING_H */
