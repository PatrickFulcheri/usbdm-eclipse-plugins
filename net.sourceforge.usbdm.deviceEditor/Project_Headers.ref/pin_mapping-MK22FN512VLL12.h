/**
 * @file      pin_mapping.h (derived from MK22F51212.csv)
 * @version   1.2.0
 * @brief     Pin declarations for MK22FN512VLL12
 *
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically from Configure.hardware.
 * Any manual changes will be lost.
 */
#ifndef PROJECT_HEADERS_PIN_MAPPING_H
#define PROJECT_HEADERS_PIN_MAPPING_H

#include <stddef.h>
#include "derivative.h"

/*
 * Common Mux settings for PCR
 */
#undef FIXED_ADC_FN            
#undef FIXED_GPIO_FN           
#undef FIXED_PORT_CLOCK_REG    
#define FIXED_ADC_FN             0                    // Fixed ADC Multiplexing value
#define FIXED_GPIO_FN            1                    // Fixed GPIO Multiplexing value
#define FIXED_PORT_CLOCK_REG     SCGC5                // Fixed PORT Clock

/*
 * Peripheral clock macros
 */
#define PORT_CLOCK_REG       SCGC5

namespace USBDM {

/*
 * Peripheral Information Classes
 */
/**
 * @addtogroup 0_Group 0, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End 0_Group
 * @}
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Pins used for Analogue Input
 * @{
 */
/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ADC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_ADC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* ADC0_SE0        = ADC0_DP0 (18)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC0_SE3        = ADC1_DP0 (20)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* ADC0_SE4b       = PTC2 (72)                      */  { PORTC_CLOCK_MASK, PORTC_BasePtr,  GPIOC_BasePtr,  2,   0  },
         /* ADC0_SE5b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE6b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE7b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE8        = PTB0 (53)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  0,   0  },
         /* ADC0_SE9        = PTB1 (54)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  1,   0  },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC0_SE12       = PTB2 (55)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  2,   0  },
         /* ADC0_SE13       = PTB3 (56)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  3,   0  },
         /* ADC0_SE14       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE15       = PTC1 (71)                      */  { PORTC_CLOCK_MASK, PORTC_BasePtr,  GPIOC_BasePtr,  1,   0  },
         /* ADC0_SE16       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE17       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE18       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE19       = ADC0_DM0 (19)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC0_SE21       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE22       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE23       = DAC0_OUT (27)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
   };
   class InfoDP {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* ADC0_DP0        = ADC0_DP0 (18)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC0_DP1        = ADC0_DP1 (14)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC0_DP2        = ADC1_DP1 (16)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC0_DP3        = ADC1_DP0 (20)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };
   }; 
   class InfoDM {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* ADC0_DM0        = ADC0_DM0 (19)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC0_DM1        = ADC0_DM1 (15)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC0_DM2        = ADC1_DM1 (17)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC0_DM3        = ADC1_DM0 (21)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };
   }; 
};

/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ADC1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_ADC1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC1_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* ADC1_SE0        = ADC1_DP0 (20)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC1_SE4b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE5b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE6b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE7b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE8        = PTB0 (53)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  0,   0  },
         /* ADC1_SE9        = PTB1 (54)                      */  { PORTB_CLOCK_MASK, PORTB_BasePtr,  GPIOB_BasePtr,  1,   0  },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC1_SE12       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE13       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE14       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE15       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE16       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE17       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE18       = VREF_OUT (26)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* ADC1_SE19       = ADC1_DM0 (21)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC1_SE23       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC1_SE4a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE5a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE6a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE7a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
   class InfoDP {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* ADC1_DP0        = ADC1_DP0 (20)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC1_DP1        = ADC1_DP1 (16)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /* ADC1_DP3        = ADC0_DP0 (18)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };
   }; 
   class InfoDM {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* ADC1_DM0        = ADC1_DM0 (21)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC1_DM1        = ADC1_DM1 (17)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /* ADC1_DM3        = ADC0_DM0 (19)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };
   }; 
};

/** 
 * End ADC_Group
 * @}
 */
/**
 * @addtogroup CLKOUT_Group CLKOUT, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End CLKOUT_Group
 * @}
 */
/**
 * @addtogroup CMP_Group CMP, Analogue Comparator
 * @brief Pins used for Analogue Comparator
 * @{
 */
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {CMP0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* CMP0_IN0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN4        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN5        = VREF_OUT (26)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* CMP0_OUT        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {CMP1_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* CMP1_IN0        = PTC2 (72)                      */  { PORTC_CLOCK_MASK, PORTC_BasePtr,  GPIOC_BasePtr,  2,   0  },
         /* CMP1_IN1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP1_IN2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP1_IN3        = DAC0_OUT (27)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* CMP1_IN5        = VREF_OUT (26)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* CMP1_OUT        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End CMP_Group
 * @}
 */
/**
 * @addtogroup DAC_Misc_Group DAC, DAC0 (Miscellaneous)
 * @brief Pins used for DAC0 (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for DAC, DAC0 (Miscellaneous)
 */
class Dac0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DAC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DAC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {DAC0_IRQn};

};

/** 
 * End DAC_Misc_Group
 * @}
 */
/**
 * @addtogroup DMA_Misc_Group DMA, DMA0 (Miscellaneous)
 * @brief Pins used for DMA0 (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for DMA, DMA0 (Miscellaneous)
 */
class Dma0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMA0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_DMA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End DMA_Misc_Group
 * @}
 */
/**
 * @addtogroup DMAMUX_Group DMAMUX, Direct Memory Access (DMA)
 * @brief Pins used for Direct Memory Access (DMA)
 * @{
 */
/**
 * Peripheral information for DMAMUX, Direct Memory Access (DMA)
 */
class Dmamux0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMAMUX0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DMAMUX0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End DMAMUX_Group
 * @}
 */
/**
 * @addtogroup EWM_Misc_Group EWM, EWM (Miscellaneous)
 * @brief Pins used for EWM (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for EWM, EWM (Miscellaneous)
 */
class EwmInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = EWM_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_EWM_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End EWM_Misc_Group
 * @}
 */
/**
 * @addtogroup FB_Misc_Group FB, FB (Miscellaneous)
 * @brief Pins used for FB (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for FB, FB (Miscellaneous)
 */
class FbInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FB_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_FLEXBUS_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End FB_Misc_Group
 * @}
 */
/**
 * @addtogroup FTM_Misc_Group FTM, FTM (Miscellaneous)
 * @brief Pins used for FTM (Miscellaneous)
 * @{
 */
/** 
 * End FTM_Misc_Group
 * @}
 */
/**
 * @addtogroup FTM_Group FTM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM0_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = FTM_SC_CLKS(1)|FTM_SC_PS(0);

   static constexpr int NUM_CHANNELS  = 8;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* FTM0_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM0_CH1        = PTA4 (38)                      */  { PORTA_CLOCK_MASK, PORTA_BasePtr,  GPIOA_BasePtr,  4,   3  },
         /* FTM0_CH2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM0_CH3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM0_CH4        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM0_CH5        = PTD5 (98)                      */  { PORTD_CLOCK_MASK, PORTD_BasePtr,  GPIOD_BasePtr,  5,   4  },
         /* FTM0_CH6        = PTA1 (35)                      */  { PORTA_CLOCK_MASK, PORTA_BasePtr,  GPIOA_BasePtr,  1,   3  },
         /* FTM0_CH7        = PTA2 (36)                      */  { PORTA_CLOCK_MASK, PORTA_BasePtr,  GPIOA_BasePtr,  2,   3  },
   };
   class InfoFAULT {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM0_FLT0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* FTM0_FLT1       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* FTM0_FLT2       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* FTM0_FLT3       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
};

/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM1_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = FTM_SC_CLKS(1)|FTM_SC_PS(0);

   static constexpr int NUM_CHANNELS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* FTM1_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM1_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
   class InfoFAULT {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM1_FLT0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
   class InfoQUAD {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM1_QD_PHA     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* FTM1_QD_PHB     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
};

/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM2_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = FTM_SC_CLKS(1)|FTM_SC_PS(0);

   static constexpr int NUM_CHANNELS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* FTM2_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM2_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
   class InfoFAULT {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM2_FLT0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
   class InfoQUAD {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM2_QD_PHA     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* FTM2_QD_PHB     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
};

/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm3Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM3_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = FTM_SC_CLKS(1)|FTM_SC_PS(0);

   static constexpr int NUM_CHANNELS  = 8;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* FTM3_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH4        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH5        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH6        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH7        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
   class InfoFAULT {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM3_FLT0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
};

/** 
 * End FTM_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioAInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTA_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOA_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTA_IRQn};

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioBInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTB_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOB_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTB_IRQn};

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioCInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTC_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOC_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTC_IRQn};

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioDInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTD_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOD_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTD_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTD_IRQn};

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioEInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTE_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOE_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTE_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTE_IRQn};

};

/** 
 * End GPIO_Group
 * @}
 */
/**
 * @addtogroup I2C_Group I2C, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* I2C0_SCL        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2C0_SDA        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C1_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* I2C1_SCL        = PTE1 (2)                       */  { PORTE_CLOCK_MASK, PORTE_BasePtr,  GPIOE_BasePtr,  1,   6  },
         /* I2C1_SDA        = PTE0 (1)                       */  { PORTE_CLOCK_MASK, PORTE_BasePtr,  GPIOE_BasePtr,  0,   6  },
   };
};

/** 
 * End I2C_Group
 * @}
 */
/**
 * @addtogroup I2S_Group I2S, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
/**
 * Peripheral information for I2S, Inter-Integrated-Circuit Interface
 */
class I2s0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2S0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_I2S_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2S0_Tx_IRQn, I2S0_Rx_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* I2S0_MCLK       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_RX_BCLK    = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_RX_FS      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_TX_BCLK    = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_TX_FS      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End I2S_Group
 * @}
 */
/**
 * @addtogroup JTAG_Group JTAG, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End JTAG_Group
 * @}
 */
/**
 * @addtogroup LLWU_Group LLWU, Low-leakage Wake-up Unit
 * @brief Pins used for Low-leakage Wake-up Unit
 * @{
 */
/**
 * Peripheral information for LLWU, Low-leakage Wake-up Unit
 */
class LlwuInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LLWU_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* LLWU_P0         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P1         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P2         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P3         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P4         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P5         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P6         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P7         = PTC3 (73)                      */  { PORTC_CLOCK_MASK, PORTC_BasePtr,  GPIOC_BasePtr,  3,   1  },
         /* LLWU_P8         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P9         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P10        = PTC6 (78)                      */  { PORTC_CLOCK_MASK, PORTC_BasePtr,  GPIOC_BasePtr,  6,   1  },
         /* LLWU_P11        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P12        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P13        = PTD2 (95)                      */  { PORTD_CLOCK_MASK, PORTD_BasePtr,  GPIOD_BasePtr,  2,   1  },
         /* LLWU_P14        = PTD4 (97)                      */  { PORTD_CLOCK_MASK, PORTD_BasePtr,  GPIOD_BasePtr,  4,   1  },
         /* LLWU_P15        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End LLWU_Group
 * @}
 */
/**
 * @addtogroup LPTMR_Group LPTMR, Low Power Timer
 * @brief Pins used for Low Power Timer
 * @{
 */
/**
 * Peripheral information for LPTMR, Low Power Timer
 */
class Lptmr0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LPTMR0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_LPTMR_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LPTMR0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* LPTMR0_ALT1     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LPTMR0_ALT2     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End LPTMR_Group
 * @}
 */
/**
 * @addtogroup LPUART_Group LPUART, Low Power Universal Asynchonous Receiver/Transmitter
 * @brief Pins used for Universal Asynchonous Receiver/Transmitter
 * @{
 */
/**
 * Peripheral information for LPUART, Low Power Universal Asynchonous Receiver/Transmitter
 */
class Lpuart0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LPUART0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_LPUART0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LPUART0_RX_TX_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* LPUART0_TX      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LPUART0_RX      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LPUART0_RTS_b   = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LPUART0_CTS_b   = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End LPUART_Group
 * @}
 */
/**
 * @addtogroup NMI_B_Group NMI_b, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End NMI_B_Group
 * @}
 */
/**
 * @addtogroup OSC0_Group OSC0, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End OSC0_Group
 * @}
 */
/**
 * @addtogroup OSC32_Group OSC32, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End OSC32_Group
 * @}
 */
/**
 * @addtogroup PDB_Misc_Group PDB, PDB0 (Miscellaneous)
 * @brief Pins used for PDB0 (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for PDB, PDB0 (Miscellaneous)
 */
class Pdb0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = PDB0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PDB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PDB0_IRQn};

};

/** 
 * End PDB_Misc_Group
 * @}
 */
/**
 * @addtogroup PIT_Group PIT, Programmable Interrupt Timer
 * @brief Pins used for Programmable Interrupt Timer
 * @{
 */
/**
 * Peripheral information for PIT, Programmable Interrupt Timer
 */
class PitInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = PIT_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PIT_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 4;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PIT0_IRQn, PIT1_IRQn, PIT2_IRQn, PIT3_IRQn};

   //! Default value for PIT->SC register
   static constexpr uint32_t pitLoadValue  = 2000;

};

/** 
 * End PIT_Group
 * @}
 */
/**
 * @addtogroup RESET_B_Group RESET_b, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End RESET_B_Group
 * @}
 */
/**
 * @addtogroup RNG_Group RNG, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End RNG_Group
 * @}
 */
/**
 * @addtogroup RTC_Group RTC, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End RTC_Group
 * @}
 */
/**
 * @addtogroup SPI_Group SPI, Serial Peripheral Interface
 * @brief Pins used for Serial Peripheral Interface
 * @{
 */
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_SPI0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* SPI0_SCK        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_SIN        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_SOUT       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS1       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS2       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS3       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS4       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS5       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

using Spi0_PCS0 = USBDM::PcrTable_T<USBDM::Spi0Info, 3>;
using Spi0_PCS1 = USBDM::PcrTable_T<USBDM::Spi0Info, 4>;
using Spi0_PCS2 = USBDM::PcrTable_T<USBDM::Spi0Info, 5>;
using Spi0_PCS3 = USBDM::PcrTable_T<USBDM::Spi0Info, 6>;
using Spi0_PCS4 = USBDM::PcrTable_T<USBDM::Spi0Info, 7>;
using Spi0_PCS5 = USBDM::PcrTable_T<USBDM::Spi0Info, 8>;
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_SPI1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI1_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* SPI1_SCK        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_SIN        = PTD7 (100)                     */  { PORTD_CLOCK_MASK, PORTD_BasePtr,  GPIOD_BasePtr,  7,   7  },
         /* SPI1_SOUT       = PTD6 (99)                      */  { PORTD_CLOCK_MASK, PORTD_BasePtr,  GPIOD_BasePtr,  6,   7  },
         /* SPI1_PCS0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_PCS1       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_PCS2       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_PCS3       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

using Spi1_PCS0 = USBDM::PcrTable_T<USBDM::Spi1Info, 3>;
using Spi1_PCS1 = USBDM::PcrTable_T<USBDM::Spi1Info, 4>;
using Spi1_PCS2 = USBDM::PcrTable_T<USBDM::Spi1Info, 5>;
using Spi1_PCS3 = USBDM::PcrTable_T<USBDM::Spi1Info, 6>;
/** 
 * End SPI_Group
 * @}
 */
/**
 * @addtogroup SWD_Group SWD, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End SWD_Group
 * @}
 */
/**
 * @addtogroup TRACE_Group TRACE, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End TRACE_Group
 * @}
 */
/**
 * @addtogroup UART_Group UART, Universal Asynchonous Receiver/Transmitter
 * @brief Pins used for Universal Asynchonous Receiver/Transmitter
 * @{
 */
/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART0_RX_TX_IRQn, UART0_ERR_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART0_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART0_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART0_RTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART0_CTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART1_RX_TX_IRQn, UART1_ERR_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART1_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART1_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART1_RTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART1_CTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART2_RX_TX_IRQn, UART2_ERR_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART2_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART2_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART2_RTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART2_CTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End UART_Group
 * @}
 */
/**
 * @addtogroup USB_Misc_Group USB, USB0 (Miscellaneous)
 * @brief Pins used for USB0 (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for USB, USB0 (Miscellaneous)
 */
class Usb0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = USB0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_USBOTG_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {USB0_IRQn};

};

/** 
 * End USB_Misc_Group
 * @}
 */
/**
 * @addtogroup VBAT_Group VBAT, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VBAT_Group
 * @}
 */
/**
 * @addtogroup VDD_Misc_Group VDD, VDD (Miscellaneous)
 * @brief Pins used for VDD (Miscellaneous)
 * @{
 */
/** 
 * End VDD_Misc_Group
 * @}
 */
/**
 * @addtogroup VDDA_Group VDDA, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VDDA_Group
 * @}
 */
/**
 * @addtogroup VOUT33_Group VOUT33, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VOUT33_Group
 * @}
 */
/**
 * @addtogroup VREF_Group VREF, Voltage Reference
 * @brief Pins used for Voltage Reference
 * @{
 */
/**
 * Peripheral information for VREF, Voltage Reference
 */
class VrefInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = VREF_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_VREF_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* VREF_OUT        = VREF_OUT (26)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
   };
};

/** 
 * End VREF_Group
 * @}
 */
/**
 * @addtogroup VREFH_Group VREFH, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREFH_Group
 * @}
 */
/**
 * @addtogroup VREFL_Group VREFL, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREFL_Group
 * @}
 */
/**
 * @addtogroup VREGIN_Group VREGIN, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREGIN_Group
 * @}
 */
/**
 * @addtogroup VSS_Misc_Group VSS, VSS (Miscellaneous)
 * @brief Pins used for VSS (Miscellaneous)
 * @{
 */
/** 
 * End VSS_Misc_Group
 * @}
 */
/**
 * @addtogroup VSS1A_Group VSS1a, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VSS1A_Group
 * @}
 */
/**
 * @addtogroup VSSA_Group VSSA, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VSSA_Group
 * @}
 */

} // End namespace USBDM

#include "gpio_defs.h"

namespace USBDM {

/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Pins used for Analogue Input
 * @{
 */
/**
 * Convenience templated class representing an ADC
 *
 * Example
 * @code
 *  // Instantiate ADC0 single-ended channel #8
 *  const adc0<8> adc0_se8;
 *
 *  // Initialise ADC
 *  adc0_se8.initialiseADC(USBDM::resolution_12bit_se);
 *
 *  // Set as analogue input
 *  adc0_se8.setAnalogueInput();
 *
 *  // Read input
 *  uint16_t value = adc0_se8.readAnalogue();
 *  @endcode
 *
 * @tparam adcChannel    ADC channel
 */
template<uint8_t channel> using Adc0 = Adc_T<Adc0Info, channel>;

using adc_19               = const USBDM::Adc0<19>;
using adc_18               = const USBDM::Adc0<0>;
using adc_20               = const USBDM::Adc0<3>;
using adc_27               = const USBDM::Adc0<23>;
using adc_53               = const USBDM::Adc0<8>;
using adc_54               = const USBDM::Adc0<9>;
using adc_55               = const USBDM::Adc0<12>;
using adc_56               = const USBDM::Adc0<13>;
using adc_71               = const USBDM::Adc0<15>;
using adc_72               = const USBDM::Adc0<4>;
/**
 * Convenience templated class representing an ADC
 *
 * Example
 * @code
 *  // Instantiate ADC0 single-ended channel #8
 *  const adc0<8> adc0_se8;
 *
 *  // Initialise ADC
 *  adc0_se8.initialiseADC(USBDM::resolution_12bit_se);
 *
 *  // Set as analogue input
 *  adc0_se8.setAnalogueInput();
 *
 *  // Read input
 *  uint16_t value = adc0_se8.readAnalogue();
 *  @endcode
 *
 * @tparam adcChannel    ADC channel
 */
template<uint8_t channel> using Adc1 = Adc_T<Adc1Info, channel>;

using adc_21               = const USBDM::Adc1<19>;
//using adc_20               = const USBDM::Adc1<0>;
//using adc_53               = const USBDM::Adc1<8>;
//using adc_54               = const USBDM::Adc1<9>;
using adc_26               = const USBDM::Adc1<18>;
/** 
 * End ADC_Group
 * @}
 */
/**
 * @addtogroup FTM_Group FTM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */
/**
 * Convenience template class representing a FTM
 *
 * Example
 * @code
 * // Instantiate the ftm channel (for FTM0 CH6)
 * const USBDM::Ftm0<6>   ftm0_ch6;
 *
 * // Initialise PWM with initial period and alignment
 * ftm0_ch6.setPwmOutput(200, USBDM::ftm_leftAlign);
 *
 * // Change period (in ticks)
 * ftm0_ch6.setPeriod(500);
 *
 * // Change duty cycle (in percent)
 * ftm0_ch6.setDutyCycle(45);
 * @endcode
 *
 * @tparam channel    Timer channel
 */
template<uint8_t channel> using Ftm0 = TmrBase_T<Ftm0Info, channel>;

using ftm_35               = const USBDM::Ftm0<6>;
using ftm_36               = const USBDM::Ftm0<7>;
using ftm_38               = const USBDM::Ftm0<1>;
using ftm_98               = const USBDM::Ftm0<5>;
/**
 * Convenience template class representing a FTM
 *
 * Example
 * @code
 * // Instantiate the ftm channel (for FTM0 CH6)
 * const USBDM::Ftm0<6>   ftm0_ch6;
 *
 * // Initialise PWM with initial period and alignment
 * ftm0_ch6.setPwmOutput(200, USBDM::ftm_leftAlign);
 *
 * // Change period (in ticks)
 * ftm0_ch6.setPeriod(500);
 *
 * // Change duty cycle (in percent)
 * ftm0_ch6.setDutyCycle(45);
 * @endcode
 *
 * @tparam channel    Timer channel
 */
template<uint8_t channel> using Ftm1 = TmrBase_T<Ftm1Info, channel>;

/**
 * Convenience template class representing a FTM
 *
 * Example
 * @code
 * // Instantiate the ftm channel (for FTM0 CH6)
 * const USBDM::Ftm0<6>   ftm0_ch6;
 *
 * // Initialise PWM with initial period and alignment
 * ftm0_ch6.setPwmOutput(200, USBDM::ftm_leftAlign);
 *
 * // Change period (in ticks)
 * ftm0_ch6.setPeriod(500);
 *
 * // Change duty cycle (in percent)
 * ftm0_ch6.setDutyCycle(45);
 * @endcode
 *
 * @tparam channel    Timer channel
 */
template<uint8_t channel> using Ftm2 = TmrBase_T<Ftm2Info, channel>;

/**
 * Convenience template class representing a FTM
 *
 * Example
 * @code
 * // Instantiate the ftm channel (for FTM0 CH6)
 * const USBDM::Ftm0<6>   ftm0_ch6;
 *
 * // Initialise PWM with initial period and alignment
 * ftm0_ch6.setPwmOutput(200, USBDM::ftm_leftAlign);
 *
 * // Change period (in ticks)
 * ftm0_ch6.setPeriod(500);
 *
 * // Change duty cycle (in percent)
 * ftm0_ch6.setDutyCycle(45);
 * @endcode
 *
 * @tparam channel    Timer channel
 */
template<uint8_t channel> using Ftm3 = TmrBase_T<Ftm3Info, channel>;

/** 
 * End FTM_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
/**
 * @brief Convenience template for GpioA. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioA
 * GpioA<3> GpioA3
 *
 * // Set as digital output
 * GpioA3.setOutput();
 *
 * // Set pin high
 * GpioA3.set();
 *
 * // Set pin low
 * GpioA3.clear();
 *
 * // Toggle pin
 * GpioA3.toggle();
 *
 * // Set pin to boolean value
 * GpioA3.write(true);
 *
 * // Set pin to boolean value
 * GpioA3.write(false);
 *
 * // Set as digital input
 * GpioA3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioA3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioA = Gpio_T<GpioAInfo, bitNum>;

/**
 * @brief Convenience template for GpioA fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioA
 * GpioAField<6,3> GpioA6_3
 *
 * // Set as digital output
 * GpioA6_3.setOutput();
 *
 * // Write value to field
 * GpioA6_3.write(0x53);
 *
 * // Clear all of field
 * GpioA6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioA6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioA6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioA6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioA6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioAField = Field_T<GpioAInfo, left, right>;

using gpio_39              = const USBDM::GpioA<5>;
/**
 * @brief Convenience template for GpioB. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioB
 * GpioB<3> GpioB3
 *
 * // Set as digital output
 * GpioB3.setOutput();
 *
 * // Set pin high
 * GpioB3.set();
 *
 * // Set pin low
 * GpioB3.clear();
 *
 * // Toggle pin
 * GpioB3.toggle();
 *
 * // Set pin to boolean value
 * GpioB3.write(true);
 *
 * // Set pin to boolean value
 * GpioB3.write(false);
 *
 * // Set as digital input
 * GpioB3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioB3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioB = Gpio_T<GpioBInfo, bitNum>;

/**
 * @brief Convenience template for GpioB fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioB
 * GpioBField<6,3> GpioB6_3
 *
 * // Set as digital output
 * GpioB6_3.setOutput();
 *
 * // Write value to field
 * GpioB6_3.write(0x53);
 *
 * // Clear all of field
 * GpioB6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioB6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioB6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioB6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioB6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioBField = Field_T<GpioBInfo, left, right>;

using gpio_62              = const USBDM::GpioB<16>;
using gpio_64              = const USBDM::GpioB<18>;
using gpio_65              = const USBDM::GpioB<19>;
/**
 * @brief Convenience template for GpioC. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioC
 * GpioC<3> GpioC3
 *
 * // Set as digital output
 * GpioC3.setOutput();
 *
 * // Set pin high
 * GpioC3.set();
 *
 * // Set pin low
 * GpioC3.clear();
 *
 * // Toggle pin
 * GpioC3.toggle();
 *
 * // Set pin to boolean value
 * GpioC3.write(true);
 *
 * // Set pin to boolean value
 * GpioC3.write(false);
 *
 * // Set as digital input
 * GpioC3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioC3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioC = Gpio_T<GpioCInfo, bitNum>;

/**
 * @brief Convenience template for GpioC fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioC
 * GpioCField<6,3> GpioC6_3
 *
 * // Set as digital output
 * GpioC6_3.setOutput();
 *
 * // Write value to field
 * GpioC6_3.write(0x53);
 *
 * // Clear all of field
 * GpioC6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioC6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioC6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioC6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioC6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioCField = Field_T<GpioCInfo, left, right>;

using gpio_73              = const USBDM::GpioC<3>;
using gpio_78              = const USBDM::GpioC<6>;
/**
 * @brief Convenience template for GpioD. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioD
 * GpioD<3> GpioD3
 *
 * // Set as digital output
 * GpioD3.setOutput();
 *
 * // Set pin high
 * GpioD3.set();
 *
 * // Set pin low
 * GpioD3.clear();
 *
 * // Toggle pin
 * GpioD3.toggle();
 *
 * // Set pin to boolean value
 * GpioD3.write(true);
 *
 * // Set pin to boolean value
 * GpioD3.write(false);
 *
 * // Set as digital input
 * GpioD3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioD3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioD = Gpio_T<GpioDInfo, bitNum>;

/**
 * @brief Convenience template for GpioD fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioD
 * GpioDField<6,3> GpioD6_3
 *
 * // Set as digital output
 * GpioD6_3.setOutput();
 *
 * // Write value to field
 * GpioD6_3.write(0x53);
 *
 * // Clear all of field
 * GpioD6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioD6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioD6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioD6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioD6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioDField = Field_T<GpioDInfo, left, right>;

using gpio_95              = const USBDM::GpioD<2>;
using gpio_96              = const USBDM::GpioD<3>;
using gpio_97              = const USBDM::GpioD<4>;
/**
 * @brief Convenience template for GpioE. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioE
 * GpioE<3> GpioE3
 *
 * // Set as digital output
 * GpioE3.setOutput();
 *
 * // Set pin high
 * GpioE3.set();
 *
 * // Set pin low
 * GpioE3.clear();
 *
 * // Toggle pin
 * GpioE3.toggle();
 *
 * // Set pin to boolean value
 * GpioE3.write(true);
 *
 * // Set pin to boolean value
 * GpioE3.write(false);
 *
 * // Set as digital input
 * GpioE3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioE3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioE = Gpio_T<GpioEInfo, bitNum>;

/**
 * @brief Convenience template for GpioE fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioE
 * GpioEField<6,3> GpioE6_3
 *
 * // Set as digital output
 * GpioE6_3.setOutput();
 *
 * // Write value to field
 * GpioE6_3.write(0x53);
 *
 * // Clear all of field
 * GpioE6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioE6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioE6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioE6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioE6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioEField = Field_T<GpioEInfo, left, right>;

/** 
 * End GPIO_Group
 * @}
 */
/**
 * Used to configure pin-mapping before 1st use of peripherals
 */
extern void usbdm_PinMapping();

} // End namespace USBDM
/**
 *
 * @mainpage Summary
 *
 * @section PinsByPinName Pins by Pin Name
 *
 *    Pin Name               |   Functions                                 |  Location           |  Description  
 *  ------------------------ | --------------------------------------------|---------------------| ------------- 
 *  ADC0_DM0                 | ADC0_DM0/ADC1_DM3/ADC0_SE19                 | 19                  | -       
 *  ADC0_DM1                 | ADC0_DM1                                    | 15                  | -       
 *  ADC0_DP0                 | ADC0_DP0/ADC1_DP3/ADC0_SE0                  | 18                  | -       
 *  ADC0_DP1                 | ADC0_DP1                                    | 14                  | -       
 *  ADC1_DM0                 | ADC1_DM0/ADC0_DM3/ADC1_SE19                 | 21                  | -       
 *  ADC1_DM1                 | ADC1_DM1/ADC0_DM2                           | 17                  | -       
 *  ADC1_DP0                 | ADC1_DP0/ADC0_DP3/ADC1_SE0/ADC0_SE3         | 20                  | -       
 *  ADC1_DP1                 | ADC1_DP1/ADC0_DP2                           | 16                  | -       
 *  DAC0_OUT                 | DAC0_OUT/CMP1_IN3/ADC0_SE23                 | 27                  | -       
 *  EXTAL32                  | EXTAL32                                     | 29                  | -       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | 34                  | -       
 *  PTA1                     | FTM0_CH6                                    | 35                  | -       
 *  PTA2                     | FTM0_CH7                                    | 36                  | -       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | 37                  | -       
 *  PTA4                     | FTM0_CH1                                    | 38                  | -       
 *  PTA5                     | GPIOA_5                                     | 39                  | -       
 *  PTA12                    | Disabled                                    | 42                  | -       
 *  PTA13                    | Disabled                                    | 43                  | -       
 *  PTA14                    | Disabled                                    | 44                  | -       
 *  PTA15                    | Disabled                                    | 45                  | -       
 *  PTA16                    | Disabled                                    | 46                  | -       
 *  PTA17                    | ADC1_SE17                                   | 47                  | -       
 *  PTA18                    | EXTAL0                                      | 50                  | -       
 *  PTA19                    | XTAL0                                       | 51                  | -       
 *  PTB0                     | ADC0_SE8/ADC1_SE8                           | 53                  | -       
 *  PTB1                     | ADC0_SE9/ADC1_SE9                           | 54                  | -       
 *  PTB2                     | ADC0_SE12                                   | 55                  | -       
 *  PTB3                     | ADC0_SE13                                   | 56                  | -       
 *  PTB9                     | Disabled                                    | 57                  | -       
 *  PTB10                    | ADC1_SE14                                   | 58                  | -       
 *  PTB11                    | ADC1_SE15                                   | 59                  | -       
 *  PTB16                    | GPIOB_16                                    | 62                  | -       
 *  PTB17                    | Disabled                                    | 63                  | -       
 *  PTB18                    | GPIOB_18                                    | 64                  | -       
 *  PTB19                    | GPIOB_19                                    | 65                  | -       
 *  PTB20                    | Disabled                                    | 66                  | -       
 *  PTB21                    | Disabled                                    | 67                  | -       
 *  PTB22                    | Disabled                                    | 68                  | -       
 *  PTB23                    | Disabled                                    | 69                  | -       
 *  PTC0                     | ADC0_SE14                                   | 70                  | -       
 *  PTC1                     | ADC0_SE15                                   | 71                  | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0                          | 72                  | -       
 *  PTC3                     | GPIOC_3/LLWU_P7                             | 73                  | -       
 *  PTC4                     | Disabled                                    | 76                  | -       
 *  PTC5                     | Disabled                                    | 77                  | -       
 *  PTC6                     | GPIOC_6/LLWU_P10                            | 78                  | -       
 *  PTC7                     | CMP0_IN1                                    | 79                  | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | 80                  | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | 81                  | -       
 *  PTC10                    | ADC1_SE6b                                   | 82                  | -       
 *  PTC11                    | ADC1_SE7b                                   | 83                  | -       
 *  PTC12                    | Disabled                                    | 84                  | -       
 *  PTC13                    | Disabled                                    | 85                  | -       
 *  PTC14                    | Disabled                                    | 86                  | -       
 *  PTC15                    | Disabled                                    | 87                  | -       
 *  PTC16                    | Disabled                                    | 90                  | -       
 *  PTC17                    | Disabled                                    | 91                  | -       
 *  PTC18                    | Disabled                                    | 92                  | -       
 *  PTD0                     | Disabled                                    | 93                  | -       
 *  PTD1                     | ADC0_SE5b                                   | 94                  | -       
 *  PTD2                     | GPIOD_2/LLWU_P13                            | 95                  | -       
 *  PTD3                     | GPIOD_3                                     | 96                  | -       
 *  PTD4                     | GPIOD_4/LLWU_P14                            | 97                  | -       
 *  PTD5                     | FTM0_CH5                                    | 98                  | -       
 *  PTD6                     | SPI1_SOUT                                   | 99                  | -       
 *  PTD7                     | SPI1_SIN                                    | 100                 | -       
 *  PTE0                     | I2C1_SDA                                    | 1                   | -       
 *  PTE1                     | I2C1_SCL                                    | 2                   | -       
 *  PTE2                     | ADC1_SE6a                                   | 3                   | -       
 *  PTE3                     | ADC1_SE7a                                   | 4                   | -       
 *  PTE4                     | Disabled                                    | 5                   | -       
 *  PTE5                     | Disabled                                    | 6                   | -       
 *  PTE6                     | Disabled                                    | 7                   | -       
 *  PTE24                    | ADC0_SE17                                   | 31                  | -       
 *  PTE25                    | ADC0_SE18                                   | 32                  | -       
 *  PTE26                    | Disabled                                    | 33                  | -       
 *  RESET_b                  | RESET_b                                     | 52                  | -       
 *  USB0_DM                  | USB0_DM                                     | 11                  | -       
 *  USB0_DP                  | USB0_DP                                     | 10                  | -       
 *  VBAT                     | VBAT                                        | 30                  | -       
 *  VDD1                     | VDD1                                        | 8                   | -       
 *  VDD2                     | VDD2                                        | 40                  | -       
 *  VDD3                     | VDD3                                        | 48                  | -       
 *  VDD4                     | VDD4                                        | 61                  | -       
 *  VDD5                     | VDD                                         | 75                  | -       
 *  VDD6                     | VDD6                                        | 89                  | -       
 *  VDDA                     | VDDA                                        | 22                  | -       
 *  VOUT33                   | VOUT33                                      | 12                  | -       
 *  VREFH                    | VREFH                                       | 23                  | -       
 *  VREFL                    | VREFL                                       | 24                  | -       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5/ADC1_SE18        | 26                  | -       
 *  VREGIN                   | VREGIN                                      | 13                  | -       
 *  VSS1                     | VSS1                                        | 9                   | -       
 *  VSS2                     | VSS2                                        | 41                  | -       
 *  VSS3                     | VSS3                                        | 49                  | -       
 *  VSS4                     | VSS4                                        | 60                  | -       
 *  VSS5                     | VSS                                         | 74                  | -       
 *  VSS6                     | VSS6                                        | 88                  | -       
 *  VSSA                     | VSSA                                        | 25                  | -       
 *  XTAL32                   | XTAL32                                      | 28                  | -       
 *
 *
 * @section PinsByLocation Pins by Location
 *
 *    Pin Name               |   Functions                                 |  Location           |  Description  
 *  ------------------------ | --------------------------------------------|---------------------| ------------- 
 *  PTE0                     | I2C1_SDA                                    | 1                   | -       
 *  PTE1                     | I2C1_SCL                                    | 2                   | -       
 *  PTE2                     | ADC1_SE6a                                   | 3                   | -       
 *  PTE3                     | ADC1_SE7a                                   | 4                   | -       
 *  PTE4                     | Disabled                                    | 5                   | -       
 *  PTE5                     | Disabled                                    | 6                   | -       
 *  PTE6                     | Disabled                                    | 7                   | -       
 *  VDD1                     | VDD1                                        | 8                   | -       
 *  VSS1                     | VSS1                                        | 9                   | -       
 *  USB0_DP                  | USB0_DP                                     | 10                  | -       
 *  USB0_DM                  | USB0_DM                                     | 11                  | -       
 *  VOUT33                   | VOUT33                                      | 12                  | -       
 *  VREGIN                   | VREGIN                                      | 13                  | -       
 *  ADC0_DP1                 | ADC0_DP1                                    | 14                  | -       
 *  ADC0_DM1                 | ADC0_DM1                                    | 15                  | -       
 *  ADC1_DP1                 | ADC1_DP1/ADC0_DP2                           | 16                  | -       
 *  ADC1_DM1                 | ADC1_DM1/ADC0_DM2                           | 17                  | -       
 *  ADC0_DP0                 | ADC0_DP0/ADC1_DP3/ADC0_SE0                  | 18                  | -       
 *  ADC0_DM0                 | ADC0_DM0/ADC1_DM3/ADC0_SE19                 | 19                  | -       
 *  ADC1_DP0                 | ADC1_DP0/ADC0_DP3/ADC1_SE0/ADC0_SE3         | 20                  | -       
 *  ADC1_DM0                 | ADC1_DM0/ADC0_DM3/ADC1_SE19                 | 21                  | -       
 *  VDDA                     | VDDA                                        | 22                  | -       
 *  VREFH                    | VREFH                                       | 23                  | -       
 *  VREFL                    | VREFL                                       | 24                  | -       
 *  VSSA                     | VSSA                                        | 25                  | -       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5/ADC1_SE18        | 26                  | -       
 *  DAC0_OUT                 | DAC0_OUT/CMP1_IN3/ADC0_SE23                 | 27                  | -       
 *  XTAL32                   | XTAL32                                      | 28                  | -       
 *  EXTAL32                  | EXTAL32                                     | 29                  | -       
 *  VBAT                     | VBAT                                        | 30                  | -       
 *  PTE24                    | ADC0_SE17                                   | 31                  | -       
 *  PTE25                    | ADC0_SE18                                   | 32                  | -       
 *  PTE26                    | Disabled                                    | 33                  | -       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | 34                  | -       
 *  PTA1                     | FTM0_CH6                                    | 35                  | -       
 *  PTA2                     | FTM0_CH7                                    | 36                  | -       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | 37                  | -       
 *  PTA4                     | FTM0_CH1                                    | 38                  | -       
 *  PTA5                     | GPIOA_5                                     | 39                  | -       
 *  VDD2                     | VDD2                                        | 40                  | -       
 *  VSS2                     | VSS2                                        | 41                  | -       
 *  PTA12                    | Disabled                                    | 42                  | -       
 *  PTA13                    | Disabled                                    | 43                  | -       
 *  PTA14                    | Disabled                                    | 44                  | -       
 *  PTA15                    | Disabled                                    | 45                  | -       
 *  PTA16                    | Disabled                                    | 46                  | -       
 *  PTA17                    | ADC1_SE17                                   | 47                  | -       
 *  VDD3                     | VDD3                                        | 48                  | -       
 *  VSS3                     | VSS3                                        | 49                  | -       
 *  PTA18                    | EXTAL0                                      | 50                  | -       
 *  PTA19                    | XTAL0                                       | 51                  | -       
 *  RESET_b                  | RESET_b                                     | 52                  | -       
 *  PTB0                     | ADC0_SE8/ADC1_SE8                           | 53                  | -       
 *  PTB1                     | ADC0_SE9/ADC1_SE9                           | 54                  | -       
 *  PTB2                     | ADC0_SE12                                   | 55                  | -       
 *  PTB3                     | ADC0_SE13                                   | 56                  | -       
 *  PTB9                     | Disabled                                    | 57                  | -       
 *  PTB10                    | ADC1_SE14                                   | 58                  | -       
 *  PTB11                    | ADC1_SE15                                   | 59                  | -       
 *  VSS4                     | VSS4                                        | 60                  | -       
 *  VDD4                     | VDD4                                        | 61                  | -       
 *  PTB16                    | GPIOB_16                                    | 62                  | -       
 *  PTB17                    | Disabled                                    | 63                  | -       
 *  PTB18                    | GPIOB_18                                    | 64                  | -       
 *  PTB19                    | GPIOB_19                                    | 65                  | -       
 *  PTB20                    | Disabled                                    | 66                  | -       
 *  PTB21                    | Disabled                                    | 67                  | -       
 *  PTB22                    | Disabled                                    | 68                  | -       
 *  PTB23                    | Disabled                                    | 69                  | -       
 *  PTC0                     | ADC0_SE14                                   | 70                  | -       
 *  PTC1                     | ADC0_SE15                                   | 71                  | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0                          | 72                  | -       
 *  PTC3                     | GPIOC_3/LLWU_P7                             | 73                  | -       
 *  VSS5                     | VSS                                         | 74                  | -       
 *  VDD5                     | VDD                                         | 75                  | -       
 *  PTC4                     | Disabled                                    | 76                  | -       
 *  PTC5                     | Disabled                                    | 77                  | -       
 *  PTC6                     | GPIOC_6/LLWU_P10                            | 78                  | -       
 *  PTC7                     | CMP0_IN1                                    | 79                  | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | 80                  | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | 81                  | -       
 *  PTC10                    | ADC1_SE6b                                   | 82                  | -       
 *  PTC11                    | ADC1_SE7b                                   | 83                  | -       
 *  PTC12                    | Disabled                                    | 84                  | -       
 *  PTC13                    | Disabled                                    | 85                  | -       
 *  PTC14                    | Disabled                                    | 86                  | -       
 *  PTC15                    | Disabled                                    | 87                  | -       
 *  VSS6                     | VSS6                                        | 88                  | -       
 *  VDD6                     | VDD6                                        | 89                  | -       
 *  PTC16                    | Disabled                                    | 90                  | -       
 *  PTC17                    | Disabled                                    | 91                  | -       
 *  PTC18                    | Disabled                                    | 92                  | -       
 *  PTD0                     | Disabled                                    | 93                  | -       
 *  PTD1                     | ADC0_SE5b                                   | 94                  | -       
 *  PTD2                     | GPIOD_2/LLWU_P13                            | 95                  | -       
 *  PTD3                     | GPIOD_3                                     | 96                  | -       
 *  PTD4                     | GPIOD_4/LLWU_P14                            | 97                  | -       
 *  PTD5                     | FTM0_CH5                                    | 98                  | -       
 *  PTD6                     | SPI1_SOUT                                   | 99                  | -       
 *  PTD7                     | SPI1_SIN                                    | 100                 | -       
 *
 *
 * @section PinsByFunction Pins by Function
 *
 *    Pin Name               |   Functions                                 |  Location           |  Description  
 *  ------------------------ | --------------------------------------------|---------------------| ------------- 
 *  ADC0_DM0                 | ADC0_DM0/ADC1_DM3/ADC0_SE19                 | 19                  | -       
 *  ADC0_DM1                 | ADC0_DM1                                    | 15                  | -       
 *  ADC0_DP0                 | ADC0_DP0/ADC1_DP3/ADC0_SE0                  | 18                  | -       
 *  ADC0_DP1                 | ADC0_DP1                                    | 14                  | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0                          | 72                  | -       
 *  PTD1                     | ADC0_SE5b                                   | 94                  | -       
 *  PTB0                     | ADC0_SE8/ADC1_SE8                           | 53                  | -       
 *  PTB1                     | ADC0_SE9/ADC1_SE9                           | 54                  | -       
 *  PTB2                     | ADC0_SE12                                   | 55                  | -       
 *  PTB3                     | ADC0_SE13                                   | 56                  | -       
 *  PTC0                     | ADC0_SE14                                   | 70                  | -       
 *  PTC1                     | ADC0_SE15                                   | 71                  | -       
 *  PTE24                    | ADC0_SE17                                   | 31                  | -       
 *  PTE25                    | ADC0_SE18                                   | 32                  | -       
 *  ADC1_DM0                 | ADC1_DM0/ADC0_DM3/ADC1_SE19                 | 21                  | -       
 *  ADC1_DM1                 | ADC1_DM1/ADC0_DM2                           | 17                  | -       
 *  ADC1_DP0                 | ADC1_DP0/ADC0_DP3/ADC1_SE0/ADC0_SE3         | 20                  | -       
 *  ADC1_DP1                 | ADC1_DP1/ADC0_DP2                           | 16                  | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | 80                  | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | 81                  | -       
 *  PTE2                     | ADC1_SE6a                                   | 3                   | -       
 *  PTC10                    | ADC1_SE6b                                   | 82                  | -       
 *  PTE3                     | ADC1_SE7a                                   | 4                   | -       
 *  PTC11                    | ADC1_SE7b                                   | 83                  | -       
 *  PTB10                    | ADC1_SE14                                   | 58                  | -       
 *  PTB11                    | ADC1_SE15                                   | 59                  | -       
 *  PTA17                    | ADC1_SE17                                   | 47                  | -       
 *  PTC7                     | CMP0_IN1                                    | 79                  | -       
 *  DAC0_OUT                 | DAC0_OUT/CMP1_IN3/ADC0_SE23                 | 27                  | -       
 *  PTE26                    | Disabled                                    | 33                  | -       
 *  PTA18                    | EXTAL0                                      | 50                  | -       
 *  EXTAL32                  | EXTAL32                                     | 29                  | -       
 *  PTA4                     | FTM0_CH1                                    | 38                  | -       
 *  PTD5                     | FTM0_CH5                                    | 98                  | -       
 *  PTA1                     | FTM0_CH6                                    | 35                  | -       
 *  PTA2                     | FTM0_CH7                                    | 36                  | -       
 *  PTA5                     | GPIOA_5                                     | 39                  | -       
 *  PTB16                    | GPIOB_16                                    | 62                  | -       
 *  PTB18                    | GPIOB_18                                    | 64                  | -       
 *  PTB19                    | GPIOB_19                                    | 65                  | -       
 *  PTC3                     | GPIOC_3/LLWU_P7                             | 73                  | -       
 *  PTC6                     | GPIOC_6/LLWU_P10                            | 78                  | -       
 *  PTD2                     | GPIOD_2/LLWU_P13                            | 95                  | -       
 *  PTD3                     | GPIOD_3                                     | 96                  | -       
 *  PTD4                     | GPIOD_4/LLWU_P14                            | 97                  | -       
 *  PTE1                     | I2C1_SCL                                    | 2                   | -       
 *  PTE0                     | I2C1_SDA                                    | 1                   | -       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | 34                  | -       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | 37                  | -       
 *  RESET_b                  | RESET_b                                     | 52                  | -       
 *  PTD7                     | SPI1_SIN                                    | 100                 | -       
 *  PTD6                     | SPI1_SOUT                                   | 99                  | -       
 *  USB0_DM                  | USB0_DM                                     | 11                  | -       
 *  USB0_DP                  | USB0_DP                                     | 10                  | -       
 *  VBAT                     | VBAT                                        | 30                  | -       
 *  VDD5                     | VDD                                         | 75                  | -       
 *  VDD1                     | VDD1                                        | 8                   | -       
 *  VDD2                     | VDD2                                        | 40                  | -       
 *  VDD3                     | VDD3                                        | 48                  | -       
 *  VDD4                     | VDD4                                        | 61                  | -       
 *  VDD6                     | VDD6                                        | 89                  | -       
 *  VDDA                     | VDDA                                        | 22                  | -       
 *  VOUT33                   | VOUT33                                      | 12                  | -       
 *  VREFH                    | VREFH                                       | 23                  | -       
 *  VREFL                    | VREFL                                       | 24                  | -       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5/ADC1_SE18        | 26                  | -       
 *  VREGIN                   | VREGIN                                      | 13                  | -       
 *  VSS5                     | VSS                                         | 74                  | -       
 *  VSS1                     | VSS1                                        | 9                   | -       
 *  VSS2                     | VSS2                                        | 41                  | -       
 *  VSS3                     | VSS3                                        | 49                  | -       
 *  VSS4                     | VSS4                                        | 60                  | -       
 *  VSS6                     | VSS6                                        | 88                  | -       
 *  VSSA                     | VSSA                                        | 25                  | -       
 *  PTA19                    | XTAL0                                       | 51                  | -       
 *  XTAL32                   | XTAL32                                      | 28                  | -       
 *
 */

#endif /* PROJECT_HEADERS_PIN_MAPPING_H */
