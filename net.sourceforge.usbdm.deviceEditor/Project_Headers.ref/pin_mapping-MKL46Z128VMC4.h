/**
 * @file      pin_mapping.h (derived from MKL46Z4.csv)
 * @version   1.2.0
 * @brief     Pin declarations for MKL46Z128VMC4
 *
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically from Configure.hardware.
 * Any manual changes will be lost.
 */
#ifndef PROJECT_HEADERS_PIN_MAPPING_H
#define PROJECT_HEADERS_PIN_MAPPING_H

#include <stddef.h>
#include "derivative.h"

/*
 * Common Mux settings for PCR
 */
#undef FIXED_ADC_FN            
#undef FIXED_GPIO_FN           
#undef FIXED_PORT_CLOCK_REG    
#define FIXED_ADC_FN             0                    // Fixed ADC Multiplexing value
#define FIXED_GPIO_FN            1                    // Fixed GPIO Multiplexing value
#define FIXED_PORT_CLOCK_REG     SCGC5                // Fixed PORT Clock

/*
 * Peripheral clock macros
 */
#define PORT_CLOCK_REG       SCGC5

namespace USBDM {

/*
 * Peripheral Information Classes
 */
/**
 * @addtogroup 0_Group 0, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End 0_Group
 * @}
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Pins used for Analogue Input
 * @{
 */
/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ADC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_ADC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* ADC0_SE0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE4b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE5b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE6b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE7b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE8        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE9        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC0_SE11       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE12       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE13       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE14       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE15       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC0_SE23       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC0_SE4a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE5a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE6a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE7a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
   class InfoDP {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* ADC0_DP0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* ADC0_DP1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* ADC0_DP2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* ADC0_DP3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
   class InfoDM {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* ADC0_DM0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* ADC0_DM1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* ADC0_DM2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* ADC0_DM3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
};

/** 
 * End ADC_Group
 * @}
 */
/**
 * @addtogroup CLKOUT_Group CLKOUT, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End CLKOUT_Group
 * @}
 */
/**
 * @addtogroup CMP_Group CMP, Analogue Comparator
 * @brief Pins used for Analogue Comparator
 * @{
 */
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {CMP0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* CMP0_IN0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN4        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN5        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* CMP0_OUT        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End CMP_Group
 * @}
 */
/**
 * @addtogroup DAC_Misc_Group DAC, DAC0 (Miscellaneous)
 * @brief Pins used for DAC0 (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for DAC, DAC0 (Miscellaneous)
 */
class Dac0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DAC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DAC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {DAC0_IRQn};

};

/** 
 * End DAC_Misc_Group
 * @}
 */
/**
 * @addtogroup DMA_Misc_Group DMA, DMA0 (Miscellaneous)
 * @brief Pins used for DMA0 (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for DMA, DMA0 (Miscellaneous)
 */
class Dma0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMA0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_DMA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End DMA_Misc_Group
 * @}
 */
/**
 * @addtogroup DMAMUX_Group DMAMUX, Direct Memory Access (DMA)
 * @brief Pins used for Direct Memory Access (DMA)
 * @{
 */
/**
 * Peripheral information for DMAMUX, Direct Memory Access (DMA)
 */
class Dmamux0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMAMUX0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DMAMUX0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End DMAMUX_Group
 * @}
 */
/**
 * @addtogroup EXTRG_Group EXTRG, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End EXTRG_Group
 * @}
 */
/**
 * @addtogroup FTFE_Misc_Group FTFE, FTFE (Miscellaneous)
 * @brief Pins used for FTFE (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for FTFE, FTFE (Miscellaneous)
 */
class FtfeInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTFE_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTF_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End FTFE_Misc_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioAInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTA_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOA_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTA_IRQn};

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioBInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTB_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOB_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioCInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTC_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOC_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTCD_IRQn};

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioDInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTD_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOD_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTD_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTCD_IRQn};

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioEInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTE_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOE_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTE_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

};

/** 
 * End GPIO_Group
 * @}
 */
/**
 * @addtogroup I2C_Group I2C, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* I2C0_SCL        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2C0_SDA        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C1_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* I2C1_SCL        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2C1_SDA        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End I2C_Group
 * @}
 */
/**
 * @addtogroup I2S_Group I2S, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
/**
 * Peripheral information for I2S, Inter-Integrated-Circuit Interface
 */
class I2s0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2S0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_I2S0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2S0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* I2S0_MCLK       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_RX_BCLK    = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_RX_FS      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_TX_BCLK    = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_TX_FS      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End I2S_Group
 * @}
 */
/**
 * @addtogroup LCD_Misc_Group LCD, LCD (Miscellaneous)
 * @brief Pins used for LCD (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for LCD, LCD (Miscellaneous)
 */
class LcdInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LCD_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_SLCD_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LCD_IRQn};

};

/** 
 * End LCD_Misc_Group
 * @}
 */
/**
 * @addtogroup LLWU_Group LLWU, Low-leakage Wake-up Unit
 * @brief Pins used for Low-leakage Wake-up Unit
 * @{
 */
/**
 * Peripheral information for LLWU, Low-leakage Wake-up Unit
 */
class LlwuInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LLWU_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* LLWU_P5         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P6         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P7         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P8         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P9         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P10        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* LLWU_P14        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P15        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End LLWU_Group
 * @}
 */
/**
 * @addtogroup LPTMR_Group LPTMR, Low Power Timer
 * @brief Pins used for Low Power Timer
 * @{
 */
/**
 * Peripheral information for LPTMR, Low Power Timer
 */
class Lptmr0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LPTMR0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_LPTMR_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LPTMR0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* LPTMR0_ALT1     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LPTMR0_ALT2     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LPTMR0_ALT3     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End LPTMR_Group
 * @}
 */
/**
 * @addtogroup NMI_B_Group NMI_b, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End NMI_B_Group
 * @}
 */
/**
 * @addtogroup OSC0_Group OSC0, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End OSC0_Group
 * @}
 */
/**
 * @addtogroup PIT_Group PIT, Programmable Interrupt Timer
 * @brief Pins used for Programmable Interrupt Timer
 * @{
 */
/**
 * Peripheral information for PIT, Programmable Interrupt Timer
 */
class PitInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = PIT_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PIT_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PIT_IRQn};

   //! Default value for PIT->SC register
   static constexpr uint32_t pitLoadValue  = 2000;

};

/** 
 * End PIT_Group
 * @}
 */
/**
 * @addtogroup RESET_B_Group RESET_b, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End RESET_B_Group
 * @}
 */
/**
 * @addtogroup RTC_Group RTC, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End RTC_Group
 * @}
 */
/**
 * @addtogroup SPI_Group SPI, Serial Peripheral Interface
 * @brief Pins used for Serial Peripheral Interface
 * @{
 */
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_SPI0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* SPI0_SCK        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_MISO       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_MOSI       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

using Spi0_PCS0 = USBDM::PcrTable_T<USBDM::Spi0Info, 3>;
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_SPI1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI1_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* SPI1_SCK        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_MISO       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_MOSI       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_PCS0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

using Spi1_PCS0 = USBDM::PcrTable_T<USBDM::Spi1Info, 3>;
/** 
 * End SPI_Group
 * @}
 */
/**
 * @addtogroup SWD_Group SWD, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End SWD_Group
 * @}
 */
/**
 * @addtogroup TPM_Group TPM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */
/**
 * Peripheral information for TPM, PWM, Input capture and Output compare
 */
class Tpm0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = TPM0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_TPM0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {TPM0_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = TPM_SC_CMOD(1)|TPM_SC_PS(0);

   static constexpr int NUM_CHANNELS  = 6;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* TPM0_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TPM0_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TPM0_CH2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TPM0_CH3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TPM0_CH4        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TPM0_CH5        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for TPM, PWM, Input capture and Output compare
 */
class Tpm1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = TPM1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_TPM1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {TPM1_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = TPM_SC_CMOD(1)|TPM_SC_PS(0);

   static constexpr int NUM_CHANNELS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* TPM1_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TPM1_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for TPM, PWM, Input capture and Output compare
 */
class Tpm2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = TPM2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_TPM2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {TPM2_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = TPM_SC_CMOD(1)|TPM_SC_PS(0);

   static constexpr int NUM_CHANNELS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* TPM2_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TPM2_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End TPM_Group
 * @}
 */
/**
 * @addtogroup TPM_CLKIN0_Group TPM_CLKIN0, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End TPM_CLKIN0_Group
 * @}
 */
/**
 * @addtogroup TPM_CLKIN1_Group TPM_CLKIN1, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End TPM_CLKIN1_Group
 * @}
 */
/**
 * @addtogroup TSI_Group TSI, Misc
 * @brief Pins used for Misc
 * @{
 */
/**
 * Peripheral information for TSI, Low-leakage Wake-up Unit
 */
class Tsi0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = TSI0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* TSI0_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH4        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH5        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH6        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH7        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH8        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH9        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH10       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH11       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH12       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH13       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH14       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* TSI0_CH15       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End TSI_Group
 * @}
 */
/**
 * @addtogroup UART_Group UART, Universal Asynchonous Receiver/Transmitter
 * @brief Pins used for Universal Asynchonous Receiver/Transmitter
 * @{
 */
/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART0_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART0_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART1_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART1_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART1_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART2_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART2_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART2_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End UART_Group
 * @}
 */
/**
 * @addtogroup USB_Misc_Group USB, USB0 (Miscellaneous)
 * @brief Pins used for USB0 (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for USB, USB0 (Miscellaneous)
 */
class Usb0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = USB0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_USB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {USB0_IRQn};

};

/** 
 * End USB_Misc_Group
 * @}
 */
/**
 * @addtogroup VCAP1_Group VCAP1, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VCAP1_Group
 * @}
 */
/**
 * @addtogroup VCAP2_Group VCAP2, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VCAP2_Group
 * @}
 */
/**
 * @addtogroup VDD_Misc_Group VDD, VDD (Miscellaneous)
 * @brief Pins used for VDD (Miscellaneous)
 * @{
 */
/** 
 * End VDD_Misc_Group
 * @}
 */
/**
 * @addtogroup VDDA_Group VDDA, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VDDA_Group
 * @}
 */
/**
 * @addtogroup VLL1_Group VLL1, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VLL1_Group
 * @}
 */
/**
 * @addtogroup VLL2_Group VLL2, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VLL2_Group
 * @}
 */
/**
 * @addtogroup VLL3_Group VLL3, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VLL3_Group
 * @}
 */
/**
 * @addtogroup VOUT33_Group VOUT33, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VOUT33_Group
 * @}
 */
/**
 * @addtogroup VREFH_Group VREFH, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREFH_Group
 * @}
 */
/**
 * @addtogroup VREFL_Group VREFL, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREFL_Group
 * @}
 */
/**
 * @addtogroup VREGIN_Group VREGIN, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREGIN_Group
 * @}
 */
/**
 * @addtogroup VSS_Misc_Group VSS, VSS (Miscellaneous)
 * @brief Pins used for VSS (Miscellaneous)
 * @{
 */
/** 
 * End VSS_Misc_Group
 * @}
 */
/**
 * @addtogroup VSS1A_Group VSS1a, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VSS1A_Group
 * @}
 */
/**
 * @addtogroup VSSA_Group VSSA, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VSSA_Group
 * @}
 */

} // End namespace USBDM

#include "gpio_defs.h"

namespace USBDM {

/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Pins used for Analogue Input
 * @{
 */
/**
 * Convenience templated class representing an ADC
 *
 * Example
 * @code
 *  // Instantiate ADC0 single-ended channel #8
 *  const adc0<8> adc0_se8;
 *
 *  // Initialise ADC
 *  adc0_se8.initialiseADC(USBDM::resolution_12bit_se);
 *
 *  // Set as analogue input
 *  adc0_se8.setAnalogueInput();
 *
 *  // Read input
 *  uint16_t value = adc0_se8.readAnalogue();
 *  @endcode
 *
 * @tparam adcChannel    ADC channel
 */
template<uint8_t channel> using Adc0 = Adc_T<Adc0Info, channel>;

/** 
 * End ADC_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
/**
 * @brief Convenience template for GpioA. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioA
 * GpioA<3> GpioA3
 *
 * // Set as digital output
 * GpioA3.setOutput();
 *
 * // Set pin high
 * GpioA3.set();
 *
 * // Set pin low
 * GpioA3.clear();
 *
 * // Toggle pin
 * GpioA3.toggle();
 *
 * // Set pin to boolean value
 * GpioA3.write(true);
 *
 * // Set pin to boolean value
 * GpioA3.write(false);
 *
 * // Set as digital input
 * GpioA3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioA3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioA = Gpio_T<GpioAInfo, bitNum>;

/**
 * @brief Convenience template for GpioA fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioA
 * GpioAField<6,3> GpioA6_3
 *
 * // Set as digital output
 * GpioA6_3.setOutput();
 *
 * // Write value to field
 * GpioA6_3.write(0x53);
 *
 * // Clear all of field
 * GpioA6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioA6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioA6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioA6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioA6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioAField = Field_T<GpioAInfo, left, right>;

/**
 * @brief Convenience template for GpioB. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioB
 * GpioB<3> GpioB3
 *
 * // Set as digital output
 * GpioB3.setOutput();
 *
 * // Set pin high
 * GpioB3.set();
 *
 * // Set pin low
 * GpioB3.clear();
 *
 * // Toggle pin
 * GpioB3.toggle();
 *
 * // Set pin to boolean value
 * GpioB3.write(true);
 *
 * // Set pin to boolean value
 * GpioB3.write(false);
 *
 * // Set as digital input
 * GpioB3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioB3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioB = Gpio_T<GpioBInfo, bitNum>;

/**
 * @brief Convenience template for GpioB fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioB
 * GpioBField<6,3> GpioB6_3
 *
 * // Set as digital output
 * GpioB6_3.setOutput();
 *
 * // Write value to field
 * GpioB6_3.write(0x53);
 *
 * // Clear all of field
 * GpioB6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioB6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioB6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioB6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioB6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioBField = Field_T<GpioBInfo, left, right>;

/**
 * @brief Convenience template for GpioC. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioC
 * GpioC<3> GpioC3
 *
 * // Set as digital output
 * GpioC3.setOutput();
 *
 * // Set pin high
 * GpioC3.set();
 *
 * // Set pin low
 * GpioC3.clear();
 *
 * // Toggle pin
 * GpioC3.toggle();
 *
 * // Set pin to boolean value
 * GpioC3.write(true);
 *
 * // Set pin to boolean value
 * GpioC3.write(false);
 *
 * // Set as digital input
 * GpioC3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioC3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioC = Gpio_T<GpioCInfo, bitNum>;

/**
 * @brief Convenience template for GpioC fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioC
 * GpioCField<6,3> GpioC6_3
 *
 * // Set as digital output
 * GpioC6_3.setOutput();
 *
 * // Write value to field
 * GpioC6_3.write(0x53);
 *
 * // Clear all of field
 * GpioC6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioC6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioC6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioC6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioC6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioCField = Field_T<GpioCInfo, left, right>;

/**
 * @brief Convenience template for GpioD. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioD
 * GpioD<3> GpioD3
 *
 * // Set as digital output
 * GpioD3.setOutput();
 *
 * // Set pin high
 * GpioD3.set();
 *
 * // Set pin low
 * GpioD3.clear();
 *
 * // Toggle pin
 * GpioD3.toggle();
 *
 * // Set pin to boolean value
 * GpioD3.write(true);
 *
 * // Set pin to boolean value
 * GpioD3.write(false);
 *
 * // Set as digital input
 * GpioD3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioD3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioD = Gpio_T<GpioDInfo, bitNum>;

/**
 * @brief Convenience template for GpioD fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioD
 * GpioDField<6,3> GpioD6_3
 *
 * // Set as digital output
 * GpioD6_3.setOutput();
 *
 * // Write value to field
 * GpioD6_3.write(0x53);
 *
 * // Clear all of field
 * GpioD6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioD6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioD6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioD6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioD6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioDField = Field_T<GpioDInfo, left, right>;

/**
 * @brief Convenience template for GpioE. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioE
 * GpioE<3> GpioE3
 *
 * // Set as digital output
 * GpioE3.setOutput();
 *
 * // Set pin high
 * GpioE3.set();
 *
 * // Set pin low
 * GpioE3.clear();
 *
 * // Toggle pin
 * GpioE3.toggle();
 *
 * // Set pin to boolean value
 * GpioE3.write(true);
 *
 * // Set pin to boolean value
 * GpioE3.write(false);
 *
 * // Set as digital input
 * GpioE3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioE3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioE = Gpio_T<GpioEInfo, bitNum>;

/**
 * @brief Convenience template for GpioE fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioE
 * GpioEField<6,3> GpioE6_3
 *
 * // Set as digital output
 * GpioE6_3.setOutput();
 *
 * // Write value to field
 * GpioE6_3.write(0x53);
 *
 * // Clear all of field
 * GpioE6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioE6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioE6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioE6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioE6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioEField = Field_T<GpioEInfo, left, right>;

/** 
 * End GPIO_Group
 * @}
 */
/**
 * @addtogroup TPM_Group TPM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */
/**
 * Convenience template class representing a TPM
 *
 * Example
 * @code
 * // Instantiate the tpm channel (for TPM0 CH6)
 * const USBDM::Tpm0<6>   tpm0_ch6;
 *
 * // Initialise PWM with initial period and alignment
 * tpm0_ch6.setPwmOutput(200, USBDM::ftm_leftAlign);
 *
 * // Change period (in ticks)
 * tpm0_ch6.setPeriod(500);
 *
 * // Change duty cycle (in percent)
 * tpm0_ch6.setDutyCycle(45);
 * @endcode
 *
 * @tparam channel    Timer channel
 */
template<uint8_t channel> using Tpm0 = TmrBase_T<Tpm0Info, channel>;

/**
 * Convenience template class representing a TPM
 *
 * Example
 * @code
 * // Instantiate the tpm channel (for TPM0 CH6)
 * const USBDM::Tpm0<6>   tpm0_ch6;
 *
 * // Initialise PWM with initial period and alignment
 * tpm0_ch6.setPwmOutput(200, USBDM::ftm_leftAlign);
 *
 * // Change period (in ticks)
 * tpm0_ch6.setPeriod(500);
 *
 * // Change duty cycle (in percent)
 * tpm0_ch6.setDutyCycle(45);
 * @endcode
 *
 * @tparam channel    Timer channel
 */
template<uint8_t channel> using Tpm1 = TmrBase_T<Tpm1Info, channel>;

/**
 * Convenience template class representing a TPM
 *
 * Example
 * @code
 * // Instantiate the tpm channel (for TPM0 CH6)
 * const USBDM::Tpm0<6>   tpm0_ch6;
 *
 * // Initialise PWM with initial period and alignment
 * tpm0_ch6.setPwmOutput(200, USBDM::ftm_leftAlign);
 *
 * // Change period (in ticks)
 * tpm0_ch6.setPeriod(500);
 *
 * // Change duty cycle (in percent)
 * tpm0_ch6.setDutyCycle(45);
 * @endcode
 *
 * @tparam channel    Timer channel
 */
template<uint8_t channel> using Tpm2 = TmrBase_T<Tpm2Info, channel>;

/** 
 * End TPM_Group
 * @}
 */
/**
 * Used to configure pin-mapping before 1st use of peripherals
 */
extern void usbdm_PinMapping();

} // End namespace USBDM
/**
 *
 * @mainpage Summary
 *
 * @section PinsByPinName Pins by Pin Name
 *
 *    Pin Name               |   Functions                                 |  Location           |  Description  
 *  ------------------------ | --------------------------------------------|---------------------| ------------- 
 *  PTA0                     | SWD_CLK                                     | J6                  | -       
 *  PTA1                     | TSI0_CH2                                    | H8                  | -       
 *  PTA2                     | TSI0_CH3                                    | J7                  | -       
 *  PTA3                     | SWD_DIO                                     | H9                  | -       
 *  PTA4                     | NMI_b                                       | J8                  | -       
 *  PTA5                     | Disabled                                    | K7                  | -       
 *  PTA6                     | Disabled                                    | K3                  | -       
 *  PTA7                     | Disabled                                    | H4                  | -       
 *  PTA12                    | Disabled                                    | K8                  | -       
 *  PTA13                    | Disabled                                    | L8                  | -       
 *  PTA14                    | Disabled                                    | K9                  | -       
 *  PTA15                    | Disabled                                    | L9                  | -       
 *  PTA16                    | Disabled                                    | J10                 | -       
 *  PTA17                    | Disabled                                    | H10                 | -       
 *  PTA18                    | EXTAL0                                      | L11                 | -       
 *  PTA19                    | XTAL0                                       | K11                 | -       
 *  PTA20                    | RESET_b                                     | J11                 | -       
 *  PTB0                     | LCD_P0/ADC0_SE8/TSI0_CH0                    | G11                 | -       
 *  PTB1                     | LCD_P1/ADC0_SE9/TSI0_CH6                    | G10                 | -       
 *  PTB2                     | LCD_P2/ADC0_SE12/TSI0_CH7                   | G9                  | -       
 *  PTB3                     | LCD_P3/ADC0_SE13/TSI0_CH8                   | G8                  | -       
 *  PTB7                     | LCD_P7                                      | E11                 | -       
 *  PTB8                     | LCD_P8                                      | D11                 | -       
 *  PTB9                     | LCD_P9                                      | E10                 | -       
 *  PTB10                    | LCD_P10                                     | D10                 | -       
 *  PTB11                    | LCD_P11                                     | C10                 | -       
 *  PTB16                    | LCD_P12/TSI0_CH9                            | B10                 | -       
 *  PTB17                    | LCD_P13/TSI0_CH10                           | E9                  | -       
 *  PTB18                    | LCD_P14/TSI0_CH11                           | D9                  | -       
 *  PTB19                    | LCD_P15/TSI0_CH12                           | C9                  | -       
 *  PTB20                    | LCD_P16                                     | F10                 | -       
 *  PTB21                    | LCD_P17                                     | F9                  | -       
 *  PTB22                    | LCD_P18                                     | F8                  | -       
 *  PTB23                    | LCD_P19                                     | E8                  | -       
 *  PTC0                     | LCD_P20/ADC0_SE14/TSI0_CH13                 | B9                  | -       
 *  PTC1                     | LCD_P21/ADC0_SE15/TSI0_CH14                 | D8                  | -       
 *  PTC2                     | LCD_P22/ADC0_SE11/TSI0_CH15                 | C8                  | -       
 *  PTC3                     | LCD_P23                                     | B8                  | -       
 *  PTC4                     | LCD_P24                                     | A8                  | -       
 *  PTC5                     | LCD_P25                                     | D7                  | -       
 *  PTC6                     | LCD_P26/CMP0_IN0                            | C7                  | -       
 *  PTC7                     | LCD_P27/CMP0_IN1                            | B7                  | -       
 *  PTC8                     | LCD_P28/CMP0_IN2                            | A7                  | -       
 *  PTC9                     | LCD_P29/CMP0_IN3                            | D6                  | -       
 *  PTC10                    | LCD_P30                                     | C6                  | -       
 *  PTC11                    | LCD_P31                                     | C5                  | -       
 *  PTC12                    | LCD_P32                                     | B6                  | -       
 *  PTC13                    | LCD_P33                                     | A6                  | -       
 *  PTC16                    | LCD_P36                                     | D5                  | -       
 *  PTC17                    | LCD_P37                                     | C4                  | -       
 *  PTC18                    | LCD_P38                                     | B4                  | -       
 *  PTD0                     | LCD_P40                                     | D4                  | -       
 *  PTD1                     | LCD_P41/ADC0_SE5b                           | D3                  | -       
 *  PTD2                     | LCD_P42                                     | C3                  | -       
 *  PTD3                     | LCD_P43                                     | B3                  | -       
 *  PTD4                     | LCD_P44                                     | A3                  | -       
 *  PTD5                     | LCD_P45/ADC0_SE6b                           | A2                  | -       
 *  PTD6                     | LCD_P46/ADC0_SE7b                           | B2                  | -       
 *  PTD7                     | LCD_P47                                     | A1                  | -       
 *  PTE0                     | LCD_P48                                     | E4                  | -       
 *  PTE1                     | LCD_P49                                     | E3                  | -       
 *  PTE2                     | LCD_P50                                     | E2                  | -       
 *  PTE3                     | LCD_P51                                     | F4                  | -       
 *  PTE4                     | LCD_P52                                     | H7                  | -       
 *  PTE5                     | LCD_P53                                     | G4                  | -       
 *  PTE6                     | LCD_P54                                     | F3                  | -       
 *  PTE16                    | LCD_P55/ADC0_DP1/ADC0_SE1                   | H1                  | -       
 *  PTE17                    | LCD_P56/ADC0_DM1/ADC0_SE5a                  | H2                  | -       
 *  PTE18                    | LCD_P57/ADC0_DP2/ADC0_SE2                   | J1                  | -       
 *  PTE19                    | LCD_P58/ADC0_DM2/ADC0_SE6a                  | J2                  | -       
 *  PTE20                    | LCD_P59/ADC0_DP0/ADC0_SE0                   | K1                  | -       
 *  PTE21                    | LCD_P60/ADC0_DM0/ADC0_SE4a                  | K2                  | -       
 *  PTE22                    | ADC0_DP3/ADC0_SE3                           | L1                  | -       
 *  PTE23                    | ADC0_DM3/ADC0_SE7a                          | L2                  | -       
 *  PTE24                    | Disabled                                    | H5                  | -       
 *  PTE25                    | Disabled                                    | J5                  | -       
 *  PTE26                    | Disabled                                    | H6                  | -       
 *  PTE29                    | CMP0_IN5/ADC0_SE4b                          | L3                  | -       
 *  PTE30                    | DAC0_OUT/ADC0_SE23/CMP0_IN4                 | K5                  | -       
 *  PTE31                    | Disabled                                    | L4                  | -       
 *  USB0_DM                  | USB0_DM                                     | F2                  | -       
 *  USB0_DP                  | USB0_DP                                     | F1                  | -       
 *  VCAP1                    | VCAP1/LCD_P39                               | C11                 | -       
 *  VCAP2                    | VCAP2/LCD_P6                                | B11                 | -       
 *  VDD1                     | VDD1                                        | E6                  | -       
 *  VDD2                     | VDD2                                        | K6                  | -       
 *  VDD3                     | VDD3                                        | E5                  | -       
 *  VDD4                     | VDD4                                        | L10                 | -       
 *  VDD5                     | VDD5                                        | E7                  | -       
 *  VDDA                     | VDDA                                        | F5                  | -       
 *  VLL1                     | VLL1/LCD_P5                                 | A9                  | -       
 *  VLL2                     | VLL2/LCD_P4                                 | A10                 | -       
 *  VLL3                     | VLL3                                        | A11                 | -       
 *  VOUT33                   | VOUT33                                      | G1                  | -       
 *  VREFH                    | VREFH                                       | G5                  | -       
 *  VREFL                    | VREFL                                       | G6                  | -       
 *  VREGIN                   | VREGIN                                      | G2                  | -       
 *  VSS1                     | VSS1                                        | G7                  | -       
 *  VSS1a                    | VSS1a                                       | L6                  | -       
 *  VSS2                     | VSS2                                        | L5                  | -       
 *  VSS3                     | VSS3                                        | G3                  | -       
 *  VSS4                     | VSS4                                        | K10                 | -       
 *  VSS5                     | VSS5                                        | F7                  | -       
 *  VSSA                     | VSSA                                        | F6                  | -       
 *
 *
 * @section PinsByLocation Pins by Location
 *
 *    Pin Name               |   Functions                                 |  Location           |  Description  
 *  ------------------------ | --------------------------------------------|---------------------| ------------- 
 *  PTD7                     | LCD_P47                                     | A1                  | -       
 *  PTD5                     | LCD_P45/ADC0_SE6b                           | A2                  | -       
 *  PTD4                     | LCD_P44                                     | A3                  | -       
 *  PTC13                    | LCD_P33                                     | A6                  | -       
 *  PTC8                     | LCD_P28/CMP0_IN2                            | A7                  | -       
 *  PTC4                     | LCD_P24                                     | A8                  | -       
 *  VLL1                     | VLL1/LCD_P5                                 | A9                  | -       
 *  VLL2                     | VLL2/LCD_P4                                 | A10                 | -       
 *  VLL3                     | VLL3                                        | A11                 | -       
 *  PTD6                     | LCD_P46/ADC0_SE7b                           | B2                  | -       
 *  PTD3                     | LCD_P43                                     | B3                  | -       
 *  PTC18                    | LCD_P38                                     | B4                  | -       
 *  PTC12                    | LCD_P32                                     | B6                  | -       
 *  PTC7                     | LCD_P27/CMP0_IN1                            | B7                  | -       
 *  PTC3                     | LCD_P23                                     | B8                  | -       
 *  PTC0                     | LCD_P20/ADC0_SE14/TSI0_CH13                 | B9                  | -       
 *  PTB16                    | LCD_P12/TSI0_CH9                            | B10                 | -       
 *  VCAP2                    | VCAP2/LCD_P6                                | B11                 | -       
 *  PTD2                     | LCD_P42                                     | C3                  | -       
 *  PTC17                    | LCD_P37                                     | C4                  | -       
 *  PTC11                    | LCD_P31                                     | C5                  | -       
 *  PTC10                    | LCD_P30                                     | C6                  | -       
 *  PTC6                     | LCD_P26/CMP0_IN0                            | C7                  | -       
 *  PTC2                     | LCD_P22/ADC0_SE11/TSI0_CH15                 | C8                  | -       
 *  PTB19                    | LCD_P15/TSI0_CH12                           | C9                  | -       
 *  PTB11                    | LCD_P11                                     | C10                 | -       
 *  VCAP1                    | VCAP1/LCD_P39                               | C11                 | -       
 *  PTD1                     | LCD_P41/ADC0_SE5b                           | D3                  | -       
 *  PTD0                     | LCD_P40                                     | D4                  | -       
 *  PTC16                    | LCD_P36                                     | D5                  | -       
 *  PTC9                     | LCD_P29/CMP0_IN3                            | D6                  | -       
 *  PTC5                     | LCD_P25                                     | D7                  | -       
 *  PTC1                     | LCD_P21/ADC0_SE15/TSI0_CH14                 | D8                  | -       
 *  PTB18                    | LCD_P14/TSI0_CH11                           | D9                  | -       
 *  PTB10                    | LCD_P10                                     | D10                 | -       
 *  PTB8                     | LCD_P8                                      | D11                 | -       
 *  PTE2                     | LCD_P50                                     | E2                  | -       
 *  PTE1                     | LCD_P49                                     | E3                  | -       
 *  PTE0                     | LCD_P48                                     | E4                  | -       
 *  VDD3                     | VDD3                                        | E5                  | -       
 *  VDD1                     | VDD1                                        | E6                  | -       
 *  VDD5                     | VDD5                                        | E7                  | -       
 *  PTB23                    | LCD_P19                                     | E8                  | -       
 *  PTB17                    | LCD_P13/TSI0_CH10                           | E9                  | -       
 *  PTB9                     | LCD_P9                                      | E10                 | -       
 *  PTB7                     | LCD_P7                                      | E11                 | -       
 *  USB0_DP                  | USB0_DP                                     | F1                  | -       
 *  USB0_DM                  | USB0_DM                                     | F2                  | -       
 *  PTE6                     | LCD_P54                                     | F3                  | -       
 *  PTE3                     | LCD_P51                                     | F4                  | -       
 *  VDDA                     | VDDA                                        | F5                  | -       
 *  VSSA                     | VSSA                                        | F6                  | -       
 *  VSS5                     | VSS5                                        | F7                  | -       
 *  PTB22                    | LCD_P18                                     | F8                  | -       
 *  PTB21                    | LCD_P17                                     | F9                  | -       
 *  PTB20                    | LCD_P16                                     | F10                 | -       
 *  VOUT33                   | VOUT33                                      | G1                  | -       
 *  VREGIN                   | VREGIN                                      | G2                  | -       
 *  VSS3                     | VSS3                                        | G3                  | -       
 *  PTE5                     | LCD_P53                                     | G4                  | -       
 *  VREFH                    | VREFH                                       | G5                  | -       
 *  VREFL                    | VREFL                                       | G6                  | -       
 *  VSS1                     | VSS1                                        | G7                  | -       
 *  PTB3                     | LCD_P3/ADC0_SE13/TSI0_CH8                   | G8                  | -       
 *  PTB2                     | LCD_P2/ADC0_SE12/TSI0_CH7                   | G9                  | -       
 *  PTB1                     | LCD_P1/ADC0_SE9/TSI0_CH6                    | G10                 | -       
 *  PTB0                     | LCD_P0/ADC0_SE8/TSI0_CH0                    | G11                 | -       
 *  PTE16                    | LCD_P55/ADC0_DP1/ADC0_SE1                   | H1                  | -       
 *  PTE17                    | LCD_P56/ADC0_DM1/ADC0_SE5a                  | H2                  | -       
 *  PTA7                     | Disabled                                    | H4                  | -       
 *  PTE24                    | Disabled                                    | H5                  | -       
 *  PTE26                    | Disabled                                    | H6                  | -       
 *  PTE4                     | LCD_P52                                     | H7                  | -       
 *  PTA1                     | TSI0_CH2                                    | H8                  | -       
 *  PTA3                     | SWD_DIO                                     | H9                  | -       
 *  PTA17                    | Disabled                                    | H10                 | -       
 *  PTE18                    | LCD_P57/ADC0_DP2/ADC0_SE2                   | J1                  | -       
 *  PTE19                    | LCD_P58/ADC0_DM2/ADC0_SE6a                  | J2                  | -       
 *  PTE25                    | Disabled                                    | J5                  | -       
 *  PTA0                     | SWD_CLK                                     | J6                  | -       
 *  PTA2                     | TSI0_CH3                                    | J7                  | -       
 *  PTA4                     | NMI_b                                       | J8                  | -       
 *  PTA16                    | Disabled                                    | J10                 | -       
 *  PTA20                    | RESET_b                                     | J11                 | -       
 *  PTE20                    | LCD_P59/ADC0_DP0/ADC0_SE0                   | K1                  | -       
 *  PTE21                    | LCD_P60/ADC0_DM0/ADC0_SE4a                  | K2                  | -       
 *  PTA6                     | Disabled                                    | K3                  | -       
 *  PTE30                    | DAC0_OUT/ADC0_SE23/CMP0_IN4                 | K5                  | -       
 *  VDD2                     | VDD2                                        | K6                  | -       
 *  PTA5                     | Disabled                                    | K7                  | -       
 *  PTA12                    | Disabled                                    | K8                  | -       
 *  PTA14                    | Disabled                                    | K9                  | -       
 *  VSS4                     | VSS4                                        | K10                 | -       
 *  PTA19                    | XTAL0                                       | K11                 | -       
 *  PTE22                    | ADC0_DP3/ADC0_SE3                           | L1                  | -       
 *  PTE23                    | ADC0_DM3/ADC0_SE7a                          | L2                  | -       
 *  PTE29                    | CMP0_IN5/ADC0_SE4b                          | L3                  | -       
 *  PTE31                    | Disabled                                    | L4                  | -       
 *  VSS2                     | VSS2                                        | L5                  | -       
 *  VSS1a                    | VSS1a                                       | L6                  | -       
 *  PTA13                    | Disabled                                    | L8                  | -       
 *  PTA15                    | Disabled                                    | L9                  | -       
 *  VDD4                     | VDD4                                        | L10                 | -       
 *  PTA18                    | EXTAL0                                      | L11                 | -       
 *
 *
 * @section PinsByFunction Pins by Function
 *
 *    Pin Name               |   Functions                                 |  Location           |  Description  
 *  ------------------------ | --------------------------------------------|---------------------| ------------- 
 *  PTE23                    | ADC0_DM3/ADC0_SE7a                          | L2                  | -       
 *  PTE22                    | ADC0_DP3/ADC0_SE3                           | L1                  | -       
 *  PTE29                    | CMP0_IN5/ADC0_SE4b                          | L3                  | -       
 *  PTE30                    | DAC0_OUT/ADC0_SE23/CMP0_IN4                 | K5                  | -       
 *  PTE31                    | Disabled                                    | L4                  | -       
 *  PTA18                    | EXTAL0                                      | L11                 | -       
 *  PTB0                     | LCD_P0/ADC0_SE8/TSI0_CH0                    | G11                 | -       
 *  PTB1                     | LCD_P1/ADC0_SE9/TSI0_CH6                    | G10                 | -       
 *  PTB2                     | LCD_P2/ADC0_SE12/TSI0_CH7                   | G9                  | -       
 *  PTB3                     | LCD_P3/ADC0_SE13/TSI0_CH8                   | G8                  | -       
 *  PTB7                     | LCD_P7                                      | E11                 | -       
 *  PTB8                     | LCD_P8                                      | D11                 | -       
 *  PTB9                     | LCD_P9                                      | E10                 | -       
 *  PTB10                    | LCD_P10                                     | D10                 | -       
 *  PTB11                    | LCD_P11                                     | C10                 | -       
 *  PTB16                    | LCD_P12/TSI0_CH9                            | B10                 | -       
 *  PTB17                    | LCD_P13/TSI0_CH10                           | E9                  | -       
 *  PTB18                    | LCD_P14/TSI0_CH11                           | D9                  | -       
 *  PTB19                    | LCD_P15/TSI0_CH12                           | C9                  | -       
 *  PTB20                    | LCD_P16                                     | F10                 | -       
 *  PTB21                    | LCD_P17                                     | F9                  | -       
 *  PTB22                    | LCD_P18                                     | F8                  | -       
 *  PTB23                    | LCD_P19                                     | E8                  | -       
 *  PTC0                     | LCD_P20/ADC0_SE14/TSI0_CH13                 | B9                  | -       
 *  PTC1                     | LCD_P21/ADC0_SE15/TSI0_CH14                 | D8                  | -       
 *  PTC2                     | LCD_P22/ADC0_SE11/TSI0_CH15                 | C8                  | -       
 *  PTC3                     | LCD_P23                                     | B8                  | -       
 *  PTC4                     | LCD_P24                                     | A8                  | -       
 *  PTC5                     | LCD_P25                                     | D7                  | -       
 *  PTC6                     | LCD_P26/CMP0_IN0                            | C7                  | -       
 *  PTC7                     | LCD_P27/CMP0_IN1                            | B7                  | -       
 *  PTC8                     | LCD_P28/CMP0_IN2                            | A7                  | -       
 *  PTC9                     | LCD_P29/CMP0_IN3                            | D6                  | -       
 *  PTC10                    | LCD_P30                                     | C6                  | -       
 *  PTC11                    | LCD_P31                                     | C5                  | -       
 *  PTC12                    | LCD_P32                                     | B6                  | -       
 *  PTC13                    | LCD_P33                                     | A6                  | -       
 *  PTC16                    | LCD_P36                                     | D5                  | -       
 *  PTC17                    | LCD_P37                                     | C4                  | -       
 *  PTC18                    | LCD_P38                                     | B4                  | -       
 *  PTD0                     | LCD_P40                                     | D4                  | -       
 *  PTD1                     | LCD_P41/ADC0_SE5b                           | D3                  | -       
 *  PTD2                     | LCD_P42                                     | C3                  | -       
 *  PTD3                     | LCD_P43                                     | B3                  | -       
 *  PTD4                     | LCD_P44                                     | A3                  | -       
 *  PTD5                     | LCD_P45/ADC0_SE6b                           | A2                  | -       
 *  PTD6                     | LCD_P46/ADC0_SE7b                           | B2                  | -       
 *  PTD7                     | LCD_P47                                     | A1                  | -       
 *  PTE0                     | LCD_P48                                     | E4                  | -       
 *  PTE1                     | LCD_P49                                     | E3                  | -       
 *  PTE2                     | LCD_P50                                     | E2                  | -       
 *  PTE3                     | LCD_P51                                     | F4                  | -       
 *  PTE4                     | LCD_P52                                     | H7                  | -       
 *  PTE5                     | LCD_P53                                     | G4                  | -       
 *  PTE6                     | LCD_P54                                     | F3                  | -       
 *  PTE16                    | LCD_P55/ADC0_DP1/ADC0_SE1                   | H1                  | -       
 *  PTE17                    | LCD_P56/ADC0_DM1/ADC0_SE5a                  | H2                  | -       
 *  PTE18                    | LCD_P57/ADC0_DP2/ADC0_SE2                   | J1                  | -       
 *  PTE19                    | LCD_P58/ADC0_DM2/ADC0_SE6a                  | J2                  | -       
 *  PTE20                    | LCD_P59/ADC0_DP0/ADC0_SE0                   | K1                  | -       
 *  PTE21                    | LCD_P60/ADC0_DM0/ADC0_SE4a                  | K2                  | -       
 *  PTA4                     | NMI_b                                       | J8                  | -       
 *  PTA20                    | RESET_b                                     | J11                 | -       
 *  PTA0                     | SWD_CLK                                     | J6                  | -       
 *  PTA3                     | SWD_DIO                                     | H9                  | -       
 *  PTA1                     | TSI0_CH2                                    | H8                  | -       
 *  PTA2                     | TSI0_CH3                                    | J7                  | -       
 *  USB0_DM                  | USB0_DM                                     | F2                  | -       
 *  USB0_DP                  | USB0_DP                                     | F1                  | -       
 *  VCAP1                    | VCAP1/LCD_P39                               | C11                 | -       
 *  VCAP2                    | VCAP2/LCD_P6                                | B11                 | -       
 *  VDD1                     | VDD1                                        | E6                  | -       
 *  VDD2                     | VDD2                                        | K6                  | -       
 *  VDD3                     | VDD3                                        | E5                  | -       
 *  VDD4                     | VDD4                                        | L10                 | -       
 *  VDD5                     | VDD5                                        | E7                  | -       
 *  VDDA                     | VDDA                                        | F5                  | -       
 *  VLL1                     | VLL1/LCD_P5                                 | A9                  | -       
 *  VLL2                     | VLL2/LCD_P4                                 | A10                 | -       
 *  VLL3                     | VLL3                                        | A11                 | -       
 *  VOUT33                   | VOUT33                                      | G1                  | -       
 *  VREFH                    | VREFH                                       | G5                  | -       
 *  VREFL                    | VREFL                                       | G6                  | -       
 *  VREGIN                   | VREGIN                                      | G2                  | -       
 *  VSS1                     | VSS1                                        | G7                  | -       
 *  VSS1a                    | VSS1a                                       | L6                  | -       
 *  VSS2                     | VSS2                                        | L5                  | -       
 *  VSS3                     | VSS3                                        | G3                  | -       
 *  VSS4                     | VSS4                                        | K10                 | -       
 *  VSS5                     | VSS5                                        | F7                  | -       
 *  VSSA                     | VSSA                                        | F6                  | -       
 *  PTA19                    | XTAL0                                       | K11                 | -       
 *
 */

#endif /* PROJECT_HEADERS_PIN_MAPPING_H */
