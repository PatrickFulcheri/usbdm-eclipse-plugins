/**
 * @file      pin_mapping.h (derived from MK64F12.csv)
 * @version   1.2.0
 * @brief     Pin declarations for MK64FN1M0VMD12
 *
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically from Configure.hardware.
 * Any manual changes will be lost.
 */
#ifndef PROJECT_HEADERS_PIN_MAPPING_H
#define PROJECT_HEADERS_PIN_MAPPING_H

#include <stddef.h>
#include "derivative.h"

/*
 * Common Mux settings for PCR
 */
#undef FIXED_ADC_FN            
#undef FIXED_GPIO_FN           
#undef FIXED_PORT_CLOCK_REG    
#define FIXED_ADC_FN             0                    // Fixed ADC Multiplexing value
#define FIXED_GPIO_FN            1                    // Fixed GPIO Multiplexing value
#define FIXED_PORT_CLOCK_REG     SCGC5                // Fixed PORT Clock

/*
 * Peripheral clock macros
 */
#define PORT_CLOCK_REG       SCGC5

namespace USBDM {

/*
 * Peripheral Information Classes
 */
/**
 * @addtogroup 0_Group 0, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End 0_Group
 * @}
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Pins used for Analogue Input
 * @{
 */
/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ADC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_ADC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC0_SE4b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE5b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE6b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE7b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE8        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE9        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE10       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE11       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE12       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE13       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE14       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE15       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE16       = ADC0_SE16 (J3)                 */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* ADC0_SE17       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC0_SE18       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC0_SE21       = ADC0_SE16 (J3)                 */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* ADC0_SE22       = ADC1_SE16 (K3)                 */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* ADC0_SE23       = DAC0_OUT (L3)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
   };
   class InfoDP {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* ADC0_DP0        = ADC0_DP0 (L1)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC0_DP1        = ADC0_DP1 (J1)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC0_DP2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* ADC0_DP3        = ADC1_DP0 (M1)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };
   }; 
   class InfoDM {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* ADC0_DM0        = ADC0_DM0 (L2)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC0_DM1        = ADC0_DM1 (J2)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC0_DM2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* ADC0_DM3        = ADC1_DM0 (M2)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };
   }; 
};

/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ADC1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC3_ADC1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC3);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC1_SE4b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE5b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE6b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE7b       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE8        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE9        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE10       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE11       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE12       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE13       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE14       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE15       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE16       = ADC1_SE16 (K3)                 */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* ADC1_SE17       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE18       = VREF_OUT (M3)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC1_SE23       = DAC1_OUT (L4)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* ADC1_SE4a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE5a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE6a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* ADC1_SE7a       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
   class InfoDP {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* ADC1_DP0        = ADC1_DP0 (M1)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC1_DP1        = ADC1_DP1 (K1)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /* ADC1_DP3        = ADC0_DP0 (L1)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };
   }; 
   class InfoDM {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* ADC1_DM0        = ADC1_DM0 (M2)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* ADC1_DM1        = ADC1_DM1 (K2)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
            /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /* ADC1_DM3        = ADC0_DM0 (L2)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
      };
   }; 
};

/** 
 * End ADC_Group
 * @}
 */
/**
 * @addtogroup ADC1A_Group ADC1a, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End ADC1A_Group
 * @}
 */
/**
 * @addtogroup CAN_Misc_Group CAN, CAN0 (Miscellaneous)
 * @brief Pins used for CAN0 (Miscellaneous)
 * @{
 */
/** 
 * End CAN_Misc_Group
 * @}
 */
/**
 * @addtogroup CLKOUT_Group CLKOUT, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End CLKOUT_Group
 * @}
 */
/**
 * @addtogroup CMP_Group CMP, Analogue Comparator
 * @brief Pins used for Analogue Comparator
 * @{
 */
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {CMP0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* CMP0_IN0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP0_IN4        = DAC1_OUT (L4)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* CMP0_IN5        = VREF_OUT (M3)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* CMP0_OUT        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {CMP1_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* CMP1_IN0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP1_IN1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP1_IN2        = ADC0_SE16 (J3)                 */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* CMP1_IN3        = DAC0_OUT (L3)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* CMP1_IN5        = VREF_OUT (M3)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* CMP1_OUT        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMP2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {CMP2_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* CMP2_IN0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP2_IN1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* CMP2_IN2        = ADC1_SE16 (K3)                 */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* CMP2_IN3        = DAC1_OUT (L4)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* CMP2_OUT        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End CMP_Group
 * @}
 */
/**
 * @addtogroup CMT_Misc_Group CMT, CMT (Miscellaneous)
 * @brief Pins used for CMT (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for CMT, CMT (Miscellaneous)
 */
class CmtInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = CMT_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMT_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End CMT_Misc_Group
 * @}
 */
/**
 * @addtogroup DAC_Misc_Group DAC, DAC0 (Miscellaneous)
 * @brief Pins used for DAC0 (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for DAC, DAC0 (Miscellaneous)
 */
class Dac0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DAC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DAC0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {DAC0_IRQn, DAC0_IRQn};

};

/**
 * Peripheral information for DAC, DAC1 (Miscellaneous)
 */
class Dac1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DAC1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC2_DAC1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC2);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {DAC1_IRQn};

};

/** 
 * End DAC_Misc_Group
 * @}
 */
/**
 * @addtogroup DMA_Misc_Group DMA, DMA0 (Miscellaneous)
 * @brief Pins used for DMA0 (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for DMA, DMA0 (Miscellaneous)
 */
class Dma0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMA0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_DMA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End DMA_Misc_Group
 * @}
 */
/**
 * @addtogroup DMAMUX_Group DMAMUX, Direct Memory Access (DMA)
 * @brief Pins used for Direct Memory Access (DMA)
 * @{
 */
/**
 * Peripheral information for DMAMUX, Direct Memory Access (DMA)
 */
class Dmamux0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = DMAMUX0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DMAMUX0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End DMAMUX_Group
 * @}
 */
/**
 * @addtogroup ENET_Misc_Group ENET, ENET (Miscellaneous)
 * @brief Pins used for ENET (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for ENET, ENET (Miscellaneous)
 */
class EnetInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = ENET_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC2_ENET_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC2);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 4;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ENET_Transmit_IRQn, ENET_Receive_IRQn, ENET_Error_IRQn, ENET_1588Timeout_IRQn};

};

/** 
 * End ENET_Misc_Group
 * @}
 */
/**
 * @addtogroup EWM_Misc_Group EWM, EWM (Miscellaneous)
 * @brief Pins used for EWM (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for EWM, EWM (Miscellaneous)
 */
class EwmInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = EWM_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_EWM_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End EWM_Misc_Group
 * @}
 */
/**
 * @addtogroup FB_Misc_Group FB, FB (Miscellaneous)
 * @brief Pins used for FB (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for FB, FB (Miscellaneous)
 */
class FbInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FB_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_FLEXBUS_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End FB_Misc_Group
 * @}
 */
/**
 * @addtogroup FLEXCAN_Group FLEXCAN, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End FLEXCAN_Group
 * @}
 */
/**
 * @addtogroup FTM_Misc_Group FTM, FTM (Miscellaneous)
 * @brief Pins used for FTM (Miscellaneous)
 * @{
 */
/** 
 * End FTM_Misc_Group
 * @}
 */
/**
 * @addtogroup FTM_Group FTM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM0_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = FTM_SC_CLKS(1)|FTM_SC_PS(0);

   static constexpr int NUM_CHANNELS  = 8;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* FTM0_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM0_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM0_CH2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM0_CH3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM0_CH4        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM0_CH5        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM0_CH6        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM0_CH7        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
   class InfoFAULT {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM0_FLT0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* FTM0_FLT1       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* FTM0_FLT2       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* FTM0_FLT3       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
};

/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM1_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = FTM_SC_CLKS(1)|FTM_SC_PS(0);

   static constexpr int NUM_CHANNELS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* FTM1_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM1_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
   class InfoFAULT {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM1_FLT0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
   class InfoQUAD {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM1_QD_PHA     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* FTM1_QD_PHB     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
};

/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM2_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = FTM_SC_CLKS(1)|FTM_SC_PS(0);

   static constexpr int NUM_CHANNELS  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* FTM2_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM2_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
   class InfoFAULT {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM2_FLT0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
   class InfoQUAD {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM2_QD_PHA     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /* FTM2_QD_PHB     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
};

/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm3Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = FTM3_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC3_FTM3_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC3);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM3_IRQn};

   //! Default value for tmr->SC register
   static constexpr uint32_t scValue  = FTM_SC_CLKS(1)|FTM_SC_PS(0);

   static constexpr int NUM_CHANNELS  = 8;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* FTM3_CH0        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH1        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH2        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH3        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH4        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH5        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH6        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* FTM3_CH7        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
   class InfoFAULT {
   public:
      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
            /* FTM3_FLT0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };
   }; 
};

/** 
 * End FTM_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioAInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTA_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOA_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTA_IRQn};

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioBInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTB_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOB_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTB_IRQn};

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioCInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTC_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOC_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTC_IRQn};

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioDInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTD_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOD_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTD_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTD_IRQn};

};

/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioEInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTE_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOE_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t pcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTE_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTE_IRQn};

};

/** 
 * End GPIO_Group
 * @}
 */
/**
 * @addtogroup I2C_Group I2C, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* I2C0_SCL        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2C0_SDA        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C1_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* I2C1_SCL        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2C1_SDA        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2C2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC1_I2C2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC1);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C2_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* I2C2_SCL        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2C2_SDA        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End I2C_Group
 * @}
 */
/**
 * @addtogroup I2S_Group I2S, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
/**
 * Peripheral information for I2S, Inter-Integrated-Circuit Interface
 */
class I2s0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = I2S0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_I2S_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2S0_Tx_IRQn, I2S0_Rx_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* I2S0_MCLK       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_RX_BCLK    = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_RX_FS      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_TX_BCLK    = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* I2S0_TX_FS      = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End I2S_Group
 * @}
 */
/**
 * @addtogroup JTAG_Group JTAG, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End JTAG_Group
 * @}
 */
/**
 * @addtogroup LLWU_Group LLWU, Low-leakage Wake-up Unit
 * @brief Pins used for Low-leakage Wake-up Unit
 * @{
 */
/**
 * Peripheral information for LLWU, Low-leakage Wake-up Unit
 */
class LlwuInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LLWU_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* LLWU_P0         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P1         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P2         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P3         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P4         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P5         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P6         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P7         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P8         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P9         = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P10        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P11        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P12        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P13        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P14        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LLWU_P15        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End LLWU_Group
 * @}
 */
/**
 * @addtogroup LPTMR_Group LPTMR, Low Power Timer
 * @brief Pins used for Low Power Timer
 * @{
 */
/**
 * Peripheral information for LPTMR, Low Power Timer
 */
class Lptmr0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = LPTMR0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_LPTMR_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LPTMR0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* --              = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /* LPTMR0_ALT1     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* LPTMR0_ALT2     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End LPTMR_Group
 * @}
 */
/**
 * @addtogroup MII_Misc_Group MII, MII0 (Miscellaneous)
 * @brief Pins used for MII0 (Miscellaneous)
 * @{
 */
/** 
 * End MII_Misc_Group
 * @}
 */
/**
 * @addtogroup MPU_Misc_Group MPU, MPU (Miscellaneous)
 * @brief Pins used for MPU (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for MPU, MPU (Miscellaneous)
 */
class MpuInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = MPU_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_MPU_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC7);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End MPU_Misc_Group
 * @}
 */
/**
 * @addtogroup NMI_B_Group NMI_b, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End NMI_B_Group
 * @}
 */
/**
 * @addtogroup OSC0_Group OSC0, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End OSC0_Group
 * @}
 */
/**
 * @addtogroup OSC32_Group OSC32, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End OSC32_Group
 * @}
 */
/**
 * @addtogroup PDB_Misc_Group PDB, PDB0 (Miscellaneous)
 * @brief Pins used for PDB0 (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for PDB, PDB0 (Miscellaneous)
 */
class Pdb0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = PDB0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PDB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PDB0_IRQn};

};

/** 
 * End PDB_Misc_Group
 * @}
 */
/**
 * @addtogroup PIT_Group PIT, Programmable Interrupt Timer
 * @brief Pins used for Programmable Interrupt Timer
 * @{
 */
/**
 * Peripheral information for PIT, Programmable Interrupt Timer
 */
class PitInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = PIT_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PIT_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 4;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PIT0_IRQn, PIT1_IRQn, PIT2_IRQn, PIT3_IRQn};

   //! Default value for PIT->SC register
   static constexpr uint32_t pitLoadValue  = 2000;

};

/** 
 * End PIT_Group
 * @}
 */
/**
 * @addtogroup RESET_B_Group RESET_b, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End RESET_B_Group
 * @}
 */
/**
 * @addtogroup RNG_Group RNG, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End RNG_Group
 * @}
 */
/**
 * @addtogroup RTC_Group RTC, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End RTC_Group
 * @}
 */
/**
 * @addtogroup RTC_WAKEUP_B_Group RTC_WAKEUP_B, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End RTC_WAKEUP_B_Group
 * @}
 */
/**
 * @addtogroup SDHC_Misc_Group SDHC, SDHC (Miscellaneous)
 * @brief Pins used for SDHC (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for SDHC, SDHC (Miscellaneous)
 */
class SdhcInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SDHC_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC3_SDHC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC3);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SDHC_IRQn};

};

/** 
 * End SDHC_Misc_Group
 * @}
 */
/**
 * @addtogroup SPI_Group SPI, Serial Peripheral Interface
 * @brief Pins used for Serial Peripheral Interface
 * @{
 */
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_SPI0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI0_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* SPI0_SCK        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_SIN        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_SOUT       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS1       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS2       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS3       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS4       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI0_PCS5       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

using Spi0_PCS0 = USBDM::PcrTable_T<USBDM::Spi0Info, 3>;
using Spi0_PCS1 = USBDM::PcrTable_T<USBDM::Spi0Info, 4>;
using Spi0_PCS2 = USBDM::PcrTable_T<USBDM::Spi0Info, 5>;
using Spi0_PCS3 = USBDM::PcrTable_T<USBDM::Spi0Info, 6>;
using Spi0_PCS4 = USBDM::PcrTable_T<USBDM::Spi0Info, 7>;
using Spi0_PCS5 = USBDM::PcrTable_T<USBDM::Spi0Info, 8>;
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_SPI1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI1_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* SPI1_SCK        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_SIN        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_SOUT       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_PCS0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_PCS1       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_PCS2       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI1_PCS3       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

using Spi1_PCS0 = USBDM::PcrTable_T<USBDM::Spi1Info, 3>;
using Spi1_PCS1 = USBDM::PcrTable_T<USBDM::Spi1Info, 4>;
using Spi1_PCS2 = USBDM::PcrTable_T<USBDM::Spi1Info, 5>;
using Spi1_PCS3 = USBDM::PcrTable_T<USBDM::Spi1Info, 6>;
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = SPI2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC3_SPI2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC3);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI2_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* SPI2_SCK        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI2_SIN        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI2_SOUT       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI2_PCS0       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* SPI2_PCS1       = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

using Spi2_PCS0 = USBDM::PcrTable_T<USBDM::Spi2Info, 3>;
using Spi2_PCS1 = USBDM::PcrTable_T<USBDM::Spi2Info, 4>;
/** 
 * End SPI_Group
 * @}
 */
/**
 * @addtogroup SWD_Group SWD, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End SWD_Group
 * @}
 */
/**
 * @addtogroup TRACE_Group TRACE, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End TRACE_Group
 * @}
 */
/**
 * @addtogroup UART_Group UART, Universal Asynchonous Receiver/Transmitter
 * @brief Pins used for Universal Asynchonous Receiver/Transmitter
 * @{
 */
/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART0_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART0_RX_TX_IRQn, UART0_ERR_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART0_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART0_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART0_RTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART0_CTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART0_COL_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart1Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART1_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART1_RX_TX_IRQn, UART1_ERR_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART1_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART1_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART1_RTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART1_CTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart2Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART2_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART2_RX_TX_IRQn, UART2_ERR_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART2_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART2_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART2_RTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART2_CTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart3Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART3_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART3_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART3_RX_TX_IRQn, UART3_ERR_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART3_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART3_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART3_RTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART3_CTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart4Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART4_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC1_UART4_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC1);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART4_RX_TX_IRQn, UART4_ERR_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART4_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART4_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART4_RTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART4_CTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/**
 * Peripheral information for UART, Universal Asynchonous Receiver/Transmitter
 */
class Uart5Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = UART5_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC1_UART5_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC1);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 2;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART5_RX_TX_IRQn, UART5_ERR_IRQn};

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* UART5_TX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART5_RX        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART5_RTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /* UART5_CTS_b     = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };
};

/** 
 * End UART_Group
 * @}
 */
/**
 * @addtogroup USB_Misc_Group USB, USB0 (Miscellaneous)
 * @brief Pins used for USB0 (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for USB, USB0 (Miscellaneous)
 */
class Usb0Info {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = USB0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_USBOTG_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {USB0_IRQn};

};

/** 
 * End USB_Misc_Group
 * @}
 */
/**
 * @addtogroup USBDCD_Misc_Group USBDCD, USBDCD (Miscellaneous)
 * @brief Pins used for USBDCD (Miscellaneous)
 * @{
 */
/**
 * Peripheral information for USBDCD, USBDCD (Miscellaneous)
 */
class UsbdcdInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = USBDCD_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_USBDCD_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC6);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {USBDCD_IRQn};

};

/** 
 * End USBDCD_Misc_Group
 * @}
 */
/**
 * @addtogroup VBAT_Group VBAT, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VBAT_Group
 * @}
 */
/**
 * @addtogroup VDD_Misc_Group VDD, VDD (Miscellaneous)
 * @brief Pins used for VDD (Miscellaneous)
 * @{
 */
/** 
 * End VDD_Misc_Group
 * @}
 */
/**
 * @addtogroup VDDA_Group VDDA, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VDDA_Group
 * @}
 */
/**
 * @addtogroup VOUT33_Group VOUT33, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VOUT33_Group
 * @}
 */
/**
 * @addtogroup VREF_Group VREF, Voltage Reference
 * @brief Pins used for Voltage Reference
 * @{
 */
/**
 * Peripheral information for VREF, Voltage Reference
 */
class VrefInfo {
public:
   //! Hardware base pointer
   static constexpr uint32_t basePtr   = VREF_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t pcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_VREF_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC4);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         // Signal            Pin                                 clockMask          pcrAddress      gpioAddress     bit  mux
         /* VREF_OUT        = VREF_OUT (M3)                  */  { 0, 0, 0, FIXED_NO_PCR, 0 },
   };
};

/** 
 * End VREF_Group
 * @}
 */
/**
 * @addtogroup VREFH_Group VREFH, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREFH_Group
 * @}
 */
/**
 * @addtogroup VREFL_Group VREFL, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREFL_Group
 * @}
 */
/**
 * @addtogroup VREGIN_Group VREGIN, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VREGIN_Group
 * @}
 */
/**
 * @addtogroup VSS_Misc_Group VSS, VSS (Miscellaneous)
 * @brief Pins used for VSS (Miscellaneous)
 * @{
 */
/** 
 * End VSS_Misc_Group
 * @}
 */
/**
 * @addtogroup VSS2A_Group VSS2a, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VSS2A_Group
 * @}
 */
/**
 * @addtogroup VSSA_Group VSSA, Misc
 * @brief Pins used for Misc
 * @{
 */
/** 
 * End VSSA_Group
 * @}
 */

} // End namespace USBDM

#include "gpio_defs.h"

namespace USBDM {

/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Pins used for Analogue Input
 * @{
 */
/**
 * Convenience templated class representing an ADC
 *
 * Example
 * @code
 *  // Instantiate ADC0 single-ended channel #8
 *  const adc0<8> adc0_se8;
 *
 *  // Initialise ADC
 *  adc0_se8.initialiseADC(USBDM::resolution_12bit_se);
 *
 *  // Set as analogue input
 *  adc0_se8.setAnalogueInput();
 *
 *  // Read input
 *  uint16_t value = adc0_se8.readAnalogue();
 *  @endcode
 *
 * @tparam adcChannel    ADC channel
 */
template<uint8_t channel> using Adc0 = Adc_T<Adc0Info, channel>;

using adc_J3               = const USBDM::Adc0<16>;
//using adc_J3               = const USBDM::Adc0<21>;
using adc_K3               = const USBDM::Adc0<22>;
using adc_L3               = const USBDM::Adc0<23>;
/**
 * Convenience templated class representing an ADC
 *
 * Example
 * @code
 *  // Instantiate ADC0 single-ended channel #8
 *  const adc0<8> adc0_se8;
 *
 *  // Initialise ADC
 *  adc0_se8.initialiseADC(USBDM::resolution_12bit_se);
 *
 *  // Set as analogue input
 *  adc0_se8.setAnalogueInput();
 *
 *  // Read input
 *  uint16_t value = adc0_se8.readAnalogue();
 *  @endcode
 *
 * @tparam adcChannel    ADC channel
 */
template<uint8_t channel> using Adc1 = Adc_T<Adc1Info, channel>;

//using adc_K3               = const USBDM::Adc1<16>;
using adc_L4               = const USBDM::Adc1<23>;
using adc_M3               = const USBDM::Adc1<18>;
/** 
 * End ADC_Group
 * @}
 */
/**
 * @addtogroup FTM_Group FTM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */
/**
 * Convenience template class representing a FTM
 *
 * Example
 * @code
 * // Instantiate the ftm channel (for FTM0 CH6)
 * const USBDM::Ftm0<6>   ftm0_ch6;
 *
 * // Initialise PWM with initial period and alignment
 * ftm0_ch6.setPwmOutput(200, USBDM::ftm_leftAlign);
 *
 * // Change period (in ticks)
 * ftm0_ch6.setPeriod(500);
 *
 * // Change duty cycle (in percent)
 * ftm0_ch6.setDutyCycle(45);
 * @endcode
 *
 * @tparam channel    Timer channel
 */
template<uint8_t channel> using Ftm0 = TmrBase_T<Ftm0Info, channel>;

/**
 * Convenience template class representing a FTM
 *
 * Example
 * @code
 * // Instantiate the ftm channel (for FTM0 CH6)
 * const USBDM::Ftm0<6>   ftm0_ch6;
 *
 * // Initialise PWM with initial period and alignment
 * ftm0_ch6.setPwmOutput(200, USBDM::ftm_leftAlign);
 *
 * // Change period (in ticks)
 * ftm0_ch6.setPeriod(500);
 *
 * // Change duty cycle (in percent)
 * ftm0_ch6.setDutyCycle(45);
 * @endcode
 *
 * @tparam channel    Timer channel
 */
template<uint8_t channel> using Ftm1 = TmrBase_T<Ftm1Info, channel>;

/**
 * Convenience template class representing a FTM
 *
 * Example
 * @code
 * // Instantiate the ftm channel (for FTM0 CH6)
 * const USBDM::Ftm0<6>   ftm0_ch6;
 *
 * // Initialise PWM with initial period and alignment
 * ftm0_ch6.setPwmOutput(200, USBDM::ftm_leftAlign);
 *
 * // Change period (in ticks)
 * ftm0_ch6.setPeriod(500);
 *
 * // Change duty cycle (in percent)
 * ftm0_ch6.setDutyCycle(45);
 * @endcode
 *
 * @tparam channel    Timer channel
 */
template<uint8_t channel> using Ftm2 = TmrBase_T<Ftm2Info, channel>;

/**
 * Convenience template class representing a FTM
 *
 * Example
 * @code
 * // Instantiate the ftm channel (for FTM0 CH6)
 * const USBDM::Ftm0<6>   ftm0_ch6;
 *
 * // Initialise PWM with initial period and alignment
 * ftm0_ch6.setPwmOutput(200, USBDM::ftm_leftAlign);
 *
 * // Change period (in ticks)
 * ftm0_ch6.setPeriod(500);
 *
 * // Change duty cycle (in percent)
 * ftm0_ch6.setDutyCycle(45);
 * @endcode
 *
 * @tparam channel    Timer channel
 */
template<uint8_t channel> using Ftm3 = TmrBase_T<Ftm3Info, channel>;

/** 
 * End FTM_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
/**
 * @brief Convenience template for GpioA. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioA
 * GpioA<3> GpioA3
 *
 * // Set as digital output
 * GpioA3.setOutput();
 *
 * // Set pin high
 * GpioA3.set();
 *
 * // Set pin low
 * GpioA3.clear();
 *
 * // Toggle pin
 * GpioA3.toggle();
 *
 * // Set pin to boolean value
 * GpioA3.write(true);
 *
 * // Set pin to boolean value
 * GpioA3.write(false);
 *
 * // Set as digital input
 * GpioA3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioA3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioA = Gpio_T<GpioAInfo, bitNum>;

/**
 * @brief Convenience template for GpioA fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioA
 * GpioAField<6,3> GpioA6_3
 *
 * // Set as digital output
 * GpioA6_3.setOutput();
 *
 * // Write value to field
 * GpioA6_3.write(0x53);
 *
 * // Clear all of field
 * GpioA6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioA6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioA6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioA6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioA6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioAField = Field_T<GpioAInfo, left, right>;

/**
 * @brief Convenience template for GpioB. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioB
 * GpioB<3> GpioB3
 *
 * // Set as digital output
 * GpioB3.setOutput();
 *
 * // Set pin high
 * GpioB3.set();
 *
 * // Set pin low
 * GpioB3.clear();
 *
 * // Toggle pin
 * GpioB3.toggle();
 *
 * // Set pin to boolean value
 * GpioB3.write(true);
 *
 * // Set pin to boolean value
 * GpioB3.write(false);
 *
 * // Set as digital input
 * GpioB3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioB3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioB = Gpio_T<GpioBInfo, bitNum>;

/**
 * @brief Convenience template for GpioB fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioB
 * GpioBField<6,3> GpioB6_3
 *
 * // Set as digital output
 * GpioB6_3.setOutput();
 *
 * // Write value to field
 * GpioB6_3.write(0x53);
 *
 * // Clear all of field
 * GpioB6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioB6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioB6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioB6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioB6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioBField = Field_T<GpioBInfo, left, right>;

/**
 * @brief Convenience template for GpioC. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioC
 * GpioC<3> GpioC3
 *
 * // Set as digital output
 * GpioC3.setOutput();
 *
 * // Set pin high
 * GpioC3.set();
 *
 * // Set pin low
 * GpioC3.clear();
 *
 * // Toggle pin
 * GpioC3.toggle();
 *
 * // Set pin to boolean value
 * GpioC3.write(true);
 *
 * // Set pin to boolean value
 * GpioC3.write(false);
 *
 * // Set as digital input
 * GpioC3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioC3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioC = Gpio_T<GpioCInfo, bitNum>;

/**
 * @brief Convenience template for GpioC fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioC
 * GpioCField<6,3> GpioC6_3
 *
 * // Set as digital output
 * GpioC6_3.setOutput();
 *
 * // Write value to field
 * GpioC6_3.write(0x53);
 *
 * // Clear all of field
 * GpioC6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioC6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioC6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioC6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioC6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioCField = Field_T<GpioCInfo, left, right>;

/**
 * @brief Convenience template for GpioD. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioD
 * GpioD<3> GpioD3
 *
 * // Set as digital output
 * GpioD3.setOutput();
 *
 * // Set pin high
 * GpioD3.set();
 *
 * // Set pin low
 * GpioD3.clear();
 *
 * // Toggle pin
 * GpioD3.toggle();
 *
 * // Set pin to boolean value
 * GpioD3.write(true);
 *
 * // Set pin to boolean value
 * GpioD3.write(false);
 *
 * // Set as digital input
 * GpioD3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioD3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioD = Gpio_T<GpioDInfo, bitNum>;

/**
 * @brief Convenience template for GpioD fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioD
 * GpioDField<6,3> GpioD6_3
 *
 * // Set as digital output
 * GpioD6_3.setOutput();
 *
 * // Write value to field
 * GpioD6_3.write(0x53);
 *
 * // Clear all of field
 * GpioD6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioD6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioD6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioD6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioD6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioDField = Field_T<GpioDInfo, left, right>;

/**
 * @brief Convenience template for GpioE. See @ref Gpio_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 3 of GpioE
 * GpioE<3> GpioE3
 *
 * // Set as digital output
 * GpioE3.setOutput();
 *
 * // Set pin high
 * GpioE3.set();
 *
 * // Set pin low
 * GpioE3.clear();
 *
 * // Toggle pin
 * GpioE3.toggle();
 *
 * // Set pin to boolean value
 * GpioE3.write(true);
 *
 * // Set pin to boolean value
 * GpioE3.write(false);
 *
 * // Set as digital input
 * GpioE3.setInput();
 *
 * // Read pin as boolean value
 * bool x = GpioE3.read();
 * @endcode
 *
 * @tparam bitNum        Bit number in the port
 */
template<uint8_t bitNum> using GpioE = Gpio_T<GpioEInfo, bitNum>;

/**
 * @brief Convenience template for GpioE fields. See @ref Field_T
 *
 * <b>Usage</b>
 * @code
 * // Instantiate for bit 6 down to 3 of GpioE
 * GpioEField<6,3> GpioE6_3
 *
 * // Set as digital output
 * GpioE6_3.setOutput();
 *
 * // Write value to field
 * GpioE6_3.write(0x53);
 *
 * // Clear all of field
 * GpioE6_3.bitClear();
 *
 * // Clear lower two bits of field
 * GpioE6_3.bitClear(0x3);
 *
 * // Set lower two bits of field
 * GpioE6_3.bitSet(0x3);
 *
 * // Set as digital input
 * GpioE6_3.setInput();
 *
 * // Read pin as int value
 * int x = GpioE6_3.read();
 * @endcode
 *
 * @tparam left          Bit number of leftmost bit in port (inclusive)
 * @tparam right         Bit number of rightmost bit in port (inclusive)
 */
template<int left, int right> using GpioEField = Field_T<GpioEInfo, left, right>;

/** 
 * End GPIO_Group
 * @}
 */
/**
 * Used to configure pin-mapping before 1st use of peripherals
 */
extern void usbdm_PinMapping();

} // End namespace USBDM
/**
 *
 * @mainpage Summary
 *
 * @section PinsByPinName Pins by Pin Name
 *
 *    Pin Name               |   Functions                                 |  Location           |  Description  
 *  ------------------------ | --------------------------------------------|---------------------| ------------- 
 *  ADC0_DM0                 | ADC0_DM0/ADC1_DM3                           | L2                  | -       
 *  ADC0_DM1                 | ADC0_DM1                                    | J2                  | -       
 *  ADC0_DP0                 | ADC0_DP0/ADC1_DP3                           | L1                  | -       
 *  ADC0_DP1                 | ADC0_DP1                                    | J1                  | -       
 *  ADC0_SE16                | ADC0_SE16/CMP1_IN2/ADC0_SE21                | J3                  | -       
 *  ADC1_DM0                 | ADC1_DM0/ADC0_DM3                           | M2                  | -       
 *  ADC1_DM1                 | ADC1_DM1                                    | K2                  | -       
 *  ADC1_DP0                 | ADC1_DP0/ADC0_DP3                           | M1                  | -       
 *  ADC1_DP1                 | ADC1_DP1                                    | K1                  | -       
 *  ADC1_SE16                | ADC1_SE16/CMP2_IN2/ADC0_SE22                | K3                  | -       
 *  DAC0_OUT                 | DAC0_OUT/CMP1_IN3/ADC0_SE23                 | L3                  | -       
 *  DAC1_OUT                 | DAC1_OUT/CMP0_IN4/CMP2_IN3/ADC1_SE23        | L4                  | -       
 *  EXTAL32                  | EXTAL32                                     | M6                  | -       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | J5                  | -       
 *  PTA1                     | JTAG_TDI                                    | J6                  | -       
 *  PTA2                     | JTAG_TDO/TRACE_SWO                          | K6                  | -       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | K7                  | -       
 *  PTA4                     | NMI_b                                       | L7                  | -       
 *  PTA5                     | Disabled                                    | M8                  | -       
 *  PTA6                     | Disabled                                    | J7                  | -       
 *  PTA7                     | ADC0_SE10                                   | J8                  | -       
 *  PTA8                     | ADC0_SE11                                   | K8                  | -       
 *  PTA9                     | Disabled                                    | L8                  | -       
 *  PTA10                    | Disabled                                    | M9                  | -       
 *  PTA11                    | Disabled                                    | L9                  | -       
 *  PTA12                    | CMP2_IN0                                    | K9                  | -       
 *  PTA13                    | CMP2_IN1                                    | J9                  | -       
 *  PTA14                    | Disabled                                    | L10                 | -       
 *  PTA15                    | Disabled                                    | L11                 | -       
 *  PTA16                    | Disabled                                    | K10                 | -       
 *  PTA17                    | ADC1_SE17                                   | K11                 | -       
 *  PTA18                    | EXTAL0                                      | M12                 | -       
 *  PTA19                    | XTAL0                                       | M11                 | -       
 *  PTA24                    | Disabled                                    | K12                 | -       
 *  PTA25                    | Disabled                                    | J12                 | -       
 *  PTA26                    | Disabled                                    | J11                 | -       
 *  PTA27                    | Disabled                                    | J10                 | -       
 *  PTA28                    | Disabled                                    | H12                 | -       
 *  PTA29                    | Disabled                                    | H11                 | -       
 *  PTB0                     | ADC0_SE8/ADC1_SE8                           | H10                 | -       
 *  PTB1                     | ADC0_SE9/ADC1_SE9                           | H9                  | -       
 *  PTB2                     | ADC0_SE12                                   | G12                 | -       
 *  PTB3                     | ADC0_SE13                                   | G11                 | -       
 *  PTB4                     | ADC1_SE10                                   | G10                 | -       
 *  PTB5                     | ADC1_SE11                                   | G9                  | -       
 *  PTB6                     | ADC1_SE12                                   | F12                 | -       
 *  PTB7                     | ADC1_SE13                                   | F11                 | -       
 *  PTB8                     | Disabled                                    | F10                 | -       
 *  PTB9                     | Disabled                                    | F9                  | -       
 *  PTB10                    | ADC1_SE14                                   | E12                 | -       
 *  PTB11                    | ADC1_SE15                                   | E11                 | -       
 *  PTB16                    | Disabled                                    | E10                 | -       
 *  PTB17                    | Disabled                                    | E9                  | -       
 *  PTB18                    | Disabled                                    | D12                 | -       
 *  PTB19                    | Disabled                                    | D11                 | -       
 *  PTB20                    | Disabled                                    | D10                 | -       
 *  PTB21                    | Disabled                                    | D9                  | -       
 *  PTB22                    | Disabled                                    | C12                 | -       
 *  PTB23                    | Disabled                                    | C11                 | -       
 *  PTC0                     | ADC0_SE14                                   | B12                 | -       
 *  PTC1                     | ADC0_SE15                                   | B11                 | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0                          | A12                 | -       
 *  PTC3                     | CMP1_IN1                                    | A11                 | -       
 *  PTC4                     | Disabled                                    | A9                  | -       
 *  PTC5                     | Disabled                                    | D8                  | -       
 *  PTC6                     | CMP0_IN0                                    | C8                  | -       
 *  PTC7                     | CMP0_IN1                                    | B8                  | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | A8                  | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | D7                  | -       
 *  PTC10                    | ADC1_SE6b                                   | C7                  | -       
 *  PTC11                    | ADC1_SE7b                                   | B7                  | -       
 *  PTC12                    | Disabled                                    | A7                  | -       
 *  PTC13                    | Disabled                                    | D6                  | -       
 *  PTC14                    | Disabled                                    | C6                  | -       
 *  PTC15                    | Disabled                                    | B6                  | -       
 *  PTC16                    | Disabled                                    | A6                  | -       
 *  PTC17                    | Disabled                                    | D5                  | -       
 *  PTC18                    | Disabled                                    | C5                  | -       
 *  PTC19                    | Disabled                                    | B5                  | -       
 *  PTD0                     | Disabled                                    | A5                  | -       
 *  PTD1                     | ADC0_SE5b                                   | D4                  | -       
 *  PTD2                     | Disabled                                    | C4                  | -       
 *  PTD3                     | Disabled                                    | B4                  | -       
 *  PTD4                     | Disabled                                    | A4                  | -       
 *  PTD5                     | ADC0_SE6b                                   | A3                  | -       
 *  PTD6                     | ADC0_SE7b                                   | A2                  | -       
 *  PTD7                     | Disabled                                    | A1                  | -       
 *  PTD8                     | Disabled                                    | C9                  | -       
 *  PTD9                     | Disabled                                    | B9                  | -       
 *  PTD10                    | Disabled                                    | B3                  | -       
 *  PTD11                    | Disabled                                    | B2                  | -       
 *  PTD12                    | Disabled                                    | B1                  | -       
 *  PTD13                    | Disabled                                    | C3                  | -       
 *  PTD14                    | Disabled                                    | C2                  | -       
 *  PTD15                    | Disabled                                    | C1                  | -       
 *  PTE0                     | ADC1_SE4a                                   | D3                  | -       
 *  PTE1                     | ADC1_SE5a                                   | D2                  | -       
 *  PTE2                     | ADC0_DP2/ADC1_SE6a                          | D1                  | -       
 *  PTE3                     | ADC0_DM2/ADC1_SE7a                          | E4                  | -       
 *  PTE4                     | Disabled                                    | E3                  | -       
 *  PTE5                     | Disabled                                    | E2                  | -       
 *  PTE6                     | Disabled                                    | E1                  | -       
 *  PTE7                     | Disabled                                    | F4                  | -       
 *  PTE8                     | Disabled                                    | F3                  | -       
 *  PTE9                     | Disabled                                    | F2                  | -       
 *  PTE10                    | Disabled                                    | F1                  | -       
 *  PTE11                    | Disabled                                    | G4                  | -       
 *  PTE12                    | Disabled                                    | G3                  | -       
 *  PTE24                    | ADC0_SE17                                   | M4                  | -       
 *  PTE25                    | ADC0_SE18                                   | K5                  | -       
 *  PTE26                    | Disabled                                    | K4                  | -       
 *  PTE27                    | Disabled                                    | J4                  | -       
 *  PTE28                    | Disabled                                    | H4                  | -       
 *  RESET_b                  | RESET_b                                     | L12                 | -       
 *  RTC_WAKEUP_B             | RTC_WAKEUP_B                                | L5                  | -       
 *  USB0_DM                  | USB0_DM                                     | H2                  | -       
 *  USB0_DP                  | USB0_DP                                     | H1                  | -       
 *  VBAT                     | VBAT                                        | L6                  | -       
 *  VDD1                     | VDD1                                        | E5                  | -       
 *  VDD2                     | VDD2                                        | E6                  | -       
 *  VDD4                     | VDD4                                        | E7                  | -       
 *  VDD5                     | VDD5                                        | E8                  | -       
 *  VDD6                     | VDD6                                        | F5                  | -       
 *  VDD9                     | VDD9                                        | F8                  | -       
 *  VDDA                     | VDDA                                        | H5                  | -       
 *  VOUT33                   | VOUT33                                      | G1                  | -       
 *  VREFH                    | VREFH                                       | G5                  | -       
 *  VREFL                    | VREFL                                       | G6                  | -       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5/ADC1_SE18        | M3                  | -       
 *  VREGIN                   | VREGIN                                      | G2                  | -       
 *  VSS1                     | VSS1                                        | F6                  | -       
 *  VSS2                     | VSS2                                        | F7                  | -       
 *  VSS2a                    | VSS2a                                       | H3                  | -       
 *  VSS4                     | VSS4                                        | G7                  | -       
 *  VSS5                     | VSS5                                        | G8                  | -       
 *  VSS6                     | VSS6                                        | H7                  | -       
 *  VSS7                     | VSS7                                        | H8                  | -       
 *  VSS9                     | VSS9                                        | M10                 | -       
 *  VSSA                     | VSSA                                        | H6                  | -       
 *  XTAL32                   | XTAL32                                      | M7                  | -       
 *
 *
 * @section PinsByLocation Pins by Location
 *
 *    Pin Name               |   Functions                                 |  Location           |  Description  
 *  ------------------------ | --------------------------------------------|---------------------| ------------- 
 *  PTD7                     | Disabled                                    | A1                  | -       
 *  PTD6                     | ADC0_SE7b                                   | A2                  | -       
 *  PTD5                     | ADC0_SE6b                                   | A3                  | -       
 *  PTD4                     | Disabled                                    | A4                  | -       
 *  PTD0                     | Disabled                                    | A5                  | -       
 *  PTC16                    | Disabled                                    | A6                  | -       
 *  PTC12                    | Disabled                                    | A7                  | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | A8                  | -       
 *  PTC4                     | Disabled                                    | A9                  | -       
 *  PTC3                     | CMP1_IN1                                    | A11                 | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0                          | A12                 | -       
 *  PTD12                    | Disabled                                    | B1                  | -       
 *  PTD11                    | Disabled                                    | B2                  | -       
 *  PTD10                    | Disabled                                    | B3                  | -       
 *  PTD3                     | Disabled                                    | B4                  | -       
 *  PTC19                    | Disabled                                    | B5                  | -       
 *  PTC15                    | Disabled                                    | B6                  | -       
 *  PTC11                    | ADC1_SE7b                                   | B7                  | -       
 *  PTC7                     | CMP0_IN1                                    | B8                  | -       
 *  PTD9                     | Disabled                                    | B9                  | -       
 *  PTC1                     | ADC0_SE15                                   | B11                 | -       
 *  PTC0                     | ADC0_SE14                                   | B12                 | -       
 *  PTD15                    | Disabled                                    | C1                  | -       
 *  PTD14                    | Disabled                                    | C2                  | -       
 *  PTD13                    | Disabled                                    | C3                  | -       
 *  PTD2                     | Disabled                                    | C4                  | -       
 *  PTC18                    | Disabled                                    | C5                  | -       
 *  PTC14                    | Disabled                                    | C6                  | -       
 *  PTC10                    | ADC1_SE6b                                   | C7                  | -       
 *  PTC6                     | CMP0_IN0                                    | C8                  | -       
 *  PTD8                     | Disabled                                    | C9                  | -       
 *  PTB23                    | Disabled                                    | C11                 | -       
 *  PTB22                    | Disabled                                    | C12                 | -       
 *  PTE2                     | ADC0_DP2/ADC1_SE6a                          | D1                  | -       
 *  PTE1                     | ADC1_SE5a                                   | D2                  | -       
 *  PTE0                     | ADC1_SE4a                                   | D3                  | -       
 *  PTD1                     | ADC0_SE5b                                   | D4                  | -       
 *  PTC17                    | Disabled                                    | D5                  | -       
 *  PTC13                    | Disabled                                    | D6                  | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | D7                  | -       
 *  PTC5                     | Disabled                                    | D8                  | -       
 *  PTB21                    | Disabled                                    | D9                  | -       
 *  PTB20                    | Disabled                                    | D10                 | -       
 *  PTB19                    | Disabled                                    | D11                 | -       
 *  PTB18                    | Disabled                                    | D12                 | -       
 *  PTE6                     | Disabled                                    | E1                  | -       
 *  PTE5                     | Disabled                                    | E2                  | -       
 *  PTE4                     | Disabled                                    | E3                  | -       
 *  PTE3                     | ADC0_DM2/ADC1_SE7a                          | E4                  | -       
 *  VDD1                     | VDD1                                        | E5                  | -       
 *  VDD2                     | VDD2                                        | E6                  | -       
 *  VDD4                     | VDD4                                        | E7                  | -       
 *  VDD5                     | VDD5                                        | E8                  | -       
 *  PTB17                    | Disabled                                    | E9                  | -       
 *  PTB16                    | Disabled                                    | E10                 | -       
 *  PTB11                    | ADC1_SE15                                   | E11                 | -       
 *  PTB10                    | ADC1_SE14                                   | E12                 | -       
 *  PTE10                    | Disabled                                    | F1                  | -       
 *  PTE9                     | Disabled                                    | F2                  | -       
 *  PTE8                     | Disabled                                    | F3                  | -       
 *  PTE7                     | Disabled                                    | F4                  | -       
 *  VDD6                     | VDD6                                        | F5                  | -       
 *  VSS1                     | VSS1                                        | F6                  | -       
 *  VSS2                     | VSS2                                        | F7                  | -       
 *  VDD9                     | VDD9                                        | F8                  | -       
 *  PTB9                     | Disabled                                    | F9                  | -       
 *  PTB8                     | Disabled                                    | F10                 | -       
 *  PTB7                     | ADC1_SE13                                   | F11                 | -       
 *  PTB6                     | ADC1_SE12                                   | F12                 | -       
 *  VOUT33                   | VOUT33                                      | G1                  | -       
 *  VREGIN                   | VREGIN                                      | G2                  | -       
 *  PTE12                    | Disabled                                    | G3                  | -       
 *  PTE11                    | Disabled                                    | G4                  | -       
 *  VREFH                    | VREFH                                       | G5                  | -       
 *  VREFL                    | VREFL                                       | G6                  | -       
 *  VSS4                     | VSS4                                        | G7                  | -       
 *  VSS5                     | VSS5                                        | G8                  | -       
 *  PTB5                     | ADC1_SE11                                   | G9                  | -       
 *  PTB4                     | ADC1_SE10                                   | G10                 | -       
 *  PTB3                     | ADC0_SE13                                   | G11                 | -       
 *  PTB2                     | ADC0_SE12                                   | G12                 | -       
 *  USB0_DP                  | USB0_DP                                     | H1                  | -       
 *  USB0_DM                  | USB0_DM                                     | H2                  | -       
 *  VSS2a                    | VSS2a                                       | H3                  | -       
 *  PTE28                    | Disabled                                    | H4                  | -       
 *  VDDA                     | VDDA                                        | H5                  | -       
 *  VSSA                     | VSSA                                        | H6                  | -       
 *  VSS6                     | VSS6                                        | H7                  | -       
 *  VSS7                     | VSS7                                        | H8                  | -       
 *  PTB1                     | ADC0_SE9/ADC1_SE9                           | H9                  | -       
 *  PTB0                     | ADC0_SE8/ADC1_SE8                           | H10                 | -       
 *  PTA29                    | Disabled                                    | H11                 | -       
 *  PTA28                    | Disabled                                    | H12                 | -       
 *  ADC0_DP1                 | ADC0_DP1                                    | J1                  | -       
 *  ADC0_DM1                 | ADC0_DM1                                    | J2                  | -       
 *  ADC0_SE16                | ADC0_SE16/CMP1_IN2/ADC0_SE21                | J3                  | -       
 *  PTE27                    | Disabled                                    | J4                  | -       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | J5                  | -       
 *  PTA1                     | JTAG_TDI                                    | J6                  | -       
 *  PTA6                     | Disabled                                    | J7                  | -       
 *  PTA7                     | ADC0_SE10                                   | J8                  | -       
 *  PTA13                    | CMP2_IN1                                    | J9                  | -       
 *  PTA27                    | Disabled                                    | J10                 | -       
 *  PTA26                    | Disabled                                    | J11                 | -       
 *  PTA25                    | Disabled                                    | J12                 | -       
 *  ADC1_DP1                 | ADC1_DP1                                    | K1                  | -       
 *  ADC1_DM1                 | ADC1_DM1                                    | K2                  | -       
 *  ADC1_SE16                | ADC1_SE16/CMP2_IN2/ADC0_SE22                | K3                  | -       
 *  PTE26                    | Disabled                                    | K4                  | -       
 *  PTE25                    | ADC0_SE18                                   | K5                  | -       
 *  PTA2                     | JTAG_TDO/TRACE_SWO                          | K6                  | -       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | K7                  | -       
 *  PTA8                     | ADC0_SE11                                   | K8                  | -       
 *  PTA12                    | CMP2_IN0                                    | K9                  | -       
 *  PTA16                    | Disabled                                    | K10                 | -       
 *  PTA17                    | ADC1_SE17                                   | K11                 | -       
 *  PTA24                    | Disabled                                    | K12                 | -       
 *  ADC0_DP0                 | ADC0_DP0/ADC1_DP3                           | L1                  | -       
 *  ADC0_DM0                 | ADC0_DM0/ADC1_DM3                           | L2                  | -       
 *  DAC0_OUT                 | DAC0_OUT/CMP1_IN3/ADC0_SE23                 | L3                  | -       
 *  DAC1_OUT                 | DAC1_OUT/CMP0_IN4/CMP2_IN3/ADC1_SE23        | L4                  | -       
 *  RTC_WAKEUP_B             | RTC_WAKEUP_B                                | L5                  | -       
 *  VBAT                     | VBAT                                        | L6                  | -       
 *  PTA4                     | NMI_b                                       | L7                  | -       
 *  PTA9                     | Disabled                                    | L8                  | -       
 *  PTA11                    | Disabled                                    | L9                  | -       
 *  PTA14                    | Disabled                                    | L10                 | -       
 *  PTA15                    | Disabled                                    | L11                 | -       
 *  RESET_b                  | RESET_b                                     | L12                 | -       
 *  ADC1_DP0                 | ADC1_DP0/ADC0_DP3                           | M1                  | -       
 *  ADC1_DM0                 | ADC1_DM0/ADC0_DM3                           | M2                  | -       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5/ADC1_SE18        | M3                  | -       
 *  PTE24                    | ADC0_SE17                                   | M4                  | -       
 *  EXTAL32                  | EXTAL32                                     | M6                  | -       
 *  XTAL32                   | XTAL32                                      | M7                  | -       
 *  PTA5                     | Disabled                                    | M8                  | -       
 *  PTA10                    | Disabled                                    | M9                  | -       
 *  VSS9                     | VSS9                                        | M10                 | -       
 *  PTA19                    | XTAL0                                       | M11                 | -       
 *  PTA18                    | EXTAL0                                      | M12                 | -       
 *
 *
 * @section PinsByFunction Pins by Function
 *
 *    Pin Name               |   Functions                                 |  Location           |  Description  
 *  ------------------------ | --------------------------------------------|---------------------| ------------- 
 *  ADC0_DM0                 | ADC0_DM0/ADC1_DM3                           | L2                  | -       
 *  ADC0_DM1                 | ADC0_DM1                                    | J2                  | -       
 *  PTE3                     | ADC0_DM2/ADC1_SE7a                          | E4                  | -       
 *  ADC0_DP0                 | ADC0_DP0/ADC1_DP3                           | L1                  | -       
 *  ADC0_DP1                 | ADC0_DP1                                    | J1                  | -       
 *  PTE2                     | ADC0_DP2/ADC1_SE6a                          | D1                  | -       
 *  PTC2                     | ADC0_SE4b/CMP1_IN0                          | A12                 | -       
 *  PTD1                     | ADC0_SE5b                                   | D4                  | -       
 *  PTD5                     | ADC0_SE6b                                   | A3                  | -       
 *  PTD6                     | ADC0_SE7b                                   | A2                  | -       
 *  PTB0                     | ADC0_SE8/ADC1_SE8                           | H10                 | -       
 *  PTB1                     | ADC0_SE9/ADC1_SE9                           | H9                  | -       
 *  PTA7                     | ADC0_SE10                                   | J8                  | -       
 *  PTA8                     | ADC0_SE11                                   | K8                  | -       
 *  PTB2                     | ADC0_SE12                                   | G12                 | -       
 *  PTB3                     | ADC0_SE13                                   | G11                 | -       
 *  PTC0                     | ADC0_SE14                                   | B12                 | -       
 *  PTC1                     | ADC0_SE15                                   | B11                 | -       
 *  ADC0_SE16                | ADC0_SE16/CMP1_IN2/ADC0_SE21                | J3                  | -       
 *  PTE24                    | ADC0_SE17                                   | M4                  | -       
 *  PTE25                    | ADC0_SE18                                   | K5                  | -       
 *  ADC1_DM0                 | ADC1_DM0/ADC0_DM3                           | M2                  | -       
 *  ADC1_DM1                 | ADC1_DM1                                    | K2                  | -       
 *  ADC1_DP0                 | ADC1_DP0/ADC0_DP3                           | M1                  | -       
 *  ADC1_DP1                 | ADC1_DP1                                    | K1                  | -       
 *  PTE0                     | ADC1_SE4a                                   | D3                  | -       
 *  PTC8                     | ADC1_SE4b/CMP0_IN2                          | A8                  | -       
 *  PTE1                     | ADC1_SE5a                                   | D2                  | -       
 *  PTC9                     | ADC1_SE5b/CMP0_IN3                          | D7                  | -       
 *  PTC10                    | ADC1_SE6b                                   | C7                  | -       
 *  PTC11                    | ADC1_SE7b                                   | B7                  | -       
 *  PTB4                     | ADC1_SE10                                   | G10                 | -       
 *  PTB5                     | ADC1_SE11                                   | G9                  | -       
 *  PTB6                     | ADC1_SE12                                   | F12                 | -       
 *  PTB7                     | ADC1_SE13                                   | F11                 | -       
 *  PTB10                    | ADC1_SE14                                   | E12                 | -       
 *  PTB11                    | ADC1_SE15                                   | E11                 | -       
 *  ADC1_SE16                | ADC1_SE16/CMP2_IN2/ADC0_SE22                | K3                  | -       
 *  PTA17                    | ADC1_SE17                                   | K11                 | -       
 *  PTC6                     | CMP0_IN0                                    | C8                  | -       
 *  PTC7                     | CMP0_IN1                                    | B8                  | -       
 *  PTC3                     | CMP1_IN1                                    | A11                 | -       
 *  PTA12                    | CMP2_IN0                                    | K9                  | -       
 *  PTA13                    | CMP2_IN1                                    | J9                  | -       
 *  DAC0_OUT                 | DAC0_OUT/CMP1_IN3/ADC0_SE23                 | L3                  | -       
 *  DAC1_OUT                 | DAC1_OUT/CMP0_IN4/CMP2_IN3/ADC1_SE23        | L4                  | -       
 *  PTE28                    | Disabled                                    | H4                  | -       
 *  PTA18                    | EXTAL0                                      | M12                 | -       
 *  EXTAL32                  | EXTAL32                                     | M6                  | -       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | J5                  | -       
 *  PTA1                     | JTAG_TDI                                    | J6                  | -       
 *  PTA2                     | JTAG_TDO/TRACE_SWO                          | K6                  | -       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | K7                  | -       
 *  PTA4                     | NMI_b                                       | L7                  | -       
 *  RESET_b                  | RESET_b                                     | L12                 | -       
 *  RTC_WAKEUP_B             | RTC_WAKEUP_B                                | L5                  | -       
 *  USB0_DM                  | USB0_DM                                     | H2                  | -       
 *  USB0_DP                  | USB0_DP                                     | H1                  | -       
 *  VBAT                     | VBAT                                        | L6                  | -       
 *  VDD1                     | VDD1                                        | E5                  | -       
 *  VDD2                     | VDD2                                        | E6                  | -       
 *  VDD4                     | VDD4                                        | E7                  | -       
 *  VDD5                     | VDD5                                        | E8                  | -       
 *  VDD6                     | VDD6                                        | F5                  | -       
 *  VDD9                     | VDD9                                        | F8                  | -       
 *  VDDA                     | VDDA                                        | H5                  | -       
 *  VOUT33                   | VOUT33                                      | G1                  | -       
 *  VREFH                    | VREFH                                       | G5                  | -       
 *  VREFL                    | VREFL                                       | G6                  | -       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5/ADC1_SE18        | M3                  | -       
 *  VREGIN                   | VREGIN                                      | G2                  | -       
 *  VSS1                     | VSS1                                        | F6                  | -       
 *  VSS2                     | VSS2                                        | F7                  | -       
 *  VSS2a                    | VSS2a                                       | H3                  | -       
 *  VSS4                     | VSS4                                        | G7                  | -       
 *  VSS5                     | VSS5                                        | G8                  | -       
 *  VSS6                     | VSS6                                        | H7                  | -       
 *  VSS7                     | VSS7                                        | H8                  | -       
 *  VSS9                     | VSS9                                        | M10                 | -       
 *  VSSA                     | VSSA                                        | H6                  | -       
 *  PTA19                    | XTAL0                                       | M11                 | -       
 *  XTAL32                   | XTAL32                                      | M7                  | -       
 *
 */

#endif /* PROJECT_HEADERS_PIN_MAPPING_H */
